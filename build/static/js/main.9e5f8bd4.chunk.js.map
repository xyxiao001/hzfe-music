{"version":3,"sources":["utils/index.ts","Components/Lrc/index.tsx","Components/Progress/index.tsx","utils/local.ts","store/common.ts","Components/Control/index.tsx","Components/Lrc/Lrc-word.tsx","Components/Player/index.tsx","config.ts","store/upload.ts","utils/upload.ts","Components/Upload/index.tsx","Components/LrcList/index.tsx","Components/Playing-icon/index.tsx","Components/MusicList/index.tsx","Components/AlbumList/index.tsx","Local/index.tsx","Love/index.tsx","Home/index.tsx","App.tsx","index.tsx"],"names":["loadFile","file","a","isBuffer","Promise","resolve","reject","reader","FileReader","onload","event","target","result","Blob","onerror","readAsArrayBuffer","readAsText","uint8arrayToBase64","u8Arr","slice","index","length","subarray","Math","min","String","fromCharCode","apply","btoa","formatTime","secs","minutes","floor","seconds","transformArrayToTime","str","timeArr","exec","map","item","Number","dataURLtoBlob","base64","arr","split","mime","res","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","type","Lrc","props","useState","lrcList","setLrcList","lrcIndex","setLrcIndex","lrcScroll","useRef","canScroll","setCanScroll","document","body","offsetHeight","lineHeight","setLineHeight","useEffect","lrc","lrc_s","lyric","replace","p1","lyricLen","i","lrcTimes","lrcText","timeLen","j","lrcTime","push","time","text","filter","sort","b","formatLrc","getChooseLrcIndex","currentTime","setCurrentLrc","isPlaying","current","top","querySelectorAll","forEach","scrollTo","behavior","getLrcChooseName","resize","window","addEventListener","removeEventListener","className","ref","onMouseEnter","onMouseLeave","lrcItem","key","style","color","dangerouslySetInnerHTML","__html","Progress","value","setValue","isChanging","setIsChanging","range","defaultValue","onChange","setChange","handleChanging","onAfterChange","tooltipVisible","addLrc","localforage","getItem","list","every","fileName","setItem","getLrcList","addMusic","musicInfo","blob","musicHash","random","Date","now","id","removeMusic","removeItem","getMusicList","getMusicInfoFromLocal","cur","music","lrcKey","content","picture","pictureUrl","URL","createObjectURL","removeLrc","common","handlePlay","console","log","updatedMusicData","musicPlayer","seek","duration","playing","change","navigator","MediaMetadata","mediaSession","metadata","title","name","artist","album","artwork","src","sizes","handlePause","handleEnd","requestAnimationFrame","handlePlaying","handleNextMusic","handleStop","musicData","setPositionState","playbackRate","position","stop","len","musicPlayList","next","play","handlePreMusic","pre","localMusicLrcList","url","this","preUrl","preImgUrl","revokeObjectURL","shift","code","updatePreUrl","updatePreImgUrl","Howl","autoplay","html5","format","codec","toLowerCase","fileType","volume","onplay","onpause","onend","onstop","setActionHandler","pause","evt","seekTime","data","process","hasOwnProperty","classList","remove","add","setTimeout","observable","action","loop","Map","localMusicList","get","set","localAlbumMap","localMusicLoading","updateMusicPlayList","cloneDeep","updateLocalAlbumList","message","success","updateLocalMusicList","error","localMusicLrcLoading","updateLocalMusicLrcList","musicColor","documentElement","setProperty","Control","setRange","allTime","currentInfo","musicPlayingInfo","onClick","StepBackwardOutlined","PauseCircleOutlined","PlayCircleOutlined","StepForwardOutlined","toFixed","LrcWord","backgroundImage","bg","setBg","lineTime","start","end","formatLrcProgress","getChooseLrcWordIndex","join","progress","wordIndex","getWordLineProgress","word","fac","FastAverageColor","Player","observer","currentLrc","refChange","playerMaxTransitions","useTransition","from","transform","enter","leave","setChangeFromControl","getInfoFormLocal","useCallback","handelPlay","getMusicInfo","info","updatedMusicInfo","getColorAsync","then","updateMusicColor","setSaturation","setLightness","rgba","catch","e","keyDown","keyCode","preventDefault","handelChangeSize","createdPlayer","destroyPlayer","alt","section","DownOutlined","supportMusicFormat","supportMusicLrcFormat","upload","checkUpload","isUploading","uploadList","handleUpload","uploadRun","File","addUploadTask","nameList","FileType","FileName","includes","handleMusicData","handleMusicLrc","warning","musicMetadata","obj","albumartist","artists","comment","date","sampleRate","fileSize","filesize","size","UploadFile","beforeUpload","showUploadList","accept","concat","acceptStr","multiple","icon","UploadOutlined","LrcList","columns","dataIndex","sorter","render","_","row","placement","onConfirm","handleDelete","okText","cancelText","loading","deleteLrc","dataSource","pagination","rowKey","PlayingIcon","MusicList","width","handlePauseClick","handlePlayClick","deleteMusic","AlbmuList","keys","TabPane","Tabs","Locale","history","useHistory","query","URLSearchParams","useLocation","search","params","setKey","handleRelated","musicList","clear","marginLeft","activeKey","pathname","tab","Love","Home","to","exact","path","Local","App","config","ReactDOM","locale","zh_CN","getElementById"],"mappings":"0nBAIaA,EAAQ,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,yDAAmBC,IAAnB,iCACjBF,EADiB,yCAEb,IAFa,gCAIf,IAAIG,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACf,IAAMC,EAASD,EAAMC,OAEnBN,EADEF,EACMQ,EAAOC,OAAS,IAAIC,KAAK,CAACF,EAAOC,SAAW,KAE5CD,EAAOC,SAGnBL,EAAOO,QAAUR,EAEbH,EACFI,EAAOQ,kBAAkBd,GAEzBM,EAAOS,WAAWf,OAnBA,2CAAH,sDA0DRgB,EAAqB,SAACC,GAMjC,IALA,IAIIC,EAHAC,EAAQ,EACRC,EAASH,EAAMG,OACfT,EAAS,GAENQ,EAAQC,GACbF,EAAQD,EAAMI,SAASF,EAAOG,KAAKC,IAAIJ,EANxB,MAM4CC,IAC3DT,GAAUa,OAAOC,aAAaC,MAAM,KAAMR,GAC1CC,GARe,MAUjB,OAAOQ,KAAKhB,IA8CDiB,EAAa,SAACC,GACzB,IAAMC,EAAUR,KAAKS,MAAMF,EAAO,KAAO,EACnCG,KAAaH,EAAiB,GAAVC,IAAiB,EAC3C,OAAQA,EAAU,GAAK,IAAM,IAAMA,EAAU,KAAOE,EAAU,GAAK,IAAM,IAAMA,GAkDpEC,EAAuB,SAACC,GAAyB,IAAD,EAErDC,GAAoB,6CAAmCC,KAAKF,UAAxC,eAA8CG,KAAI,SAAAC,GAC1E,OAAOA,EAAOC,OAAOD,GAAQ,OACzB,GAKN,OAJ6B,GAAbH,EAAQ,GACRA,EAAQ,IACPA,EAAQ,GAAKA,EAAQ,IAAmC,KAA5BA,EAAQ,GAAK,IAAIf,OAAe,IAAM,KAAQ,IAoHhFoB,EAAgB,SAACC,GAC5B,IAAMC,EAAMD,EAAOE,MAAM,KACrBC,EAAO,GACX,GAAIF,EAAItB,OAAQ,CACd,IAAMyB,EAAMH,EAAI,GAAGI,MAAM,YACzB,OAAID,QAAJ,IAAIA,OAAJ,EAAIA,EAAKzB,UACPwB,EAAOC,EAAI,IAMf,IAHA,IAAME,EAAOC,KAAKN,EAAI,IAClBO,EAAIF,EAAK3B,OACP8B,EAAQ,IAAIC,WAAWF,GACtBA,KACHC,EAAMD,GAAKF,EAAKK,WAAWH,GAE/B,OAAO,IAAIrC,KAAK,CAACsC,GAAQ,CAAEG,KAAMT,KCjLpBU,G,OAjIH,SAACC,GAOP,MAE0BC,mBAAyB,IAFnD,mBAEGC,EAFH,KAEYC,EAFZ,OAK4BF,oBAAU,GALtC,mBAKGG,EALH,KAKaC,EALb,KAQEC,EAAYC,iBAAO,MARrB,EAW8BN,oBAAS,GAXvC,mBAWGO,EAXH,KAWcC,EAXd,OAagCR,mBAAsC,IAA7BS,SAASC,KAAKC,aAAqB,KAb5E,mBAaGC,EAbH,KAaeC,EAbf,KAkBJC,qBAAU,WACRZ,ED+CqB,SAACa,GAKxB,IAAIC,EAAQD,EACZ,GAAIC,EAAO,CAKT,IAHA,IAAMC,GADND,EAAQA,EAAME,QAAQ,iBAAiB,SAAC5B,EAAO6B,GAAR,OAAeA,EAAK,UACvChC,MAAM,MACtBE,EAAM,GACJ+B,EAAWH,EAAMrD,OACdyD,EAAI,EAAGA,EAAID,EAAUC,IAAK,CAEjC,IAAMC,EAAWL,EAAMI,GAAG/B,MAAM,qCAE1BiC,EAAUN,EAAMI,GACnBH,QAAQ,sCAAuC,IAC/CA,QAAQ,mCAAoC,IAC5CA,QAAQ,aAAc,IAEzB,GAAII,EAGF,IADA,IAAME,EAAUF,EAAS1D,OAChB6D,EAAI,EAAGA,EAAID,EAASC,IAAK,CAChC,IAAMC,EAAUjD,EAAqB6C,EAASG,IAC9CpC,EAAIsC,KAAK,CACPC,KAAMF,EACNG,KAAMN,KAQd,OAFAlC,EAAMA,EAAIyC,QAAO,SAAChD,GAAD,OAAwBA,EAAK+C,SAC1CE,MAAK,SAACtF,EAAiBuF,GAAlB,OAAsCvF,EAAEmF,KAAOI,EAAEJ,QACnDvC,EAEP,MAAO,GCpFI4C,CAAUlC,EAAMgB,QAC1B,CAAChB,EAAMgB,MAEVD,qBAAU,WACRV,ED4F6B,SAACH,EAAyB2B,GACzD,GAAI3B,EAAQrC,QAAU,EAAG,OAAQ,EAGjC,IAFA,IAAID,EAAQ,EAELA,EAAQsC,EAAQrC,UACjBqC,EAAQtC,GAAOiE,KAAOA,IAG1BjE,IAEF,OAAOA,EAAQ,ECrGXuE,CAAkBjC,EAASF,EAAMoC,cAE/BlC,EAAQrC,QAAUqC,EAAQE,IAC5BJ,EAAMqC,cAAcnC,EAAQE,GAAU0B,QAEvC,CAAC1B,EAAUF,EAASF,IAEvBe,qBAAU,WACR,GAAIT,GAAaE,GAAaR,EAAMsC,UAAW,CAE7C,IAAMnF,EAAcmD,EAAUiC,QAG1BC,GArBU,GAsBd9B,SAAS+B,iBAAiB,eAAeC,SAAQ,SAAC3D,EAAWnB,GACvDA,EAAQwC,IACVoC,GAAOzD,EAAK6B,aAAeC,MAG3B1D,GACFA,EAAOwF,SAAS,CACdH,MACAI,SAAU,cAKf,CAACpC,EAAWK,EAAYT,EAAUJ,EAAMsC,YAE3C,IAAMO,EAAmB,SAACjF,GAExB,OAAGwC,IAAaxC,EACP,aAEF,IAGHkF,EAAS,WAEbhC,EAA2C,IAA7BJ,SAASC,KAAKC,aAAqB,MAWnD,OARAG,qBAAU,WAGR,OAFAgC,OAAOC,iBAAiB,SAAUF,GAClCA,IACO,WACLC,OAAOE,oBAAoB,SAAUH,MAEtC,IAGD,6BAASI,UAAU,YACjBC,IAAK7C,EACL8C,aAAc,WACZ3C,GAAa,IAEf4C,aAAc,WACZ,GAAKrD,EAAMsC,UAAX,CAIA,IAAMnF,EAAcmD,EAAUiC,QAC1BC,GAtEQ,GAuEZ9B,SAAS+B,iBAAiB,eAAeC,SAAQ,SAAC3D,EAAWnB,GACvDA,EAAQwC,IACVoC,GAAOzD,EAAK6B,aAAeC,MAG3B1D,GACFA,EAAOwF,SAAS,CACdH,MACAI,SAAU,SAGdnC,GAAa,QAhBXA,GAAa,KAmBjB,6BAASyC,UAAU,YAEfhD,EAAQpB,KAAI,SAACwE,EAAuB1F,GAAxB,OACV,uBACE2F,IAAG,UAAMD,EAAQzB,MAAd,OAAqByB,EAAQxB,MAChC0B,MAAO,CACLC,MAAOrD,IAAaxC,EAAQoC,EAAMyD,MAAQ,IAE5CP,UAAWL,EAAiBjF,GAC5B8F,wBAAyB,CACvBC,OAAQL,EAAQxB,e,yBChFjB8B,EAtCE,SAAC5D,GAIX,IAAD,EAEsBC,mBAAS,GAF/B,mBAEG4D,EAFH,KAEUC,EAFV,OAIgC7D,oBAAS,GAJzC,mBAIG8D,EAJH,KAIeC,EAJf,KAOJjD,qBAAU,WACHgD,GACHD,EAAS9D,EAAMiE,SAEhB,CAACF,EAAY/D,EAAMiE,QAgBtB,OACE,6BAASf,UAAU,YAChB,kBAAC,IAAD,CAAQgB,aAAc,EAAGL,MAAOA,EAAOM,SAhB3B,SAACN,GAChBG,GAAc,GACdhE,EAAMoE,WAAU,GAChBN,EAASD,GACT7D,EAAMqE,eAAeR,IAYyCS,cAT1C,SAACT,GAGrB7D,EAAMoE,WAAU,GAChBJ,GAAc,IAK8EO,gBAAgB,M,uICblGC,GAAM,uCAAG,WAAOxD,GAAP,eAAAtE,EAAA,4DACP,iBADO,SAGoB+H,KAAYC,QAFvC,kBADO,gDAGiD,GAHjD,cAGbC,EAHa,KAKLA,EAAKC,OAAM,SAAA7F,GAAI,OAAIA,EAAK8F,WAAa7D,EAAI6D,aAErDF,EAAK/C,KAAKZ,GAPO,kBASZyD,KAAYK,QAAQ,iBAAkBH,IAT1B,4CAAH,sDAaPI,GAAU,uCAAG,4BAAArI,EAAA,4DACZ,iBADY,SAEe+H,KAAYC,QADvC,kBADY,gDAE4C,GAF5C,cAElBC,EAFkB,uBAGjBA,GAHiB,2CAAH,qDAYVK,GAAQ,uCAAG,WAAOC,EAA+BC,GAAtC,iBAAAxI,EAAA,4DACV,aADU,SAGmB+H,KAAYC,QAFzC,cADU,gDAGgD,GAHhD,UAGhBC,EAHgB,MAKRA,EAAKC,OAAM,SAAA7F,GAAI,OAAIA,EAAK8F,WAAaI,EAAUJ,YALvC,wBAQdM,EARc,UAQCF,EAAUJ,SARX,YAQuC,IAAhB9G,KAAKqH,SAR5B,YAQ8CC,KAAKC,OACvEL,EAAUM,GAAKJ,EATK,UAUdV,KAAYK,QAAQK,EAAWD,GAVjB,QAWpBP,EAAK/C,KAAKqD,GAXU,iCAafR,KAAYK,QAAQ,aAAcH,IAbnB,4CAAH,wDAiBRa,GAAW,uCAAG,WAAOD,GAAP,SAAA7I,EAAA,+EAClB,IAAIE,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAJ,EAAA,sEAEH,aAFG,SAIwB+H,KAAYC,QAFvC,cAFG,gDAIqD,GAJrD,cAKfC,GADIA,EAJW,MAKH5C,QAAO,SAAAhD,GAAI,OAAIA,EAAKwG,KAAOA,KALxB,UAMTd,KAAYK,QAAQ,aAAcH,GANzB,yBAOTF,KAAYgB,WAAWF,GAPd,QAQf1I,GAAQ,GARO,kDAUfC,EAAO,EAAD,IAVS,0DAAZ,0DADkB,2CAAH,sDAiBX4I,GAAY,uCAAG,4BAAAhJ,EAAA,4DACd,aADc,SAEe+H,KAAYC,QADzC,cADc,gDAE4C,GAF5C,cAEpBC,EAFoB,uBAGnBA,GAHmB,2CAAH,qDAOZgB,GAAqB,uCAAG,WAAOJ,GAAP,SAAA7I,EAAA,+EAC5B,IAAIE,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,iBAAAJ,EAAA,sEACE+H,KAAYC,QAAQ,cADtB,gDAC+D,GAD/D,UACXC,EADW,KAEXiB,EAAMjB,EAAK5C,QAAO,SAAChD,GAAD,OAA8BA,EAAKwG,KAAOA,KAAI,GAFrD,iBAIfzI,EAAO,oDAJQ,yCAMG2H,KAAYC,QAAQa,GANvB,WAMfK,EAAIC,MANW,QAOXD,EAAIE,OAPO,kCAQUf,KARV,eASJrC,SAAQ,SAAA3D,GACVA,EAAK8F,WAAae,EAAIE,SACzBF,EAAI5E,IAAMjC,EAAKgH,YAXN,QAgBXH,EAAII,QAAQnI,OAAS,IACvB+H,EAAIK,WAAaC,IAAIC,gBAAgBlH,EAAc2G,EAAII,QAAQ,MAEjEnJ,EAAQ+I,GAnBO,4CAAZ,0DAD4B,2CAAH,sDA0BrBQ,GAAS,uCAAG,WAAOb,GAAP,SAAA7I,EAAA,+EAChB,IAAIE,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAJ,EAAA,sEAEH,iBAFG,SAIwB+H,KAAYC,QAFvC,kBAFG,gDAIqD,GAJrD,cAKfC,GADIA,EAJW,MAKH5C,QAAO,SAAAhD,GAAI,OAAIA,EAAK8F,WAAaU,KAL9B,UAMTd,KAAYK,QAAQ,iBAAkBH,GAN7B,QAOf9H,GAAQ,GAPO,kDASfC,EAAO,EAAD,IATS,0DAAZ,0DADgB,2CAAH,sD,UCkQhBuJ,GAAS,I,4KApRbC,WAAa,WAAO,IAAD,IAQ+B,GAPhDC,QAAQC,IAAI,kCACZ,EAAKC,iBAAiB,CACpBrE,YAAW,UAAE,EAAKsE,mBAAP,aAAE,EAAkBC,OAC/BC,SAAQ,UAAE,EAAKF,mBAAP,aAAE,EAAkBE,WAC5BC,SAAS,EACTC,QAAQ,IAEN,EAAK7B,YAAc,EAAKA,UAAU2B,YACpC,EAAK3B,UAAU2B,SAAW5H,OAAM,UAAC,EAAK0H,mBAAN,aAAC,EAAkBE,aAErD,IAAMG,EAAiBhE,OAAOgE,UACxBC,EAAgBjE,OAAOiE,cACzBD,EAAUE,cAAgB,EAAKhC,YACjC8B,EAAUE,aAAaC,SAAW,IAAIF,EAAc,CAClDG,MAAO,EAAKlC,UAAUmC,KACtBC,OAAQ,EAAKpC,UAAUoC,OACvBC,MAAO,EAAKrC,UAAUqC,MACtBC,QAAS,CAAC,CACRC,IAAK,EAAKvC,UAAUgB,YAAc,GAClCnG,KAAM,aACN2H,MAAO,gB,KAMfC,YAAc,WAAO,IAAD,EAClBnB,QAAQC,IAAI,kCACZ,EAAKC,iBAAiB,CACpBrE,YAAW,UAAE,EAAKsE,mBAAP,aAAE,EAAkBC,OAC/BE,SAAS,K,KAIbc,UAAY,WAAO,IAAD,EAChB,EAAKlB,iBAAiB,CACpBrE,YAAW,UAAE,EAAKsE,mBAAP,aAAE,EAAkBC,OAC/BE,SAAS,IAEXe,sBAAsB,EAAKC,eAC3BtB,QAAQC,IAAI,wCACZ,EAAKsB,mB,KAGPC,WAAa,WAAO,IAAD,EACjBxB,QAAQC,IAAI,4BACZ,EAAKC,iBAAiB,CACpBrE,YAAW,UAAE,EAAKsE,mBAAP,aAAE,EAAkBC,OAC/BE,SAAS,K,KAIbgB,cAAgB,WACd,IAAK,EAAKG,UAAUlB,QAAU,EAAKJ,aAAe,EAAKA,YAAYG,UAAW,CAC5E,EAAKJ,iBAAiB,CACpB3G,KAAM,SACNsC,YAAa,EAAKsE,YAAYC,SAEhC,IAAMI,EAAiBhE,OAAOgE,UAC1BA,EAAUE,cAAgB,EAAKP,aACjCK,EAAUE,aAAagB,iBAAiB,CACtCrB,SAAU5H,OAAO,EAAK0H,YAAYE,YAClCsB,aAAc,EACdC,SAAU,EAAKzB,YAAYC,SAQ/BiB,sBAAsB,EAAKC,iB,mNA4E/BC,gBAAkB,WACZ,EAAKpB,aACP,EAAKA,YAAY0B,OAInB,IAFA,IAAIxC,EAAM,EACJyC,EAAM,EAAKC,cAAczK,OAAS,EACjC+H,EAAM,EAAK0C,cAAczK,QAC1B,EAAKyK,cAAc1C,GAAKL,KAAO,EAAKyC,UAAUzC,IAGlDK,IAGF,IAEuD,EAFnD2C,EAAO3C,EAAM,GACjB2C,EAAOA,EAAOF,EAAOE,EAAOF,EAAO,EAAIE,EACnC,EAAKD,cAAcC,GAAMhD,KAAO,EAAKyC,UAAUzC,IACjD,YAAKmB,mBAAL,SAAkB8B,OAElBnC,GAAOI,iBAAiB,CACtBlB,GAAI,EAAK+C,cAAcC,GAAMhD,M,KAMnCkD,eAAiB,WACX,EAAK/B,aACP,EAAKA,YAAY0B,OAInB,IAFA,IAAIxC,EAAM,EACJyC,EAAM,EAAKC,cAAczK,OAAS,EACjC+H,EAAM,EAAK0C,cAAczK,QAC1B,EAAKyK,cAAc1C,GAAKL,KAAO,EAAKyC,UAAUzC,IAGlDK,IAGF,IAEsD,EAFlD8C,EAAM9C,EAAM,GAChB8C,EAAMA,EAAM,EAAIL,EAAMK,EAClB,EAAKJ,cAAcI,GAAKnD,KAAO,EAAKyC,UAAUzC,IAChD,YAAKmB,mBAAL,SAAkB8B,OAElBnC,GAAOI,iBAAiB,CACtBlB,GAAI,EAAK+C,cAAcI,GAAKnD,M,4QAiDlCoD,kBAAwC,G,oRAvU1BC,GACZC,KAAKC,OAASF,I,sCAOCA,GACfC,KAAKE,UAAUnH,KAAKgH,GAChBC,KAAKE,UAAUlL,QAAU,GAC3BqI,IAAI8C,gBAAgBH,KAAKE,UAAUE,W,sCASrB,IJiQUC,EIjQX,OACf,GAAIL,KAAK5D,UAAW,CAClB4D,KAAKpC,iBAAiB,CACpBI,SAAS,IAEX,IAAM+B,EAAM1C,IAAIC,gBAAgB0C,KAAK5D,UAAUY,OAC3CgD,KAAKC,QACP5C,IAAI8C,gBAAgBH,KAAKC,QAE3BD,KAAKM,aAAaP,GAClBC,KAAKO,gBAAgBP,KAAK5D,UAAUgB,YAAc,IAClD4C,KAAKnC,YAAc,IAAI2C,QAAK,CAC1BC,UAAU,EACV9B,IAAKoB,EACLW,OAAO,EACPC,OAAQ,EJkPcN,EIlPCL,KAAK5D,UAAUwE,MAAMC,eAAiBzL,OAAO4K,KAAK5D,UAAU0E,UAAUD,cJmPtF,mBAATR,EAAkC,MAC/BA,IInPDU,OAAQ,EACRC,OAAQhB,KAAKvC,WACbwD,QAASjB,KAAKnB,YACdqC,MAAOlB,KAAKlB,UACZqC,OAAQnB,KAAKd,aAEf,IAAMhB,EAAiBhE,OAAOgE,UAC1BA,EAAUE,eACZF,EAAUE,aAAagD,iBAAiB,QAAQ,WAAO,IAAD,EACpD,YAAKvD,mBAAL,SAAkB8B,UAEpBzB,EAAUE,aAAagD,iBAAiB,SAAS,WAAO,IAAD,EACrD,YAAKvD,mBAAL,SAAkBwD,WAEpBnD,EAAUE,aAAagD,iBAAiB,QAAQ,WAAO,IAAD,EACpD,YAAKvD,mBAAL,SAAkB0B,UAEpBrB,EAAUE,aAAagD,iBAAiB,UAAU,SAACE,GAAc,IAAD,EAExD/H,EAAcpD,OAAOmL,EAAIC,UAC/B,YAAK1D,mBAAL,SAAkBC,KAAKvE,MAEzB2E,EAAUE,aAAagD,iBAAiB,gBAAgB,SAACE,GAAc,IAAD,IACpE,EAAK1D,iBAAiB,CACpBK,QAAQ,IAEV,IAAM1E,EAAcpD,OAAM,UAAC,EAAK0H,mBAAN,aAAC,EAAkBC,QAAU,GACvD,YAAKD,mBAAL,SAAkBC,KAAKvE,GACvB,EAAKqE,iBAAiB,CACpBK,QAAQ,IAEVP,QAAQC,IAAI,mBAEdO,EAAUE,aAAagD,iBAAiB,eAAe,SAACE,GAAc,IAAD,IACnE,EAAK1D,iBAAiB,CACpBK,QAAQ,IAEV,IAAM1E,EAAcpD,OAAM,UAAC,EAAK0H,mBAAN,aAAC,EAAkBC,QAAU,GACvD,YAAKD,mBAAL,SAAkBC,KAAKvE,GACvB,EAAKqE,iBAAiB,CACpBK,QAAQ,IAEVP,QAAQC,IAAI,mBAEdO,EAAUE,aAAagD,iBAAiB,gBAAiBpB,KAAKJ,gBAC9D1B,EAAUE,aAAagD,iBAAiB,YAAapB,KAAKf,qB,sCAmF9De,KAAKnC,YAAc,O,uCAQH2D,GACY,IAAxBA,EAAKrE,QAAQnI,SACfwM,EAAKrE,QAAU,CAAC,GAAD,OAAIsE,IAAJ,2BAEjBzB,KAAK5D,UAAYoF,I,uCAiBDA,GAAY,IAAD,OACT,WAAdA,EAAKvK,MAKLuK,EAAKE,eAAe,SAClBF,EAAKrM,IACP0C,SAASC,KAAK6J,UAAUC,OAAO,iBAE/B/J,SAASC,KAAK6J,UAAUE,IAAI,kBAG3BL,EAAKvD,QACR6D,YAAW,WACT/C,sBAAsB,EAAKC,iBAC1B,KAELgB,KAAKb,UAAL,2BACKa,KAAKb,WACLqC,IAlBHxB,KAAKb,UAAU5F,YAAciI,EAAKjI,gB,0CAvMrCwI,M,wEACgB,M,yCAEhBC,M,iHAKAD,M,wEACqB,M,4CAErBC,M,sHASAD,M,yEAC0B,Q,0CAE1BC,M,oHA+IAA,M,kHAMAD,M,yEACsC,Q,6CAEtCC,M,qHAWAD,M,wEACuC,CACtCrF,GAAI,GACJsB,SAAS,EACTD,SAAU,EACVxE,YAAa,EACb0E,QAAQ,EACR9I,KAAK,M,6CAGN6M,M,4HA0BAD,M,wEACkB,CAEjBE,KAAM,a,4CAIPF,M,wEACqC,M,kDAErCC,M,oFACqB,SAAClG,GACrB,EAAK2D,cAAgB3D,M,6CAsDtBiG,M,wEACsC,M,gDACtCA,M,yEAC4B,K,4CAC5BA,M,yEACkD,IAAIG,O,mDAGtDF,M,oFACsB,WACrB,IAAM/L,EAAM,IAAIiM,IAChB,EAAKC,eAAetI,SAAQ,SAAA3D,GAAS,IAAD,EAClC,GAAmB,KAAfA,EAAKuI,MAAT,CACA,IAAMnK,EAAM,UAAG2B,EAAImM,IAAIlM,EAAKuI,cAAhB,QAA0B,GACtCxI,EAAIoM,IAAInM,EAAKuI,MAAb,sBAAwBnK,GAAxB,CAAgC4B,SAElC,EAAKoM,cAAgBrM,M,mDAGtB+L,M,0GACsB,sBAAAnO,EAAA,6DACrB,EAAK0O,mBAAoB,EADJ,SAEO1F,KAFP,OAErB,EAAKsF,eAFgB,OAIrB,EAAKK,oBAAoBC,oBAAU,EAAKN,iBACxC,EAAKO,uBACL,EAAKH,mBAAoB,EANJ,8C,0CAUtBP,M,2HAAqB,WAAOtF,GAAP,SAAA7I,EAAA,+EAEZ8I,GAAYD,GAFA,OAGlBiG,KAAQC,QAAQ,4BAChB,EAAKC,uBAJa,gDAMlBnF,QAAQC,IAAR,MACAgF,KAAQG,MAAM,4BAPI,yD,4GAcrBf,M,yEAC+B,K,sDAE/BC,M,0GACyB,sBAAAnO,EAAA,6DACxB,EAAKkP,sBAAuB,EADJ,SAEO7G,KAFP,OAExB,EAAK4D,kBAFmB,OAGxB,EAAKiD,sBAAuB,EAHJ,8C,wCAOzBf,M,2HAAmB,WAAOtF,GAAP,SAAA7I,EAAA,+EAEV0J,GAAUb,GAFA,OAGhBiG,KAAQC,QAAQ,4BAChB,EAAKI,0BAJW,gDAMhBtF,QAAQC,IAAR,MACAgF,KAAQG,MAAM,4BAPE,yD,kGAYnBf,M,wEACY,a,+CAEZC,M,oFACkB,SAACpH,GAClB,EAAKqI,WAAarI,EAClB/C,SAASqL,gBAAgBvI,MAAMwI,YAAY,kBAAmBvI,O,GASnD4C,MCvQA4F,GA5GC,SAACjM,GAUV,IAAD,MAEsBC,mBAAS,GAF/B,mBAEGgE,EAFH,KAEUiI,EAFV,KAWJ,OAPAnL,qBAAU,WAAO,IAAD,EACRoL,GAAU,UAAAnM,EAAMoM,mBAAN,eAAmBxF,WAAY5G,EAAMqM,iBAAiBzF,UAAY,EAClFsF,EACGlM,EAAMoC,YAAc+J,EAAW,OAEjC,CAACnM,EAAMoM,YAAapM,EAAMoC,YAAapC,EAAMqM,iBAAiBzF,WAG/D,6BAAS1D,UAAU,kBAEflD,EAAMhC,IACJ,6BAASkF,UAAU,eACjB,6BAASA,UAAU,qBACjB,uBAAGoJ,QAASjG,GAAOoC,gBACjB,kBAAC8D,EAAA,EAAD,OAEF,uBAAGrJ,UAAU,eAAeoJ,QAC1B,WACMtM,EAAMsC,UACRtC,EAAM0H,cAEN1H,EAAMsG,eAKRtG,EAAMsC,UACJ,kBAACkK,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,OAIN,uBAAGH,QAASjG,GAAOyB,iBACjB,kBAAC4E,EAAA,EAAD,QAGJ,6BAASxJ,UAAU,oBACjB,kBAAC,EAAD,CAAUe,MAAOjF,OAAOiF,EAAM0I,QAAQ,IAAKtI,eAAgBrE,EAAMqE,eAAgBD,UAAWpE,EAAMoE,aAGpG,6BAASlB,UAAU,aACjB,kCAAQ7E,EAAW2B,EAAMoC,aAAe,GAAxC,KACA,mCACA,kCAAQ/D,GAAW,UAAA2B,EAAMoM,mBAAN,eAAmBxF,WAAY5G,EAAMqM,iBAAiBzF,UAAY,GAArF,OAIF,6BAAS1D,UAAU,WACjB,6BAASA,UAAU,oBACjB,kBAAC,EAAD,CAAUe,MAAOjF,OAAOiF,EAAM0I,QAAQ,IAAKtI,eAAgBrE,EAAMqE,eAAgBD,UAAWpE,EAAMoE,aAGpG,6BAASlB,UAAU,gBACjB,6BAASA,UAAU,aACjB,kCAAQ7E,EAAW2B,EAAMoC,aAAe,GAAxC,KACA,kCAAQ/D,GAAW,UAAA2B,EAAMoM,mBAAN,eAAmBxF,WAAY5G,EAAMqM,iBAAiBzF,UAAY,GAArF,MAEF,6BAAS1D,UAAU,eACnB,6BAASA,UAAU,qBACjB,uBAAGoJ,QAASjG,GAAOoC,gBACjB,kBAAC8D,EAAA,EAAD,OAEF,uBAAGrJ,UAAU,eAAeoJ,QAC1B,WACMtM,EAAMsC,UACRtC,EAAM0H,cAEN1H,EAAMsG,eAKRtG,EAAMsC,UACJ,kBAACkK,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,OAIN,uBAAGH,QAASjG,GAAOyB,iBACjB,kBAAC4E,EAAA,EAAD,aC4BLE,I,OA5HC,SAAC5M,GAOX,MAE0BC,mBAA+B,IAFzD,mBAEGC,EAFH,KAEYC,EAFZ,OAK4BF,oBAAU,GALtC,mBAKGG,EALH,KAKaC,EALb,KAQEC,EAAYC,iBAAO,MARrB,EAW8BN,oBAAS,GAXvC,mBAWGO,EAXH,KAWcC,EAXd,OAcgBR,mBAAS,CAC3B4M,gBAAiB,KAff,mBAcGC,EAdH,KAcOC,EAdP,OAmBgC9M,mBAAS,GAnBzC,mBAmBGY,EAnBH,KAmBeC,EAnBf,KAuBJC,qBAAU,WACRZ,ENuG6B,SAACa,GAChC,IAAI1B,EAAa,GACjBiH,QAAQC,IAAI,gEAMZ,IAHA,IACMtF,EADOF,EACQ5B,MAAM,MACvBkC,EAAI,EACDA,EAAIJ,EAAMrD,QAAQ,CACvB,IAAI+H,EAAM1E,EAAMI,GAAGH,QAAQ,MAAO,IAC5BI,EAAWqE,EAAIrG,MAAM,qCACrBiC,EAAUoE,EAAIrG,MAAM,uBAC1B,GAAIgC,GAAYC,EAAS,CAKvB,IADA,IAAMwL,EAAW,GACRtL,EAAI,EAAGA,EAAIF,EAAQ3D,OAAQ6D,IAClCsL,EAASpL,KAAK,CACZE,KAAMN,EAAQE,GACduL,MAAOvO,EAAqB6C,EAASG,IACrCwL,IAAKxO,EAAqB6C,EAASG,EAAI,MAG3CpC,EAAIsC,KAAKoL,GAEX1L,IAEF,OAAOhC,EMnIM6N,CAAkBnN,EAAMgB,QAClC,CAAChB,EAAMgB,MAEVD,qBAAU,WAIR,GAHAV,ENgJiC,SAACH,EAA+B2B,GACnE,GAAI3B,EAAQrC,QAAU,EAAG,OAAQ,EAGjC,IAFA,IAAID,EAAQ,EAELA,EAAQsC,EAAQrC,UACjBqC,EAAQtC,GAAO,GAAGqP,MAAQpL,IAG9BjE,IAEF,OAAOA,EAAQ,EMzJXwP,CAAsBlN,EAASF,EAAMoC,cAEnClC,EAAQE,IAAaF,EAAQE,GAAUvC,OAAQ,CACjD,IAAMiE,EAAO5B,EAAQE,GAAUtB,KAAI,SAAAC,GACjC,OAAOA,EAAK+C,QAEd9B,EAAMqC,cAAcP,EAAKuL,KAAK,KAEhC,IAAM9J,ENsJyB,SAACD,EAA6BzB,GAC/D,IAAKyB,EAAS,OAAO,EAKrB,IAJA,IAAIgK,EAAW,EAEXC,EAAY,EAETA,EAAYjK,EAAQzF,UACrByF,EAAQiK,GAAWN,MAAQpL,IAG/B0L,IAEF,GAAIA,GAAa,EAAG,OAAO,EAC3B,GAAIA,GAAajK,EAAQzF,OAAQ,OAAO,IAExCyP,EAAWC,GAAa,IAAMjK,EAAQzF,QAEtC,IAAM+H,EAAMtC,EAAQiK,EAAY,GAChC,GAAI1L,GAAQ+D,EAAIsH,IACd,OAAO,IAET,GAAIrL,GAAQ+D,EAAIqH,MACd,OAAQM,EAAY,IAAM,IAAMjK,EAAQzF,QAE1C,IAAMwK,EAAMzC,EAAIsH,IAAMtH,EAAIqH,MAE1B,OADAK,IAAazL,EAAO+D,EAAIqH,OAAS5E,GAAO,IAAM/E,EAAQzF,QM/KxC2P,CAAoBtN,EAAQE,GAAWJ,EAAMoC,aACzD2K,EACE,CACEF,gBAAgB,gCAAD,OAAkC7M,EAAMyD,MAAxC,YAAiDF,EAAjD,qBAAiEA,EAAjE,UAGlB,CAACnD,EAAUF,EAASF,IAEvBe,qBAAU,WACR,GAAIT,GAAaE,GAAaR,EAAMsC,UAAW,CAE7C,IAAMnF,EAAcmD,EAAUiC,QACxBC,EAAM3B,GAAcT,EA5Bd,IA4BqC,EAC7CjD,GACFA,EAAOwF,SAAS,CACdH,MACAI,SAAU,cAIf,CAACpC,EAAWK,EAAYT,EAAUJ,EAAMsC,YAE3C,IAAMO,EAAmB,SAACjF,GACxB,OAAOwC,IAAaxC,EAAQ,kBAAoB,IAG5CkF,EAAS,WAEbhC,EAAc,IAAAJ,SAASC,KAAKC,aAA2B,MAYzD,OATAG,qBAAU,WAGR,OAFAgC,OAAOC,iBAAiB,SAAUF,GAClCA,IACO,WACLC,OAAOE,oBAAoB,SAAUH,MAEtC,IAID,6BAASI,UAAU,iBACjBC,IAAK7C,EACL8C,aAAc,WACZ3C,GAAa,IAEf4C,aAAc,WAEZ,GADA5C,GAAa,GACRT,EAAMsC,UAAX,CAGA,IAAMnF,EAAcmD,EAAUiC,QACxBC,EAAM3B,GAAcT,EApEhB,IAoEuC,EAC7CjD,GACFA,EAAOwF,SAAS,CACdH,MACAI,SAAU,YAKhB,6BAASM,UAAU,YAEfhD,EAAQpB,KAAI,SAACwE,EAA6B1F,GAA9B,OACV,6BAAS2F,IAAM3F,EAAQsF,UAAU,YAC/B,uBAAGA,UAAWL,EAAiBjF,GAAQ4F,MAAOpD,IAAaxC,EAAQkP,EAAK,IAEpExJ,EAAQxE,KAAI,SAAC2O,EAAwBnM,GAAzB,OACV,0BAAMiC,IAAMjC,GAAKmM,EAAK3L,kB,iDCvGpC4L,GAAM,IAAIC,KAsQDC,GApQAC,cAAS,WAGtB,IAAMnH,EAAcL,GAAOK,YAErBzB,EAAYoB,GAAOpB,UAGnB+C,EAAY3B,GAAO2B,UARG,EAUQ/H,mBAAS,IAVjB,mBAUrB6N,EAVqB,KAUTzL,EAVS,KAYtB0L,EAAYxN,kBAAO,GAGnBuL,EAAazF,GAAOyF,WAEpBkC,EAAuBC,cAAejG,EAAUhK,IAAK,KAAM,CAC/DkQ,KAAM,CAAEC,UAAW,4BACnBC,MAAO,CAAED,UAAW,0BACpBE,MAAO,CAAEF,UAAW,8BAGhB9J,EAAiB,SAACR,GAGtB,IAAMhC,IAAiB,OAAToD,QAAS,IAATA,OAAA,EAAAA,EAAW2B,WAAY,GAAK/C,EAAQ,IAClDwC,GAAOI,iBACL,CACErE,YAAaP,KAKbyM,EAAuB,SAAC/K,GACvBA,IAEQ,OAAXmD,QAAW,IAAXA,KAAaC,KAAKqB,EAAU5F,aACvB4F,EAAUnB,SACF,OAAXH,QAAW,IAAXA,KAAa8B,QAGjBnC,GAAOI,iBAAiB,CACtBK,OAAQvD,KAINgL,EAAmBC,sBAAW,sBAAC,sBAAA9R,EAAA,+EAC5B,IAAIE,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAJ,EAAA,sEACCiJ,GAAsBqC,EAAUzC,IADjC,QACXjG,EADW,QAGfzC,EAAQyC,GAERxC,EAAO,oDALQ,2CAAZ,0DAD4B,2CASlC,CAACkL,EAAUzC,KAURkJ,EAAaD,uBAAY,WACzB9H,IACGA,EAAYG,UAGfH,EAAYwD,QAFZxD,EAAY8B,UAKf,CAAC9B,IAEEgI,EAAeF,sBAAW,sBAAC,4BAAA9R,EAAA,yDAC1BsL,EAAUzC,GADgB,iEAEQgJ,IAFR,UAEzBI,EAFyB,wDAI/BtI,GAAOuI,iBAAiBD,GACxBjB,GAAImB,cAAcF,EAAK1I,YAAc,IAClC6I,MAAK,SAAArL,GACJ4C,GAAO0I,iBACLC,aAAc,GAAIC,aAAa,GAAIxL,EAAMyL,WAG5CC,OAAM,SAAAC,GACL/I,GAAO0I,iBACL,cAbyB,2CAgB9B,CAACR,EAAkBvG,EAAUzC,KAG1B8J,EAAUb,uBAAY,SAACtR,GAEX,KADAA,EAAMoS,UAEpBpS,EAAMqS,iBACNd,OAED,CAACA,IAGEe,EAAmB,WACvBnJ,GAAOI,iBAAiB,CACtBzI,KAAMgK,EAAUhK,OA0CpB,OAtCA+C,qBAAU,WACRwF,QAAQC,IAAI,0BACZkI,MACC,CAACA,IAGJ3N,qBAAU,WAOR,OANAwF,QAAQC,IAAI,oBACRvB,IAAcyB,IAChBrE,EAAc,IACdkE,QAAQC,IAAI,wCACZH,GAAOoJ,iBAEF,WACD/I,IACFH,QAAQC,IAAI,mBACZH,GAAOI,iBAAiB,CACtBI,SAAS,IAEXR,GAAOqJ,oBAGV,CAACzK,EAAWyB,IAEf3F,qBAAU,WACRwF,QAAQC,IAAI,oBACZuH,EAAUxL,QAAUyF,EAAUlB,SAC7B,CAACkB,EAAUlB,SAEd/F,qBAAU,WAGR,OADAgC,OAAOC,iBAAiB,UAAWqM,GAC5B,WACLtM,OAAOE,oBAAoB,UAAWoM,MAEvC,CAACA,IAIF,6BAASnM,UAAU,UAEf8E,EAAUhK,IACR,6BAASkF,UAAU,cAEf+B,EACE,6BAAS/B,UAAU,iBACjB,6BAASA,UAAU,eACjB,6BAASA,UAAU,YAAYoJ,QAASkD,GACtC,yBAAKhI,IAAKvC,EAAUgB,WAAahB,EAAUgB,WAAaqE,yBAAkDqF,IAAI,MAEhH,6BAASzM,UAAU,eACjB,uBAAGA,UAAU,cAAc+B,EAAUmC,MACrC,uBAAGlE,UAAU,gBAAgB+B,EAAUoC,OAAvC,MAAkDpC,EAAUqC,SAGhE,6BAASpE,UAAU,kBACjB,kBAAC,GAAD,CACEoD,WAAYmI,EACZ/G,YAAa+G,EACbrC,YAAanH,GAAa,KAC1BoH,iBAAkBrE,EAClB5F,YAAa4F,EAAU5F,YACvBiC,eAAgBA,EAChBD,UAAWkK,EACXtQ,IAAKgK,EAAUhK,IACfsE,UAAW0F,EAAUnB,YAIzB,6BAAS3D,UAAU,iBAAnB,2DAML,GAGL8K,EAAqBlP,KAAI,kBAAGC,EAAH,EAAGA,KAAMwE,EAAT,EAASA,IAAKvD,EAAd,EAAcA,MAAd,OACvBjB,GAAQ,kBAAC,KAAS6Q,QAAV,CAAkB1M,UAAU,aAAaK,IAAKA,EAAKC,MAAOxD,GAChE,6BAASkD,UAAU,iBAAiBoJ,QAASkD,GAC3C,kBAACK,GAAA,EAAD,OAEF,6BAAS3M,UAAU,YAAYM,MAAO,CAAE,gBAAkB,OAAlB,QAAmC,OAATyB,QAAS,IAATA,OAAA,EAAAA,EAAWgB,aAAcqE,yBAAnD,QACxC,6BAASpH,UAAU,gBAGnB,6BAASA,UAAU,iBAEf+B,EACE,6BAAS/B,UAAU,cAEjB,6BAASA,UAAU,eACjB,6BAASA,UAAU,eACjB,yBAAKsE,IAAKvC,EAAUgB,WAAahB,EAAUgB,WAAaqE,yBAAkDqF,IAAI,MAEhH,6BAASzM,UAAU,eACjB,6BAASA,UAAU,eACjB,uBAAGA,UAAU,cAAc+B,EAAUmC,MACrC,uBAAGlE,UAAU,gBAAgB+B,EAAUoC,OAAvC,MAAkDpC,EAAUqC,OAC5D,uBACEpE,UAAU,oBACVQ,wBAAyB,CACvBC,OAAQmK,OAKhB,kBAAC,GAAD,CACExH,WAAYmI,EACZ/G,YAAa+G,EACbrC,YAAanH,GAAa,KAC1BoH,iBAAkBrE,EAClB5F,YAAa4F,EAAU5F,YACvBiC,eAAgBA,EAChBD,UAAWkK,EACXhM,UAAW0F,EAAUnB,WAEzB,6BAAS3D,UAAU,iBAEf,UAAA+B,EAAUjE,WAAV,eAAezB,MAAM,cACnB,kBAAC,GAAD,CACE8C,cAAeA,EACfoB,MAAOqI,EACP9K,IAAKiE,EAAUjE,KAAO,GACtBoL,YAAanH,GAAa,KAC1B7C,YAAa4F,EAAU5F,YACvBE,UAAW0F,EAAUnB,UAGrB,kBAAC,EAAD,CACExE,cAAeA,EACfoB,MAAOqI,EACP9K,IAAKiE,EAAUjE,KAAO,GACtBoL,YAAanH,GAAa,KAC1B7C,YAAa4F,EAAU5F,YACvBE,UAAW0F,EAAUnB,YAIpB,Y,6BCxQlBiJ,I,OAAqB,CAChC,MAAO,MAAO,MAAO,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAIlDC,GAAwB,CACnC,MAAO,O,+BCkCMC,GAJA,I,yKApBbC,Y,sBAAc,sBAAAvT,EAAA,uDACP,EAAKwT,aAAe,EAAKC,WAAWtS,QACvC,EAAKuS,eAFK,2C,KAOdA,a,sBAAe,4BAAA1T,EAAA,sEAEX,EAAKwT,aAAc,EACb/S,EAAS,EAAKgT,WAAWlH,QAHpB,SAILoH,GAAUlT,GAJL,OAKX,EAAK+S,aAAc,EACnB,EAAKD,cANM,gDAQX1J,QAAQC,IAAR,MARW,0D,0CApBdoE,M,yEACsB,K,yCAEtBA,M,wEACoB,M,4CAEpBC,M,oFACe,SAACyF,GACf,EAAKH,WAAWvO,KAAK0O,GACrB,EAAKL,kB,GCHIG,GAAe,SAACE,GAE3B,OADAN,GAAOO,cAAcD,IACd,GAGID,GAAS,uCAAG,WAAOC,GAAP,mBAAA5T,EAAA,yDACjB8T,EAAWF,EAAKlJ,KAAKhI,MAAM,KAC3BqR,EAAWD,EAASA,EAAS3S,OAAS,GACtC6S,EAAWJ,EAAKlJ,KAAKjG,QAAV,WAAsBsP,GAAY,KAE/CX,GAAmBa,SAASF,GALT,gCAMfG,GAAgBN,GAND,iCAOd,GAPc,WAUnBP,GAAsBY,SAASF,GAVZ,kCAWfI,GAAeP,GAXA,kCAYd,GAZc,eAcvB9E,KAAQsF,QAAR,0DAA2BL,EAA3B,qDAA6CC,IAdtB,mBAehB,GAfgB,4CAAH,sDAoBhBE,GAAe,uCAAG,WAAON,GAAP,yBAAA5T,EAAA,6DAEhB8T,EAAWF,EAAKlJ,KAAKhI,MAAM,KAC3BqR,EAAWD,EAASA,EAAS3S,OAAS,GACtC6S,EAAWJ,EAAKlJ,KAAKjG,QAAV,WAAsBsP,GAAY,IAJ7B,kBAQPjU,EAAS8T,GAAM,GARR,cAQpBpL,EARoB,gBASL6L,aAAwB7L,GATnB,OASpB9H,EAToB,gEAWpBoO,KAAQsF,QAAR,0DAA2BL,EAA3B,qDAA6CC,IAXzB,4CVRWM,EUuBqB5T,GAA9CiN,EVtB2B,CAEjCjD,KAAM6D,cAAI+F,EAAK,eAAgB,IAE/B1J,MAAO2D,cAAI+F,EAAK,eAAgB,IAEhCC,YAAahG,cAAI+F,EAAK,qBAAsB,IAE5C3J,OAAQ4D,cAAI+F,EAAK,gBAAiB,IAElCE,QAASjG,cAAI+F,EAAK,iBAAkB,IAEpCG,QAASlG,cAAI+F,EAAK,iBAAkB,IAEpCI,KAAMnG,cAAI+F,EAAK,cAAe,GAE9BhL,QAASiF,cAAI+F,EAAK,iBAAkB,IAAIlS,KAAI,SAACC,GAC3C,MAAM,QAAN,OAAeA,EAAKyK,OAApB,mBAAqC/L,EAAmBsB,EAAKsL,UAG/DZ,MAAOwB,cAAI+F,EAAK,eAAgB,IAEhCpK,SAAUqE,cAAI+F,EAAK,kBAAmB,GAEtCK,WAAYpG,cAAI+F,EAAK,oBAAqB,IAE1ChQ,IAAK,KUHA6D,SAAW6L,EAChBrG,EAAKV,SAAW8G,EAChBpG,EAAKiH,SAAWC,KAASjB,EAAKkB,MAC9BnH,EAAKmH,KAAOlB,EAAKkB,KACjBnH,EAAKjD,KAAOiD,EAAKjD,MAAQiD,EAAKxF,UAAY,2BApBtB,UAqBdG,GAASqF,EAAMnF,GArBD,QAsBpBsG,KAAQC,QAAR,UAAmB6E,EAAKlJ,KAAxB,+BACAb,QAAQC,IAAR,UAAe8J,EAAKlJ,KAApB,+BACAf,GAAOqF,uBAxBa,mDA0BpBF,KAAQsF,QAAR,MA1BoB,kCVRU,IAACE,IUQX,6BAAH,sDA+BfH,GAAc,uCAAG,WAAOP,GAAP,qBAAA5T,EAAA,6DACf8T,EAAWF,EAAKlJ,KAAKhI,MAAM,KAC3BuK,EAAW6G,EAASA,EAAS3S,OAAS,GACtCgH,EAAWyL,EAAKlJ,KAAKjG,QAAV,WAAsBwI,GAAY,IAC/CvM,EAAS,GAJQ,kBAMJZ,EAAS8T,GAAM,GANX,OAMnBlT,EANmB,gEAQnBoO,KAAQsF,QAAR,0DAA2BnH,EAA3B,qDAA6C9E,IAR1B,sDAabL,GAAO,CACXuB,QAAS3I,EACTyH,WACA8E,WACA6H,KAAMlB,EAAKkB,KACXF,SAAUC,KAASjB,EAAKkB,QAlBP,QAoBnBnL,GAAOwF,0BACPL,KAAQC,QAAR,UAAmB6E,EAAKlJ,KAAxB,+BACAb,QAAQC,IAAR,UAAe8J,EAAKlJ,KAApB,+BAtBmB,mDAwBnBoE,KAAQsF,QAAR,MAxBmB,kEAAH,sDCnCLW,GA1BI,WAWjB,OACE,6BAASvO,UAAU,eACjB,6BAASA,UAAU,eACjB,kBAAC,KAAD,CAAQwO,aAActB,GAAcuB,gBAAgB,EAAOC,OAZ/C,WAChB,IAAIzS,EAAM2Q,GAAmB+B,OAAO9B,IAKpC,OAJA5Q,EAAMA,EAAIL,KAAI,SAACC,GAEb,OADAA,EAAI,WAAOA,OAGFsO,KAAK,KAMuDyE,GAAaC,UAAQ,GACtF,kBAAC,KAAD,CAAQC,KAAM,kBAACC,GAAA,EAAD,OAAd,6EAEF,uBAAG/O,UAAU,QACX,sEAAe4M,GAAmBzC,KAAK,WACvC,sEAAe0C,GAAsB1C,KAAK,e,8BCuCrC6E,GA1DCrE,cAAS,WACvB,IAAMsE,EAAU,CACd,CACEhL,MAAO,qBACPiL,UAAW,WACX7O,IAAK,YAEP,CACE4D,MAAO,eACPiL,UAAW,WACX7O,IAAK,WACL8O,OAAQ,SAAC3V,EAAqBuF,GAAtB,OAA8CvF,EAAE8U,KAAOvP,EAAEuP,OAEnE,CACErK,MAAO,eACPiL,UAAW,OACX7O,IAAK,UACL+O,OAAQ,SAACC,EAAWC,GAClB,OACE,2BACE,kBAAC,KAAD,CACEC,UAAU,WACVtL,MAAK,mCAAUqL,EAAI3N,SAAd,uBACL6N,UAAW,kBAAMC,EAAaH,EAAI3N,UAAY,KAC9C+N,OAAO,eACPC,WAAW,gBAEX,0BAAM3P,UAAU,QAAhB,qBAONyB,EAAO0B,GAAOsC,kBACdmK,EAAUzM,GAAOuF,qBAEjB+G,EAAe,SAACpN,GACpBc,GAAO0M,UAAUxN,IAQnB,OALAxE,qBAAU,WACRwF,QAAQC,IAAI,wCACZH,GAAOwF,4BACN,IAGD,6BAAS3I,UAAU,YACjB,kBAAC,KAAD,CACE8P,WAAYrO,EACZwN,QAASA,EACTc,YAAY,EACZC,OAAO,WACPJ,QAASA,Q,UC7CFK,I,cAZK,WAClB,OACE,uBAAGjQ,UAAU,gBACX,0BAAMA,UAAU,UAChB,0BAAMA,UAAU,UAChB,0BAAMA,UAAU,UAChB,0BAAMA,UAAU,UAChB,0BAAMA,UAAU,aCyIPkQ,GAzIGvF,cAAS,WACzB,IAAM7F,EAAY3B,GAAO2B,UACnBrD,EAAO0B,GAAO2E,eACd8H,EAAUzM,GAAO+E,kBACjB+G,EAAU,CACd,CACEhL,MAAO,eACPiL,UAAW,OACX7O,IAAK,OACL8P,MAAO,IACPf,OAAQ,SAAClL,EAAcoL,GAAf,OAEJ,6BAAStP,UAAU,cAEL,OAAT8E,QAAS,IAATA,OAAA,EAAAA,EAAWzC,MAAOiN,EAAIjN,IAAMyC,EAAUnB,QAEnC,8BACE,kBAAC2F,EAAA,EAAD,CAAqBtJ,UAAU,OAAOoJ,QAAS,kBAAMgH,QAGvD,8BACE,kBAAC7G,EAAA,EAAD,CAAoBvJ,UAAU,OAAOoJ,QAAS,kBAAMiH,EAAgBf,OAI5E,8BAAOpL,IAEK,OAATY,QAAS,IAATA,OAAA,EAAAA,EAAWzC,MAAOiN,EAAIjN,IAAMyC,EAAUnB,QAEnC,kBAAC,GAAD,MACE,MAKhB,CACEM,MAAO,eACPiL,UAAW,SACX7O,IAAK,UAEP,CACE4D,MAAO,eACPiL,UAAW,QACX7O,IAAK,SAEP,CACE4D,MAAO,eACPiL,UAAW,WACX7O,IAAK,WACL+O,OAAQ,SAACzQ,GAAD,OAAkBxD,EAAWwD,IAAS,gBAC9CwQ,OAAQ,SAAC3V,EAAuBuF,GAAxB,OAAkDjD,OAAOtC,EAAEkK,UAAY5H,OAAOiD,EAAE2E,YAE1F,CACEO,MAAO,eACPiL,UAAW,QACX7O,IAAK,QACL+O,OAAQ,SAAC7I,EAAe+I,GAAhB,OAA4C/I,GAAS+I,EAAI7I,WAEnE,CACExC,MAAO,eACPiL,UAAW,WACX7O,IAAK,WACL8O,OAAQ,SAAC3V,EAAuBuF,GAAxB,OAAkDjD,OAAOtC,EAAE8U,MAAQxS,OAAOiD,EAAEuP,QAEtF,CACErK,MAAO,iCACPiL,UAAW,SACX7O,IAAK,SACL+O,OAAQ,SAACxM,EAAgB0M,GACvB,OAAI1M,GAIA,kBAAC,KAAD,CAAO0L,KAAK,UACV,0BAAMtO,UAAU,UAAhB,+BAMV,CACEiE,MAAO,eACPiL,UAAW,OACX7O,IAAK,UACL+O,OAAQ,SAACC,EAAWC,GAClB,OACE,2BACE,kBAAC,KAAD,CACEC,UAAU,WACVtL,MAAK,mCAAUqL,EAAIpL,KAAd,6BACLsL,UAAW,kBAAMC,EAAaH,EAAIjN,IAAM,KACxCqN,OAAO,eACPC,WAAW,gBAEX,0BAAM3P,UAAU,QAAhB,qBAQNqQ,EAAkB,SAACxU,GACQ,IAAD,EAA1BA,EAAKwG,KAAOyC,EAAUzC,IACxB,UAAAc,GAAOK,mBAAP,SAAoB0B,OACpBuC,YAAW,WACTtE,GAAOI,iBAAiB,CACtBlB,GAAIxG,EAAKwG,OAEV,MAECc,GAAOK,aACTL,GAAOK,YAAY8B,QAKnB8K,EAAmB,WAAO,IAAD,EAC7B,UAAAjN,GAAOK,mBAAP,SAAoBwD,SAGhByI,EAAe,SAACpN,GACpBc,GAAOmN,YAAYjO,IAQrB,OALAxE,qBAAU,WACRwF,QAAQC,IAAI,wCACZH,GAAOqF,yBACN,IAGD,6BAASxI,UAAU,kBACjB,kBAAC,KAAD,CAAO8P,WAAYrO,EAAMwN,QAASA,EAASc,YAAY,EAAOC,OAAO,WAAWJ,QAASA,QCzEhFW,I,OA/DG5F,cAAS,WACzB,IAAM/O,EAAMuH,GAAO8E,cACbxG,EAAI,YAAO7F,EAAI4U,QACf1L,EAAY3B,GAAO2B,UAuBzB,OALAjH,qBAAU,WACRwF,QAAQC,IAAI,wCACZH,GAAOqF,yBACN,IAGD,6BAASxI,UAAU,cAEfyB,EAAK7F,KAAI,SAAAC,GACP,IAAM4P,EAAO7P,EAAImM,IAAIlM,GACfuI,EAAQqH,EAAK,GACnB,OACE,6BAASpL,IAAKxE,EAAMmE,UAAU,aAAaM,MAAO,CAChDqJ,gBAAgB,OAAD,OAASvF,EAAMtB,SAAWsE,yBAA1B,OAEf,6BAASpH,UAAU,SACjB,6BAASA,UAAU,cACnB,uBAAGA,UAAU,eAAgBnE,GAC7B,6BAASmE,UAAU,cAEfyL,EAAK7P,KAAI,SAAA+G,GAAK,OACZ,uBACEtC,IAAKsC,EAAMuB,KACXlE,UAAS,qBAAgB2C,EAAMN,KAAOyC,EAAUzC,GAAK,SAAW,IAChE+G,QAAS,kBAxCP,SAACvN,GACQ,IAAD,EAQJ,EARtBA,EAAKwG,KAAOyC,EAAUzC,IACxB,UAAAc,GAAOK,mBAAP,SAAoB0B,OACpBuC,YAAW,WACTtE,GAAOI,iBAAiB,CACtBlB,GAAIxG,EAAKwG,OAEV,MAECc,GAAOK,cACT,UAAAL,GAAOK,mBAAP,SAAoB0B,OACpB/B,GAAOK,YAAY8B,QA6BY+K,CAAgB1N,KAE/B,8BACIA,EAAMuB,qBC1C1BuM,GAAYC,KAAZD,QA8EOE,GA5EA,WAEb,IAAMC,EAAUC,cAKVC,EAFG,IAAIC,gBAAgBC,cAAcC,QAIrCC,EAASF,cATI,EAcGjU,mBAAS,IAdZ,mBAcZsD,EAdY,KAcP8Q,EAdO,KAgBbC,EAAa,uCAAG,sBAAA5X,EAAA,sEbuGf,IAAIE,QAAJ,uCAAY,WAAMC,EAASC,GAAf,iBAAAJ,EAAA,+EAEOgJ,KAFP,cAEX6O,EAFW,gBAGOxP,KAHP,cAGT7E,EAHS,OAIfqU,EAAYA,EAAUzV,KAAI,SAACC,GAMzB,OALAmB,EAAQwC,SAAQ,SAAC1B,GACXA,EAAI6D,SAAS8L,SAAS5R,EAAKqI,QAC7BrI,EAAK+G,OAAS9E,EAAI6D,aAGf9F,KAVM,UAaT0F,KAAYK,QAAQ,aAAcyP,GAbzB,QAcf1X,EAAQ,WAdO,kDAgBfC,EAAO,EAAD,IAhBS,0DAAZ,yDavGe,OAEpB0O,KAAQC,QAAQ,4BAChBpF,GAAOqF,uBACPrF,GAAOwF,0BAJa,2CAAH,qDAOnB9K,qBAAU,WAER,GAAIiT,EAAO,CACT,IAAMzQ,EAAMyQ,EAAM/I,IAAI,SAAW,GAFtB,CAAC,QAAS,MAAO,SAGnB0F,SAASpN,GAChB8Q,EAAO9Q,GAEP8Q,EAAO,YAGV,CAACL,IAQJ,OACE,6BAAS9Q,UAAU,cACjB,6BAASA,UAAU,gBACjB,kBAAC,GAAD,MACA,iCACE,kBAAC,KAAD,CAAQoJ,QAASgI,GAAjB,wCACA,kBAAC,KAAD,CACI7B,UAAU,UACVtL,MAAM,mGACNuL,UAfQ,WAClBjO,KAAY+P,QACZnO,GAAOqF,uBACPrF,GAAOwF,2BAaG+G,OAAO,eACPC,WAAW,gBAEX,kBAAC,KAAD,CAAQrP,MAAO,CAACiR,WAAY,SAA5B,mCAEJ,uBAAGvR,UAAU,QAAb,4LAGJ,6BAASA,UAAU,iBACjB,kBAAC,KAAD,CAAMwR,UAAWnR,EAAKY,SAjDR,SAACZ,GACnBuQ,EAAQlS,KAAR,UAAgBwS,EAAOO,SAAvB,iBAAwCpR,MAiDpC,kBAACoQ,GAAD,CAASiB,IAAI,2BAAOrR,IAAI,SACpB,kBAAC,GAAD,OAEF,kBAACoQ,GAAD,CAASiB,IAAI,2BAAOrR,IAAI,SACtB,kBAAC,GAAD,OAEF,kBAACoQ,GAAD,CAASiB,IAAI,2BAAOrR,IAAI,OACtB,kBAAC,GAAD,WC3DGsR,GANF,WACX,OACE,gFCgBWC,I,OA7BF,WAEX,OACE,6BAAS5R,UAAU,aACjB,6BAASA,UAAU,eACjB,6BAASA,UAAU,OACjB,uBAAGA,UAAU,YACX,kBAAC,IAAD,CAAS6R,GAAG,KAAZ,6BAEF,uBAAG7R,UAAU,YACX,kBAAC,IAAD,CAAS6R,GAAG,QAAQC,OAAK,GAAzB,8BAGJ,6BAAS9R,UAAU,aACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+R,KAAK,QAAQD,OAAK,GACvB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOC,KAAK,IAAID,OAAK,GACnB,kBAACE,GAAD,UAKR,kBAAC,GAAD,S,OCiBSC,OAjBf,WACE,OACE,6BAASjS,UAAU,cACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+R,KAAK,IAAID,OAAK,GACnB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOC,KAAK,IAAID,OAAK,GACnB,kBAAC,GAAD,W,4CC9BZvQ,KAAY2Q,OAAO,CACjBhO,KAAM,eAKRiO,IAAS/C,OACP,kBAAC,KAAD,CAAgBgD,OAAQC,MACtB,kBAAC,GAAD,OAIF7U,SAAS8U,eAAe,W","file":"static/js/main.9e5f8bd4.chunk.js","sourcesContent":["import { get } from \"lodash\"\nimport { InterfaceLrc, InterfaceLrcWord, InterfaceMusicInfo } from \"../Interface/music\"\n\n// 上次文件转化函数\nexport const loadFile = async (file: File, isBuffer = true): Promise<any> => {\n  if (!file) {\n    return ''\n  }\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event: Event) => {\n      const target = event.target as FileReader\n      if (isBuffer) {\n        resolve(target.result ? new Blob([target.result]) : null)\n      } else {\n        resolve(target.result)\n      }\n    }\n    reader.onerror = reject\n    // 转化为blob\n    if (isBuffer) {\n      reader.readAsArrayBuffer(file)\n    } else {\n      reader.readAsText(file)\n    }\n  })\n}\n\n// 格式化歌曲信息保存\nexport const transformMusicInfo = (obj: any): InterfaceMusicInfo => {\n  const result: InterfaceMusicInfo = {\n    // 歌曲名\n    name: get(obj, 'common.title', ''),\n    // 专辑名\n    album: get(obj, 'common.album', ''),\n    // 专辑主导艺人\n    albumartist: get(obj, 'common.albumartist', ''),\n    // 专辑艺人\n    artist: get(obj, 'common.artist', ''),\n    // 专辑艺人列表\n    artists: get(obj, 'common.artists', []),\n    // 专辑备注: \n    comment: get(obj, 'common.comment', []),\n    // 歌曲时间\n    date: get(obj, 'common.date', 0),\n    // 歌曲图片\n    picture: get(obj, 'common.picture', []).map((item: any) => {\n      return `data:${item.format};base64,${uint8arrayToBase64(item.data)}`\n    }),\n    // 编码方式\n    codec: get(obj, 'format.codec', ''),\n    // 歌曲时长\n    duration: get(obj, 'format.duration', 0),\n    // 歌曲采样率\n    sampleRate: get(obj, 'format.sampleRate', ''),\n    // 对应的歌词信息 key\n    lrc: ''\n  }\n  return result\n}\n\n\nexport const uint8arrayToBase64 = (u8Arr: { length: any; subarray: (arg0: number, arg1: number) => any }): string => {\n  let CHUNK_SIZE = 0x8000; //arbitrary number\n  let index = 0;\n  let length = u8Arr.length;\n  let result = '';\n  let slice;\n  while (index < length) {\n    slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\n    result += String.fromCharCode.apply(null, slice);\n    index += CHUNK_SIZE;\n  }\n  return btoa(result);\n}\n\n// 歌词解析算法 - 逐行解析的歌词\nexport const formatLrc = (lrc: string): InterfaceLrc[] => {\n  // ti: 歌曲标题  ar: 歌唱者  al:  唱片集\n  // 格式  [00:01.01]七里香 - 周杰伦   或者 [01:20.64][01:47.80][02:41.96][03:35.77]雨下整夜我的爱溢出就像雨水\n\n  // 如果两个数组中间有文字 类似[01:20.64]我[01:47.80] 表示这个是是单字解析的歌词，那么我们就进行二次加工处理\n  let lrc_s = lrc\n  if (lrc_s) {\n    lrc_s = lrc_s.replace(/([^\\]^\\n])\\[/g, (match, p1) => p1 + '\\n[');\n    const lyric = lrc_s.split('\\n');\n    let res = [];\n    const lyricLen = lyric.length;\n    for (let i = 0; i < lyricLen; i++) {\n      // match lrc time\n      const lrcTimes = lyric[i].match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g);\n      // match lrc text\n      const lrcText = lyric[i]\n        .replace(/.*\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g, '')\n        .replace(/<(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?>/g, '')\n        .replace(/^\\s+|\\s+$/g, '');\n\n      if (lrcTimes) {\n        // handle multiple time tag\n        const timeLen = lrcTimes.length;\n        for (let j = 0; j < timeLen; j++) {\n          const lrcTime = transformArrayToTime(lrcTimes[j])\n          res.push({\n            time: lrcTime,\n            text: lrcText\n          });\n        }\n      }\n    }\n    // sort by time\n    res = res.filter((item: InterfaceLrc) => item.text);\n    res.sort((a: InterfaceLrc, b: InterfaceLrc) => a.time - b.time);\n    return res;\n  } else {\n    return [];\n  }\n}\n\n// 格式化时间显示\nexport const formatTime = (secs: number): string => {\n  const minutes = Math.floor(secs / 60) || 0;\n  const seconds = ~~(secs - minutes * 60) || 0;\n  return (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\n}\n\n// 返回当前歌词选中的索引\nexport const getChooseLrcIndex = (lrcList: InterfaceLrc[], time: number): number => {\n  if (lrcList.length <= 0) return -1\n  let index = 0\n  // 如果比当前时间小，那么聚焦当前时间\n  while (index < lrcList.length) {\n    if (lrcList[index].time > time) {\n      break\n    }\n    index++\n  }\n  return index - 1\n}\n\n// 歌词解析算法 - 逐行-分字解析歌词\nexport const formatLrcProgress = (lrc: string): InterfaceLrcWord[][] => {\n  let res: any[] = []\n  console.log('进入逐字解析的歌词哦')\n  // 逐字的歌词 ->  每行开始时间， 每个字开始时间 -> 计算百分比进行每个字覆盖\n  // 先按照 \\n 进行换行处理，然后正则提出每个字的时间，然后计算出每行的开始时间\n  let lrcStr = lrc\n  const lyric = lrcStr.split('\\n')\n  let i = 0\n  while (i < lyric.length) {\n    let cur = lyric[i].replace(/\\s/g, '')\n    const lrcTimes = cur.match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g)\n    const lrcText = cur.match(/(?<=\\])\\S\\s?(?=\\[)/g)\n    if (lrcTimes && lrcText) {\n      // console.log(lrcTimes, lrcText)\n      // 时间是 [[00:32.27], [00:32.27]] 数组，  子也是数组\n      // 数据结构，每个字开始时间和结束时间 start = j + 1    end j - 1\n      const lineTime = []\n      for (let j = 0; j < lrcText.length; j++) {\n        lineTime.push({\n          text: lrcText[j],\n          start: transformArrayToTime(lrcTimes[j]),\n          end: transformArrayToTime(lrcTimes[j + 1])\n        })\n      }\n      res.push(lineTime)\n    }\n    i++\n  }\n  return res\n}\n\n// 转换时间 [00:42.27] -> 11ms\nexport const transformArrayToTime = (str: string): number => {\n  let time = 0\n  const timeArr: number[] = /\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/.exec(str)?.map(item => {\n    return item ? Number(item) : 0\n  }) || []\n  const min2sec = timeArr[1] * 60;\n  const sec2sec = timeArr[2];\n  const msec2sec = timeArr[4] ? timeArr[4] / ((timeArr[4] + '').length === 2 ? 100 : 1000) : 0;\n  time = min2sec + sec2sec + msec2sec;\n  return time\n}\n\n// 获取逐字歌词的当前行\nexport const getChooseLrcWordIndex = (lrcList: InterfaceLrcWord[][], time: number): number => {\n  if (lrcList.length <= 0) return -1\n  let index = 0\n  // 如果比当前时间小，那么聚焦当前时间\n  while (index < lrcList.length) {\n    if (lrcList[index][0].start > time) {\n      break\n    }\n    index++\n  }\n  return index - 1\n}\n\n\n// 获取逐字歌词的当前行的百分比\nexport const getWordLineProgress = (lrcItem: InterfaceLrcWord[], time: number): number => {\n  if (!lrcItem) return 0\n  let progress = 0\n  // 看看在当前时间的哪个字，同时看看占比当前时间间隙的百分比\n  let wordIndex = 0\n  // 如果比当前字小，那么聚焦上一个字\n  while (wordIndex < lrcItem.length) {\n    if (lrcItem[wordIndex].start > time) {\n      break\n    }\n    wordIndex++\n  }\n  if (wordIndex <= 0) return 0\n  if (wordIndex >= lrcItem.length) return 100\n  // 知道哪个字后, 看看一共多少字，然后分百分比，这里从 0 开始，实际少了一个字\n  progress = wordIndex * (100 / lrcItem.length)\n  // 如果当前时间比字结束时间大，那么是 100%\n  const cur = lrcItem[wordIndex - 1]\n  if (time >= cur.end) {\n    return 100\n  }\n  if (time <= cur.start) {\n    return (wordIndex - 1) * (100 / lrcItem.length)\n  }\n  const len = cur.end - cur.start\n  progress += (time - cur.start) / len * (100 / lrcItem.length)\n  return progress\n}\n\n// 滚动函数\nexport const goScroll = (top: number, target: HTMLElement) => {\n  let requestAnimationFrame: any = null\n  if (window.requestAnimationFrame) {\n    requestAnimationFrame = window.requestAnimationFrame\n  } else {\n    requestAnimationFrame = setTimeout((fn) => {\n      fn()\n    }, 17)\n  }\n  // 当前时间\n  let t = 0\n  // 初始值\n  const b = target.scrollTop\n  // 变化量\n  const c = top - b\n\n  // 如果变化量太大，直接终止\n  if (Math.abs(c) > 200) {\n    target.scrollTo({\n      top,\n      behavior: 'smooth'\n    })\n    return\n  }\n  // 持续时间\n  const d = 32\n  const step = () => {\n    let top = Tween.Linear(t, b, c, d)\n    target.scrollTo({\n      top\n    })\n    t += 1\n    if (t <= d) {\n      requestAnimationFrame(step)\n    }\n  }\n  step()\n}\n// 运动\nconst Tween = {\n  Linear: function (t: number, b: number, c: number, d: number): number {\n    return c * t / d + b;\n  },\n  QuadIn: function (t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t + b;\n  },\n  QuadOut: function (t: number, b: number, c: number, d: number): number {\n    return -c * (t /= d) * (t - 2) + b;\n  },\n  QuadInOut: function (t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n  },\n  CubicIn: function (t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t + b;\n  }\n}\n\n// 返回音乐播放格式\nexport const getFormatCode = (code: string) => {\n  if (code === 'mpeg 1 layer 3') return 'mp3'\n  return code\n}\n\n// base64 转 blob\nexport const dataURLtoBlob = (base64: string): Blob => {\n  const arr = base64.split(',')\n  let mime = ''\n  if (arr.length) {\n    const res = arr[0].match(/:(.*?);/)\n    if (res?.length) {\n      mime = res[1]\n    }\n  }\n  const bstr = atob(arr[1])\n  let n = bstr.length\n  const u8arr = new Uint8Array(n);\n  while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new Blob([u8arr], { type: mime });\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport { InterfaceLrc, InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatLrc, getChooseLrcIndex } from \"../../utils\"\nimport './index.scss'\nconst Lrc = (props: {\n  lrc: string,\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  setCurrentLrc: Function,\n  color?: string\n}) => {\n  // 保存当前渲染的歌词列表\n  const [lrcList, setLrcList] = useState<InterfaceLrc[]>([])\n\n  // 需要渲染的歌词\n  const [lrcIndex, setLrcIndex] = useState(-1)\n\n  // 歌词滚动容器\n  const lrcScroll = useRef(null);\n\n  // 当前是否可以进行歌词的自动滚动\n  const [canScroll, setCanScroll] = useState(true)\n\n  const [lineHeight, setLineHeight] = useState(document.body.offsetHeight * 2.5 / 100)\n\n\n  const topHeight = 80\n   \n  useEffect(() => {\n    setLrcList(formatLrc(props.lrc))\n  }, [props.lrc])\n\n  useEffect(() => {\n    setLrcIndex(\n      getChooseLrcIndex(lrcList, props.currentTime)\n    )\n    if (lrcList.length && lrcList[lrcIndex]) {\n      props.setCurrentLrc(lrcList[lrcIndex].text)\n    }\n  }, [lrcIndex, lrcList, props])\n\n  useEffect(() => {\n    if (lrcScroll && canScroll && props.isPlaying) {\n      // 计算当前歌词应该需要滚动的场景\n      const target: any = lrcScroll.current\n      // 这里因为可能涉及换行，所以需要计算出每行的高度, 拿到高度\n      // const top = lineHeight * (lrcIndex - topLine) || 0\n      let top = -topHeight\n      document.querySelectorAll('.lrc-list p').forEach((item: any, index) => {\n        if (index < lrcIndex) {\n          top += item.offsetHeight + lineHeight\n        }\n      })\n      if (target) {\n        target.scrollTo({\n          top,\n          behavior: 'smooth'\n        })\n        // goScroll(top, target)\n      }\n    }\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\n\n  const getLrcChooseName = (index: number) => {\n    // 这里处理下其他的, 最近 10 条显示\n    if(lrcIndex === index) {\n      return 'choose-lrc'\n    }\n    return ''\n  }\n  \n  const resize = () => {\n    // 浏览器高除以高度,计算出每行的高度\n    setLineHeight(document.body.offsetHeight * 2.5 / 100)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n    return () => {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  return (\n    <section className=\"music-lrc\"\n      ref={lrcScroll}\n      onMouseEnter={() => {\n        setCanScroll(false)\n      }}\n      onMouseLeave={() => {\n        if (!props.isPlaying) {\n          setCanScroll(true)\n          return\n        }\n        const target: any = lrcScroll.current\n        let top = -topHeight\n        document.querySelectorAll('.lrc-list p').forEach((item: any, index) => {\n          if (index < lrcIndex) {\n            top += item.offsetHeight + lineHeight\n          }\n        })\n        if (target) {\n          target.scrollTo({\n            top,\n            behavior: 'auto'\n          })\n        }\n        setCanScroll(true)\n      }}>\n      {/* 渲染歌词列表 */}\n      <section className=\"lrc-list\">\n        {\n          lrcList.map((lrcItem: InterfaceLrc, index) => (\n            <p \n              key={ `${lrcItem.time}${lrcItem.text}`}\n              style={{\n                color: lrcIndex === index ? props.color : ''\n              }}\n              className={getLrcChooseName(index)}\n              dangerouslySetInnerHTML={{\n                __html: lrcItem.text\n              }}\n            >\n            </p>\n          ))\n        }\n      </section>\n    </section>\n  )\n}\n\nexport default Lrc","import React, { useEffect, useState } from \"react\"\nimport './index.scss'\nimport { Slider } from 'antd';\n\nconst Progress = (props: {\n  range: number,\n  handleChanging: Function,\n  setChange: Function,\n}) => {\n\n  const [value, setValue] = useState(0)\n\n  const [isChanging, setIsChanging] = useState(false)\n\n\n  useEffect(() => {\n    if (!isChanging) {\n      setValue(props.range)\n    }\n  }, [isChanging, props.range])\n\n  const onChange = (value: number) => {\n    setIsChanging(true)\n    props.setChange(true)\n    setValue(value)\n    props.handleChanging(value)\n  }\n\n  const onAfterChange = (value: number) => {\n    // 已经取消拖动，可以同步跳转了\n    // console.log('afterChange', value)\n    props.setChange(false)\n    setIsChanging(false)\n  }\n\n  return (\n    <section className=\"progress\">\n       <Slider defaultValue={0} value={value} onChange={onChange} onAfterChange={onAfterChange} tooltipVisible={false} />\n    </section>\n  )\n}\n\nexport default Progress","/**\n * 所有对数据操作的集合，包括存储数据， 查询数据\n * \n * 1. 歌曲的储存方式\n *   MusicList  InterfaceMusicInfo  \n *   id -> 名称生成的hash 值\n *   lrc ->   歌词，在列表进行操作关联\n *   music -> 歌曲的 blob，播放时进行查询关联\n *    \n * \n *   music-名称生成的hash 值, 随机储存, 播放通过歌曲信息的 hash 值获取具体文件流\n * \n *   LrcList  InterfaceLrcInfo  id -> 名称生成的hash 值, 文件本身存在列表里面\n * \n */\n\nimport localforage from 'localforage'\nimport { dataURLtoBlob } from '.'\nimport { InterfaceLrcInfo, InterfaceMusicInfo } from '../Interface/music'\n\n /**\n  * 添加歌词的存储方法\n  * key: music-lrc-list\n  */\n export const addLrc = async (lrc: InterfaceLrcInfo):Promise<any> => {\n    const key = 'music-lrc-list'\n    // 歌词，直接拉出列表，然后塞进去，储存\n    const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\n    // 这里需要判断下是否已经存在\n    let noExist = list.every(item => item.fileName !== lrc.fileName)\n    if (noExist) {\n      list.push(lrc)\n    }\n    return localforage.setItem('music-lrc-list', list)\n}\n\n// 获取歌词列表\nexport const getLrcList = async ():Promise<InterfaceLrcInfo[]>  => {\n  const key = 'music-lrc-list'\n  const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\n  return list\n}\n\n/**\n * 添加歌曲列表方法\n * music-list\n * 具体流地址 music-名称生成的hash 值\n */\n\nexport const addMusic = async (musicInfo: InterfaceMusicInfo, blob: Blob):Promise<any> => {\n  const key = 'music-list'\n  // 歌词，直接拉出列表，然后塞进去，储存\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n  // 这里需要判断下是否已经存在\n  let noExist = list.every(item => item.fileName !== musicInfo.fileName)\n  if (noExist) {\n    // 这里需要去存储文件流\n    const musicHash = `${musicInfo.fileName}-${Math.random() * 100}-${Date.now()}`\n    musicInfo.id = musicHash\n    await localforage.setItem(musicHash, blob)\n    list.push(musicInfo)\n  }\n  return localforage.setItem('music-list', list)\n}\n\n// 通过 id 删除歌曲\nexport const removeMusic = async (id: string):Promise<Boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const key = 'music-list'\n      // 拉出歌曲列表\n      let list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n      list = list.filter(item => item.id !== id)\n      await localforage.setItem('music-list', list)\n      await localforage.removeItem(id)\n      resolve(true)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 获取歌曲列表\nexport const getMusicList = async ():Promise<InterfaceMusicInfo[]>  => {\n  const key = 'music-list'\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n  return list\n}\n\n// 获取单首歌词信息\nexport const getMusicInfoFromLocal = async (id: string): Promise<InterfaceMusicInfo> => {\n  return new Promise(async (resolve, reject) => {\n    const list = await localforage.getItem('music-list') as InterfaceMusicInfo[] || []\n    const cur = list.filter((item: InterfaceMusicInfo) => item.id === id)[0]\n    if (!cur) {\n      reject('获取歌曲信息失败')\n    } else {\n      cur.music = await localforage.getItem(id)  as Blob\n      if (cur.lrcKey) {\n         const lrcList = await getLrcList()\n         lrcList.forEach(item => {\n           if (item.fileName === cur.lrcKey) {\n            cur.lrc = item.content\n           }\n         })\n      }\n      // 这里处理下图片 url 的生成\n      if (cur.picture.length > 0) {\n        cur.pictureUrl = URL.createObjectURL(dataURLtoBlob(cur.picture[0]))\n      }\n      resolve(cur)\n    }\n  })\n} \n\n// 通过 id 删除歌词\nexport const removeLrc = async (id: string):Promise<Boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const key = 'music-lrc-list'\n      // 拉出歌词列表\n      let list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n      list = list.filter(item => item.fileName !== id)\n      await localforage.setItem('music-lrc-list', list)\n      resolve(true)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 自动关联歌曲歌词\nexport const MusicRelatedLrc = (): Promise<string> => {\n  return new Promise(async(resolve, reject) => {\n    try {\n      let musicList = await getMusicList()\n      const lrcList = await getLrcList()\n      musicList = musicList.map((item: InterfaceMusicInfo) => {\n        lrcList.forEach((lrc: InterfaceLrcInfo) => {\n          if (lrc.fileName.includes(item.name)) {\n            item.lrcKey = lrc.fileName\n          }\n        })\n        return item\n      })\n      // console.log(musicList)\n      await localforage.setItem('music-list', musicList)\n      resolve('success')\n    } catch (error) {\n      reject(error)\n    }\n  })\n}","import { observable, action } from 'mobx';\nimport { InterfaceLrcInfo, InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../Interface/music';\nimport { Howl } from 'howler'\nimport { getLrcList, getMusicList, removeLrc, removeMusic, } from '../utils/local';\nimport { getFormatCode } from '../utils';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nclass Common {\n  @observable\n  preUrl: string = ''\n\n  @action\n  updatePreUrl (url: string) {\n    this.preUrl = url\n  }\n\n  @observable\n  preImgUrl: string[] = []\n\n  @action\n  updatePreImgUrl (url: string) {\n    this.preImgUrl.push(url)\n    if (this.preImgUrl.length >= 5) {\n      URL.revokeObjectURL(this.preImgUrl.shift() as string)\n    }\n  }\n  \n  // 音乐播放实例\n  @observable\n  musicPlayer: Howl | null = null\n\n  @action\n  createdPlayer () {\n    if (this.musicInfo) {\n      this.updatedMusicData({\n        playing: false,\n      })\n      const url = URL.createObjectURL(this.musicInfo.music)\n      if (this.preUrl) {\n        URL.revokeObjectURL(this.preUrl)\n      }\n      this.updatePreUrl(url)\n      this.updatePreImgUrl(this.musicInfo.pictureUrl || '')\n      this.musicPlayer = new Howl({\n        autoplay: true,\n        src: url,\n        html5: true,\n        format: [getFormatCode(this.musicInfo.codec.toLowerCase() || String(this.musicInfo.fileType).toLowerCase())],\n        volume: 1,\n        onplay: this.handlePlay,\n        onpause: this.handlePause,\n        onend: this.handleEnd,\n        onstop: this.handleStop\n      })\n      const navigator: any = window.navigator\n      if (navigator.mediaSession) {\n        navigator.mediaSession.setActionHandler('play', () => {\n          this.musicPlayer?.play()\n        })\n        navigator.mediaSession.setActionHandler('pause', () => {\n          this.musicPlayer?.pause()\n        })\n        navigator.mediaSession.setActionHandler('stop', () => {\n          this.musicPlayer?.stop()\n        })\n        navigator.mediaSession.setActionHandler('seekto', (evt: any) => {\n          // console.log(1, evt)\n          const currentTime = Number(evt.seekTime)\n          this.musicPlayer?.seek(currentTime)\n        })\n        navigator.mediaSession.setActionHandler('seekbackward', (evt: any) => {\n          this.updatedMusicData({\n            change: true\n          })\n          const currentTime = Number(this.musicPlayer?.seek()) - 10\n          this.musicPlayer?.seek(currentTime)\n          this.updatedMusicData({\n            change: false\n          })\n          console.log('快退')\n        });\n        navigator.mediaSession.setActionHandler('seekforward', (evt: any) => {\n          this.updatedMusicData({\n            change: true\n          })\n          const currentTime = Number(this.musicPlayer?.seek()) + 10\n          this.musicPlayer?.seek(currentTime)\n          this.updatedMusicData({\n            change: false\n          })\n          console.log('快进')\n        });\n        navigator.mediaSession.setActionHandler('previoustrack', this.handlePreMusic);\n        navigator.mediaSession.setActionHandler('nexttrack', this.handleNextMusic);\n      }\n    }\n  }\n\n  handlePlay = () => {\n    console.log('歌曲播放了')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      duration: this.musicPlayer?.duration(),\n      playing: true,\n      change: false\n    })\n    if (this.musicInfo && !this.musicInfo.duration) {\n      this.musicInfo.duration = Number(this.musicPlayer?.duration())\n    }\n    const navigator: any = window.navigator\n    const MediaMetadata = window.MediaMetadata\n    if (navigator.mediaSession && this.musicInfo){\n      navigator.mediaSession.metadata = new MediaMetadata({\n        title: this.musicInfo.name,\n        artist: this.musicInfo.artist,\n        album: this.musicInfo.album,\n        artwork: [{\n          src: this.musicInfo.pictureUrl || '',\n          type: 'image/jpeg',\n          sizes: '512x512'\n        }]\n      });\n    }\n  }\n\n  handlePause = () => {\n    console.log('歌曲暂停了')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n  }\n\n  handleEnd = () => {\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n    requestAnimationFrame(this.handlePlaying)\n    console.log('歌曲播放完了')\n    this.handleNextMusic()\n  }\n\n  handleStop = () => {\n    console.log('歌曲停止')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n  }\n\n  handlePlaying = () => {\n    if (!this.musicData.change && this.musicPlayer && this.musicPlayer.playing()) {\n      this.updatedMusicData({\n        type: 'update',\n        currentTime: this.musicPlayer.seek()\n      })\n      const navigator: any = window.navigator\n      if (navigator.mediaSession && this.musicPlayer) {\n        navigator.mediaSession.setPositionState({\n          duration: Number(this.musicPlayer.duration()),\n          playbackRate: 1,\n          position: this.musicPlayer.seek()\n        })\n        // console.log({\n        //   duration: Number(this.musicPlayer.duration()),\n        //   playbackRate: 1,\n        //   position: this.musicPlayer.seek()\n        // })\n      }\n      requestAnimationFrame(this.handlePlaying)\n    }\n  }\n\n  @action\n  destroyPlayer () {\n    this.musicPlayer = null\n  }\n\n\n  @observable\n  musicInfo: InterfaceMusicInfo | null = null\n\n  @action\n  updatedMusicInfo (data: InterfaceMusicInfo) {\n    if (data.picture.length === 0) {\n      data.picture = [`${process.env.PUBLIC_URL}/images/music-no.jpeg`]\n    }\n    this.musicInfo = data\n  }\n  \n \n\n  // 当前音乐播放的数据\n  @observable\n  musicData: InterfaceMusicPlayingInfo  = {\n    id: '',\n    playing: false,\n    duration: 0,\n    currentTime: 0,\n    change: false,\n    min: true\n  }\n\n  @action\n  updatedMusicData (data: any) {\n    if (data.type === 'update') {\n      this.musicData.currentTime = data.currentTime\n      return\n    }\n    // 判断 body 样式\n    if (data.hasOwnProperty('min')) {\n      if (data.min) {\n        document.body.classList.remove('dialog-screen')\n      } else {\n        document.body.classList.add('dialog-screen')\n      }\n    }\n    if (!data.change) {\n      setTimeout(() => {\n        requestAnimationFrame(this.handlePlaying)\n      }, 100)\n    }\n    this.musicData = {\n      ...this.musicData,\n      ...data\n    }\n  }\n\n  // 播放器状态\n  @observable\n  musicPlayerStats = {\n    // 播放器循环状态  单曲播放 single, 随机 random 顺序播放 order\n    loop: 'random'\n  }\n  \n  // 播放下一首，上一首功能实现\n  @observable\n  musicPlayList: InterfaceMusicInfo[] = []\n\n  @action\n  updateMusicPlayList = (list: InterfaceMusicInfo[]) => {\n    this.musicPlayList = list\n  }\n\n  // 歌曲播放下一首\n  handleNextMusic = () => {\n    if (this.musicPlayer) {\n      this.musicPlayer.stop()\n    }\n    let cur = 0\n    const len = this.musicPlayList.length - 1\n    while (cur < this.musicPlayList.length) {\n      if (this.musicPlayList[cur].id === this.musicData.id) {\n        break\n      }\n      cur++\n    }\n    // 防止超出下一首\n    let next = cur + 1\n    next = next > len ? (next - len) - 1 : next\n    if (this.musicPlayList[next].id === this.musicData.id) {\n      this.musicPlayer?.play()\n    } else {\n      common.updatedMusicData({\n        id: this.musicPlayList[next].id\n      })\n    }\n  }\n\n  // 歌曲播放上一首\n  handlePreMusic = () => {\n    if (this.musicPlayer) {\n      this.musicPlayer.stop()\n    }\n    let cur = 0\n    const len = this.musicPlayList.length - 1\n    while (cur < this.musicPlayList.length) {\n      if (this.musicPlayList[cur].id === this.musicData.id) {\n        break\n      }\n      cur++\n    }\n    // 防止低于 0\n    let pre = cur - 1\n    pre = pre < 0 ? len : pre\n    if (this.musicPlayList[pre].id === this.musicData.id) {\n      this.musicPlayer?.play()\n    } else {\n      common.updatedMusicData({\n        id: this.musicPlayList[pre].id\n      })\n    }\n  }\n\n  // 本地音乐展示列表\n  @observable\n  localMusicList: InterfaceMusicInfo[] = []\n  @observable\n  localMusicLoading: boolean = false\n  @observable\n  localAlbumMap: Map<string, InterfaceMusicInfo[]> = new Map()\n\n  // 专辑生成说明，歌曲列表根据专辑的名称集合数组\n  @action\n  updateLocalAlbumList = () => {\n    const map = new Map()\n    this.localMusicList.forEach(item => {\n      if (item.album === '') return\n      const target = map.get(item.album) ?? []\n      map.set(item.album, [...target, item])\n    })\n    this.localAlbumMap = map\n  }\n\n  @action\n  updateLocalMusicList = async () => {\n    this.localMusicLoading = true\n    this.localMusicList = await getMusicList()\n    // 用来做播放列表更新\n    this.updateMusicPlayList(cloneDeep(this.localMusicList))\n    this.updateLocalAlbumList()\n    this.localMusicLoading = false\n  }\n\n  // 删除歌曲, 操作列表删除当前歌曲，同时删除歌曲文件流\n  @action deleteMusic = async (id: string) => {\n    try {\n      await removeMusic(id)\n      message.success('删除成功')\n      this.updateLocalMusicList()\n    } catch (error) {\n      console.log(error)\n      message.error('删除失败')\n    }\n  }\n\n\n  // 本地歌词展示列表\n  localMusicLrcList: InterfaceLrcInfo[] = []\n  @observable\n  localMusicLrcLoading: boolean = false\n\n  @action\n  updateLocalMusicLrcList = async () => {\n    this.localMusicLrcLoading = true\n    this.localMusicLrcList = await getLrcList()\n    this.localMusicLrcLoading = false\n  }\n\n  // 删除歌曲, 操作列表删除当前歌曲，同时删除歌曲文件流\n  @action deleteLrc = async (id: string) => {\n    try {\n      await removeLrc(id)\n      message.success('删除成功')\n      this.updateLocalMusicLrcList()\n    } catch (error) {\n      console.log(error)\n      message.error('删除失败')\n    }\n  }\n\n  // 音乐播放时修改全局主题色\n  @observable\n  musicColor = '#1890ff'\n\n  @action\n  updateMusicColor = (color: string) => {\n    this.musicColor = color\n    document.documentElement.style.setProperty('--primary-color', color)\n  }\n}\n\n\nconst common = new Common()\n\n\n \nexport default common\n\n","import React, { useEffect, useState } from 'react';\nimport './index.scss'\nimport { InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../../Interface/music';\nimport { formatTime } from '../../utils';\nimport Progress from '../Progress';\nimport { PauseCircleOutlined, PlayCircleOutlined, StepBackwardOutlined, StepForwardOutlined } from '@ant-design/icons';\nimport common from '../../store/common';\nconst Control = (props: {\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  handlePlay: Function,\n  handlePause: Function,\n  handleChanging: Function,\n  setChange: Function,\n  musicPlayingInfo: InterfaceMusicPlayingInfo,\n  min?: Boolean\n}) => {\n\n  const [range, setRange] = useState(0)\n\n  useEffect(() => {\n    const allTime = props.currentInfo?.duration || props.musicPlayingInfo.duration || 0\n    setRange(\n      (props.currentTime / allTime) * 100\n    )\n  }, [props.currentInfo, props.currentTime, props.musicPlayingInfo.duration])\n\n  return (\n    <section className=\"player-control\">\n      {\n        props.min ? (\n          <section className=\"control-min\">\n            <section className=\"control-icon-list\">\n              <p onClick={common.handlePreMusic}>\n                <StepBackwardOutlined />\n              </p>\n              <p className=\"icon-play-bg\" onClick={\n                () => {\n                  if (props.isPlaying) {\n                    props.handlePause()\n                  } else {\n                    props.handlePlay()\n                  }\n                }\n              }>\n                {\n                  props.isPlaying ? (\n                    <PauseCircleOutlined />\n                  ) : (\n                    <PlayCircleOutlined />\n                    )\n                }\n              </p>\n              <p onClick={common.handleNextMusic}>\n                <StepForwardOutlined />\n              </p>\n            </section>\n            <section className=\"control-progress\">\n              <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\n              {/* <span>歌曲进度百分比: { range.toFixed(2) }%</span> */}\n            </section>\n            <section className=\"line-left\">\n              <span> {formatTime(props.currentTime || 0)} </span>\n              <span>/</span>\n              <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\n            </section>\n          </section>\n        ) : (\n            <section className=\"control\">\n              <section className=\"control-progress\">\n                <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\n                {/* <span>歌曲进度百分比: { range.toFixed(2) }%</span> */}\n              </section>\n              <section className=\"control-line\">\n                <section className=\"line-left\">\n                  <span> {formatTime(props.currentTime || 0)} </span>\n                  <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\n                </section>\n                <section className=\"line-center\">\n                <section className=\"control-icon-list\">\n                  <p onClick={common.handlePreMusic}>\n                    <StepBackwardOutlined />\n                  </p>\n                  <p className=\"icon-play-bg\" onClick={\n                    () => {\n                      if (props.isPlaying) {\n                        props.handlePause()\n                      } else {\n                        props.handlePlay()\n                      }\n                    }\n                  }>\n                    {\n                      props.isPlaying ? (\n                        <PauseCircleOutlined />\n                      ) : (\n                        <PlayCircleOutlined />\n                      )\n                    }\n                  </p>\n                  <p onClick={common.handleNextMusic}>\n                    <StepForwardOutlined />\n                  </p>\n            </section>\n                </section>\n              </section>\n            </section>\n          )\n      }\n\n    </section>\n  )\n}\n\nexport default Control","import React, { useEffect, useRef, useState } from \"react\"\nimport { InterfaceLrcWord, InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatLrcProgress, getChooseLrcWordIndex, getWordLineProgress} from \"../../utils\"\nimport './index-word.scss'\n// 逐字渲染的歌词\n\nconst LrcWord = (props: {\n  lrc: string,\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  setCurrentLrc: Function,\n  color?: string\n}) => {\n  // 保存当前渲染的歌词列表\n  const [lrcList, setLrcList] = useState<InterfaceLrcWord[][]>([])\n\n  // 需要渲染的歌词\n  const [lrcIndex, setLrcIndex] = useState(-1)\n\n  // 歌词滚动容器\n  const lrcScroll = useRef(null);\n\n  // 当前是否可以进行歌词的自动滚动\n  const [canScroll, setCanScroll] = useState(true)\n\n  // 当前进度\n  const [bg, setBg] = useState({\n    backgroundImage: ''\n  })\n\n  // 当前每行滚动的高度\n  const [lineHeight, setLineHeight] = useState(0)\n\n  const topLine = 1\n   \n  useEffect(() => {\n    setLrcList(formatLrcProgress(props.lrc))\n  }, [props.lrc])\n\n  useEffect(() => {\n    setLrcIndex(\n      getChooseLrcWordIndex(lrcList, props.currentTime)\n    )\n    if (lrcList[lrcIndex] && lrcList[lrcIndex].length) {\n      const text = lrcList[lrcIndex].map(item => {\n        return item.text\n      })\n      props.setCurrentLrc(text.join(''))\n    }\n    const key = getWordLineProgress(lrcList[lrcIndex], props.currentTime)\n    setBg(\n      {\n        backgroundImage: `-webkit-linear-gradient(left,${props.color} ${key}%,#ffffff ${key}%)`\n      }\n    )\n  }, [lrcIndex, lrcList, props])\n\n  useEffect(() => {\n    if (lrcScroll && canScroll && props.isPlaying) {\n      // 计算当前歌词应该需要滚动的场景\n      const target: any = lrcScroll.current\n      const top = lineHeight * (lrcIndex - topLine) || 0\n      if (target) {\n        target.scrollTo({\n          top,\n          behavior: 'smooth'\n        })\n      }\n    }\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\n\n  const getLrcChooseName = (index: number) => {\n    return lrcIndex === index ? 'choose-lrc-line' : ''\n  }\n\n  const resize = () => {\n    // 浏览器高除以 高度 + \n    setLineHeight(document.body.offsetHeight * (5 + 2.5) / 100)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n    return () => {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n\n  return (\n    <section className=\"music-lrc-word\"\n      ref={lrcScroll}\n      onMouseEnter={() => {\n        setCanScroll(false)\n      }}\n      onMouseLeave={() => {\n        setCanScroll(true)\n        if (!props.isPlaying) {\n          return\n        }\n        const target: any = lrcScroll.current\n        const top = lineHeight * (lrcIndex - topLine) || 0\n        if (target) {\n          target.scrollTo({\n            top,\n            behavior: 'auto'\n          })\n        }\n      }}>\n      {/* 渲染歌词列表 */}\n      <section className=\"lrc-list\">\n        {\n          lrcList.map((lrcItem: InterfaceLrcWord[], index) => (\n            <section key={ index } className=\"lrc-line\">\n              <p className={getLrcChooseName(index)} style={lrcIndex === index ? bg : {}}>\n                {\n                  lrcItem.map((word: InterfaceLrcWord, i) => (\n                    <span key={ i }>{word.text}</span>\n                  ))\n                }\n              </p>\n            </section>\n          ))\n        }\n      </section>\n    </section>\n  )\n}\n\nexport default LrcWord","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport './index.scss'\n// import Upload from '../Upload'\nimport { InterfaceMusicInfo } from '../../Interface/music';\nimport Lrc from '../Lrc';\nimport Control from '../Control';\nimport LrcWord from '../Lrc/Lrc-word';\nimport FastAverageColor from 'fast-average-color';\nimport { setLightness, setSaturation } from 'polished';\nimport { getMusicInfoFromLocal } from '../../utils/local';\nimport { DownOutlined } from '@ant-design/icons';\nimport { observer } from \"mobx-react\"\nimport common from '../../store/common';\nimport { animated, useTransition } from 'react-spring/web';\n\nconst fac = new FastAverageColor();\n\nconst Player = observer(() => {\n\n  // const [musicPlayer, setMusicPlayer] = useState<Howl | null>(null)\n  const musicPlayer = common.musicPlayer\n\n  const musicInfo = common.musicInfo\n\n  // 当前的状态, 用来做歌曲时间，还是当前拖动时间的判定\n  const musicData = common.musicData\n\n  const [currentLrc, setCurrentLrc] = useState('')\n\n  const refChange = useRef(false)\n\n  // 主题色\n  const musicColor = common.musicColor\n\n  const playerMaxTransitions = useTransition(!musicData.min, null, {\n    from: { transform: 'translate3d(0, 100vh, 0)' },\n    enter: { transform: 'translate3d(0, 0px, 0)' },\n    leave: { transform: 'translate3d(0, 100vh, 0)' },\n  })\n\n  const handleChanging = (value: number) => {\n    // 当前拖动时间的改变\n    // 反推出当前时间\n    const time = (musicInfo?.duration || 0) * value / 100\n    common.updatedMusicData(\n      {\n        currentTime: time\n      }\n    )\n  }\n\n  const setChangeFromControl = (key: boolean) => {\n    if (!key) {\n      // 表示操作结束，开始同步数据，播放\n      musicPlayer?.seek(musicData.currentTime)\n      if (!musicData.playing) {\n        musicPlayer?.play()\n      }\n    }\n    common.updatedMusicData({\n      change: key\n    })\n  }\n\n  const getInfoFormLocal = useCallback(async () => {\n    return new Promise(async (resolve, reject) => {\n      const res = await getMusicInfoFromLocal(musicData.id)\n      if (res) {\n        resolve(res)\n      } else {\n        reject('歌曲信息获取失败')\n      }\n    })\n  }, [musicData.id])\n\n  // 歌曲停止事件\n  // const handleStop = useCallback(() => {\n  //   if (musicPlayer) {\n  //     musicPlayer.stop()\n  //   }\n  // }, [musicPlayer])\n\n  // 歌曲播放事件\n  const handelPlay = useCallback(() => {\n    if (musicPlayer) {\n      if (!musicPlayer.playing()) {\n        musicPlayer.play()\n      } else {\n        musicPlayer.pause()\n      }\n    }\n  }, [musicPlayer])\n\n  const getMusicInfo = useCallback(async () => {\n    if (!musicData.id) return\n    const info: InterfaceMusicInfo = await getInfoFormLocal() as InterfaceMusicInfo\n    if (!info) return\n    common.updatedMusicInfo(info)\n    fac.getColorAsync(info.pictureUrl || '')\n      .then(color => {\n        common.updateMusicColor(\n          setSaturation(.8, setLightness(.5, color.rgba))\n        )\n      })\n      .catch(e => {\n        common.updateMusicColor(\n          '#1890ff'\n        )\n      });\n  }, [getInfoFormLocal, musicData.id])\n\n  // 绑定键盘事件\n  const keyDown = useCallback((event: any) => {\n    const keyCode = event.keyCode as number\n    if (keyCode === 32) {\n      event.preventDefault()\n      handelPlay()\n    }\n  }, [handelPlay])\n\n  // 修改播放器状态\n  const handelChangeSize = () => {\n    common.updatedMusicData({\n      min: !musicData.min,\n    })\n  }\n\n  useEffect(() => {\n    console.log('useEffect-getMusicInfo')\n    getMusicInfo()\n  }, [getMusicInfo])\n\n\n  useEffect(() => {\n    console.log('useEffect-create')\n    if (musicInfo && !musicPlayer) {\n      setCurrentLrc('')\n      console.log('创建音乐实例')\n      common.createdPlayer()\n    }\n    return () => {\n      if (musicPlayer) {\n        console.log('created destroy')\n        common.updatedMusicData({\n          playing: false\n        })\n        common.destroyPlayer()\n      }\n    }\n  }, [musicInfo, musicPlayer])\n\n  useEffect(() => {\n    console.log('music-change-key')\n    refChange.current = musicData.change\n  }, [musicData.change])\n\n  useEffect(() => {\n    // 绑定enter 事件\n    window.addEventListener('keydown', keyDown)\n    return () => {\n      window.removeEventListener('keydown', keyDown)\n    }\n  }, [keyDown])\n\n\n  return (\n    <section className=\"player\">\n      {\n        musicData.min ? (\n          <section className=\"player-min\">\n            {\n              musicInfo ? (\n                <section className=\"player-layout\">\n                  <section className=\"layout-left\">\n                    <section className=\"music-img\" onClick={handelChangeSize}>\n                      <img src={musicInfo.pictureUrl ? musicInfo.pictureUrl : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\n                    </section>\n                    <section className=\"player-info\">\n                      <p className=\"music-name\">{musicInfo.name}</p>\n                      <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\n                    </section>\n                  </section>\n                  <section className=\"music-progress\">\n                    <Control\n                      handlePlay={handelPlay}\n                      handlePause={handelPlay}\n                      currentInfo={musicInfo || null}\n                      musicPlayingInfo={musicData}\n                      currentTime={musicData.currentTime}\n                      handleChanging={handleChanging}\n                      setChange={setChangeFromControl}\n                      min={musicData.min}\n                      isPlaying={musicData.playing}></Control>\n                  </section>\n                </section>\n              ) : (\n                  <section className=\"player-layout\">\n                    请选择歌曲进行播放\n                  </section>\n                )\n            }\n          </section>\n        ) : ('')\n      }\n      {\n        playerMaxTransitions.map(({ item, key, props }) =>\n          item && <animated.section className=\"player-max\" key={key} style={props}>\n            <section className=\"status-control\" onClick={handelChangeSize}>\n              <DownOutlined />\n            </section>\n            <section className=\"player-bg\" style={{ \"backgroundImage\": `url(${musicInfo?.pictureUrl || process.env.PUBLIC_URL + '/images/music-no.jpeg'})` }}></section>\n            <section className=\"player-fade\"></section>\n            {/* <Upload></Upload> */}\n            {/* 这里去渲染歌曲信息 */}\n            <section className=\"player-layout\">\n              {\n                musicInfo ?\n                  <section className=\"player-box\">\n\n                    <section className=\"player-left\">\n                      <section className=\"player-line\">\n                        <img src={musicInfo.pictureUrl ? musicInfo.pictureUrl : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\n                      </section>\n                      <section className=\"player-line\">\n                        <section className=\"player-info\">\n                          <p className=\"music-name\">{musicInfo.name}</p>\n                          <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\n                          <p\n                            className=\"music-current-lrc\"\n                            dangerouslySetInnerHTML={{\n                              __html: currentLrc\n                            }}\n                          ></p>\n                        </section>\n                      </section>\n                      <Control\n                        handlePlay={handelPlay}\n                        handlePause={handelPlay}\n                        currentInfo={musicInfo || null}\n                        musicPlayingInfo={musicData}\n                        currentTime={musicData.currentTime}\n                        handleChanging={handleChanging}\n                        setChange={setChangeFromControl}\n                        isPlaying={musicData.playing}></Control>\n                    </section>\n                    <section className=\"player-right\">\n                      {\n                        musicInfo.lrc?.match(/\\](\\S)\\[/g) ? (\n                          <LrcWord\n                            setCurrentLrc={setCurrentLrc}\n                            color={musicColor}\n                            lrc={musicInfo.lrc || ''}\n                            currentInfo={musicInfo || null}\n                            currentTime={musicData.currentTime}\n                            isPlaying={musicData.playing}></LrcWord>\n                        )\n                          : (\n                            <Lrc\n                              setCurrentLrc={setCurrentLrc}\n                              color={musicColor}\n                              lrc={musicInfo.lrc || ''}\n                              currentInfo={musicInfo || null}\n                              currentTime={musicData.currentTime}\n                              isPlaying={musicData.playing}></Lrc>\n                          )\n                      }\n                    </section>\n                  </section> : ''\n              }\n            </section>\n          </animated.section>\n        )\n      }\n    </section>\n  );\n})\n\nexport default Player\n","// 用来做文件解析， 文件生成， 歌词 歌曲匹配的配置文件\n\n// 支持的歌曲的格式\nexport const supportMusicFormat = [\n  'mp3', 'ogg', 'wav', 'aac', 'flac', 'dolby', 'opus', 'webm', 'alac'\n]\n\n// 支持的歌词的格式\nexport const supportMusicLrcFormat = [\n  'lrc', 'txt'\n]","import { observable, action } from 'mobx';\nimport { uploadRun } from '../utils/upload'\n\nclass Upload {\n  // 当前是否处于数据库写入的状态中, 同一时刻，只能进行一个读写操作\n  // 文件上传的处理\n  @observable\n  isUploading: boolean = false\n\n  @observable\n  uploadList: File[] = []\n\n  @action\n  addUploadTask = (File: File) => {\n    this.uploadList.push(File)\n    this.checkUpload()\n  }\n\n  // 检查是否处于上传的状态\n  checkUpload = async () => {\n    if (!this.isUploading && this.uploadList.length) {\n      this.handleUpload()\n    }\n  }\n\n  // 处理上传的数据\n  handleUpload = async () => {\n    try {\n      this.isUploading = true\n      const target = this.uploadList.shift() as File;\n      await uploadRun(target)\n      this.isUploading = false\n      this.checkUpload()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nconst upload = new Upload()\n\n\n \nexport default upload\n\n","import { supportMusicFormat, supportMusicLrcFormat } from '../config'\nimport { loadFile, transformMusicInfo } from '../utils';\nimport filesize from 'filesize'\nimport { InterfaceMusicInfo } from '../Interface/music';\nimport { addLrc, addMusic } from '../utils/local';\nimport * as musicMetadata from 'music-metadata-browser'\nimport { message } from 'antd';\nimport common from '../store/common';\nimport upload from '../store/upload';\n// import { MusicRelatedLrc } from \"./local\";\n\n\nexport const handleUpload = (File: File):boolean => {\n  upload.addUploadTask(File)\n  return false;\n}\n\nexport const uploadRun = async (File: File) => {\n  const nameList = File.name.split('.')\n  const FileType = nameList[nameList.length - 1]\n  const FileName = File.name.replace(`.${FileType}`, '')\n  // 这里处理我们文件的存储\n  if (supportMusicFormat.includes(FileType)) {\n    await handleMusicData(File)\n    return false\n  }\n\n  if (supportMusicLrcFormat.includes(FileType)) {\n    await handleMusicLrc(File)\n    return false\n  }\n  message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\n  return false\n}\n\n\n// 音频文件处理\nconst handleMusicData = async (File: File) => {\n  // console.log(File, filesize(File.size))\n  const nameList = File.name.split('.')\n  const FileType = nameList[nameList.length - 1]\n  const FileName = File.name.replace(`.${FileType}`, '')\n  let blob:Blob\n  let result\n  try {\n    blob = await loadFile(File, true)\n    result = await musicMetadata.parseBlob(blob)\n  } catch (error) {\n    message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\n    return\n  }\n  try {\n    const data: InterfaceMusicInfo = transformMusicInfo(result)\n    data.fileName = FileName\n    data.fileType = FileType\n    data.fileSize = filesize(File.size)\n    data.size = File.size\n    data.name = data.name || data.fileName || '未知歌曲'\n    await addMusic(data, blob)\n    message.success(`${File.name}  上传成功`)\n    console.log(`${File.name}  上传成功`)\n    common.updateLocalMusicList()\n  } catch (error) {\n    message.warning(error)\n  }\n}\n\n// 歌词文件处理\nconst handleMusicLrc = async (File: File) => {\n  const nameList = File.name.split('.')\n  const fileType = nameList[nameList.length - 1]\n  const fileName = File.name.replace(`.${fileType}`, '')\n  let result = ''\n  try {\n    result = await loadFile(File, false)\n  } catch (error) {\n    message.warning(`目前还不支持处理${fileType}这种类型文件，${fileName}`)\n    return\n  }\n\n  try {\n    await addLrc({\n      content: result,\n      fileName,\n      fileType,\n      size: File.size,\n      fileSize: filesize(File.size)\n    })\n    common.updateLocalMusicLrcList()\n    message.success(`${File.name}  上传成功`)\n    console.log(`${File.name}  上传成功`)\n  } catch (error) {\n    message.warning(error)\n  }\n}","import React from 'react';\nimport { Button, Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport './index.scss'\nimport { supportMusicFormat, supportMusicLrcFormat } from '../../config'\nimport { handleUpload } from '../../utils/upload'\n\nconst UploadFile = () => {\n  \n  const acceptStr = (): string => {\n    let arr = supportMusicFormat.concat(supportMusicLrcFormat)\n    arr = arr.map((item: string) => {\n      item = `.${item}`\n      return item\n    })\n    return arr.join(',')\n  }\n\n  return (\n    <section className=\"page-upload\">\n      <section className=\"upload-line\">\n        <Upload beforeUpload={handleUpload} showUploadList={false} accept={acceptStr()} multiple>\n          <Button icon={<UploadOutlined />}>点击上传本地歌曲或者歌词</Button>\n        </Upload>\n        <p className=\"tips\">\n          <span>支持歌曲格式 { supportMusicFormat.join('，')}</span>\n          <span>支持歌词格式 { supportMusicLrcFormat.join('，')}</span>\n        </p>\n      </section>\n    </section>\n  );\n}\n\nexport default UploadFile","// 歌词列表展示\nimport { Popconfirm, Table } from \"antd\"\nimport { observer } from \"mobx-react\"\nimport React, { useEffect } from \"react\"\nimport { InterfaceLrcInfo } from \"../../Interface/music\"\nimport common from \"../../store/common\"\n\nconst LrcList = observer(() => {\n  const columns = [\n    {\n      title: '歌词名',\n      dataIndex: 'fileName',\n      key: 'fileName',\n    },\n    {\n      title: '大小',\n      dataIndex: 'fileSize',\n      key: 'fileSize',\n      sorter: (a: InterfaceLrcInfo, b: InterfaceLrcInfo) => a.size - b.size\n    },\n    {\n      title: '操作',\n      dataIndex: 'name',\n      key: 'control',\n      render: (_: string, row: InterfaceLrcInfo) => {\n        return (\n          <p>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`确定删除-${row.fileName}-歌词嘛`}\n              onConfirm={() => handleDelete(row.fileName || '')}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <span className=\"link\">删除</span>\n            </Popconfirm>\n          </p>\n        )\n      }\n    },\n  ]\n  const list = common.localMusicLrcList\n  const loading = common.localMusicLrcLoading\n\n  const handleDelete = (id: string) => {\n    common.deleteLrc(id)\n  }\n\n  useEffect(() => {\n    console.log('获取歌词列表')\n    common.updateLocalMusicLrcList()\n  }, [])\n\n  return (\n    <section className=\"lrc-list\">\n      <Table\n        dataSource={list}\n        columns={columns}\n        pagination={false}\n        rowKey=\"fileName\"\n        loading={loading} />\n    </section>\n  )\n})\n\nexport default LrcList","import React from \"react\"\nimport './index.scss'\n\nconst PlayingIcon = () => {\n  return (\n    <p className=\"playing-icon\">\n      <span className=\"rect1\"></span>\n      <span className=\"rect2\"></span>\n      <span className=\"rect3\"></span>\n      <span className=\"rect4\"></span>\n      <span className=\"rect5\"></span>\n    </p>\n  )\n}\n\nexport default PlayingIcon","// 歌词列表展示\nimport { Popconfirm, Space, Table } from \"antd\"\nimport React, { useEffect } from \"react\"\nimport { InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatTime } from \"../../utils\"\nimport { observer } from \"mobx-react\"\nimport { PauseCircleOutlined, PlayCircleOutlined } from \"@ant-design/icons\"\nimport './index.scss'\nimport common from \"../../store/common\"\nimport PlayingIcon from \"../Playing-icon\"\nconst MusicList = observer(() => {\n  const musicData = common.musicData\n  const list = common.localMusicList\n  const loading = common.localMusicLoading\n  const columns = [\n    {\n      title: '歌曲',\n      dataIndex: 'name',\n      key: 'name',\n      width: 300,\n      render: (name: string, row: InterfaceMusicInfo) =>\n        (\n          <section className=\"list-play\">\n            {\n              (musicData?.id === row.id && musicData.playing) ?\n                (\n                  <span>\n                    <PauseCircleOutlined className=\"icon\" onClick={() => handlePauseClick()} />\n                  </span>\n                ) : (\n                  <span>\n                    <PlayCircleOutlined className=\"icon\" onClick={() => handlePlayClick(row)} />\n                  </span>\n                )\n            }\n            <span>{name}</span>\n            {\n              (musicData?.id === row.id && musicData.playing) ?\n                (\n                  <PlayingIcon></PlayingIcon>\n                ) : ''\n            }\n          </section>\n        )\n    },\n    {\n      title: '歌手',\n      dataIndex: 'artist',\n      key: 'artist',\n    },\n    {\n      title: '专辑',\n      dataIndex: 'album',\n      key: 'album',\n    },\n    {\n      title: '时长',\n      dataIndex: 'duration',\n      key: 'duration',\n      render: (time: number) => formatTime(time) || '未知',\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.duration) - Number(b.duration)\n    },\n    {\n      title: '格式',\n      dataIndex: 'codec',\n      key: 'codec',\n      render: (codec: string, row: InterfaceMusicInfo) => codec || row.fileType\n    },\n    {\n      title: '大小',\n      dataIndex: 'fileSize',\n      key: 'fileSize',\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.size) - Number(b.size)\n    },\n    {\n      title: '关联歌词名',\n      dataIndex: 'lrcKey',\n      key: 'lrcKey',\n      render: (lrcKey: string, row: InterfaceMusicInfo) => {\n        if (lrcKey) {\n          return lrcKey\n        } else {\n          return (\n            <Space size=\"middle\">\n              <span className=\"action\">关联歌词</span>\n            </Space>\n          )\n        }\n      }\n    },\n    {\n      title: '操作',\n      dataIndex: 'name',\n      key: 'control',\n      render: (_: string, row: InterfaceMusicInfo) => {\n        return (\n          <p>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`确定删除-${row.name}-这首歌嘛`}\n              onConfirm={() => handleDelete(row.id || '')}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <span className=\"link\">删除</span>\n            </Popconfirm>\n          </p>\n        )\n      }\n    },\n  ]\n\n  const handlePlayClick = (item: InterfaceMusicInfo) => {\n    if (item.id !== musicData.id) {\n      common.musicPlayer?.stop()\n      setTimeout(() => {\n        common.updatedMusicData({\n          id: item.id\n        })\n      }, 100)\n    } else {\n      if (common.musicPlayer) {\n        common.musicPlayer.play()\n      }\n    }\n  }\n\n  const handlePauseClick = () => {\n    common.musicPlayer?.pause()\n  }\n\n  const handleDelete = (id: string) => {\n    common.deleteMusic(id)\n  }\n\n  useEffect(() => {\n    console.log('获取音乐列表')\n    common.updateLocalMusicList()\n  }, [])\n\n  return (\n    <section className=\"lrc-list-table\">\n      <Table dataSource={list} columns={columns} pagination={false} rowKey=\"fileName\" loading={loading} />\n    </section>\n  )\n})\n\nexport default MusicList","// 歌词列表展示\nimport React, { useEffect } from \"react\"\nimport { observer } from \"mobx-react\"\nimport './index.scss'\nimport common from \"../../store/common\"\nimport { InterfaceMusicInfo } from \"../../Interface/music\"\nconst AlbmuList = observer(() => {\n  const map = common.localAlbumMap\n  const list = [...map.keys()]\n  const musicData = common.musicData\n\n  const handlePlayClick = (item: InterfaceMusicInfo) => {\n    if (item.id !== musicData.id) {\n      common.musicPlayer?.stop()\n      setTimeout(() => {\n        common.updatedMusicData({\n          id: item.id\n        })\n      }, 100)\n    } else {\n      if (common.musicPlayer) {\n        common.musicPlayer?.stop()\n        common.musicPlayer.play()\n      }\n    }\n  }\n\n  useEffect(() => {\n    console.log('获取音乐列表')\n    common.updateLocalMusicList()\n  }, [])\n\n  return (\n    <section className=\"album-list\">\n      {\n        list.map(item => {\n          const info = map.get(item) as InterfaceMusicInfo[]\n          const album = info[0]\n          return (\n            <section key={item} className=\"album-item\" style={{\n              backgroundImage: `url(${album.picture || process.env.PUBLIC_URL + '/images/music-no.jpeg'})`\n            }}>\n              <section className=\"mask\"></section>\n                <section className=\"album-show\">\n                <p className=\"album-title\">{ item }</p>\n                <section className=\"music-list\">\n                  {\n                    info.map(music => (\n                      <p\n                        key={music.name}\n                        className={`music-item ${music.id === musicData.id ? 'active' : ''}`}\n                        onClick={() => handlePlayClick(music)}\n                      >\n                        <span>\n                          { music.name }\n                        </span>\n                      </p>\n                    ))\n                  }\n                </section>\n              </section>\n            </section>\n          )\n        })\n      }\n    </section>\n  )\n})\n\nexport default AlbmuList","import React, { useState } from \"react\"\nimport Upload from \"../Components/Upload\"\nimport { Button, message, Popconfirm, Tabs } from 'antd';\nimport LrcList from \"../Components/LrcList\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport MusicList from \"../Components/MusicList\";\nimport { MusicRelatedLrc } from \"../utils/local\";\nimport common from \"../store/common\";\nimport localforage from 'localforage'\nimport AlbumList from \"../Components/AlbumList\";\n\nconst { TabPane } = Tabs;\n\nconst Locale = () => {\n\n  const history = useHistory()\n\n  const useQuery = () => {\n    return new URLSearchParams(useLocation().search);\n  }\n  const query = useQuery()\n\n  const params = useLocation()\n\n  const tabCallback = (key: string) => {\n    history.push(`${params.pathname}?type=${key}`)\n  }\n  const [key, setKey] = useState('')\n\n  const handleRelated = async () => {\n    await MusicRelatedLrc()\n    message.success('关联成功')\n    common.updateLocalMusicList()\n    common.updateLocalMusicLrcList()\n  }\n\n  useEffect(() => {\n    const list = ['music', 'lrc', 'album']\n    if (query) {\n      const key = query.get('type') || ''\n      if (list.includes(key)) {\n        setKey(key)\n      } else {\n        setKey('album')\n      }\n    }\n  }, [query])\n\n  const handleClear = () => {\n    localforage.clear()\n    common.updateLocalMusicList()\n    common.updateLocalMusicLrcList()\n  }\n\n  return (\n    <section className=\"page-local\">\n      <section className=\"local-upload\">\n        <Upload></Upload>\n        <section>\n          <Button onClick={handleRelated}>自动关联歌词</Button>\n          <Popconfirm\n              placement=\"topLeft\"\n              title=\"清空数据库就无法恢复哦，谨慎操作\"\n              onConfirm={handleClear}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <Button style={{marginLeft: '30px'}}>清空数据库</Button>\n            </Popconfirm>\n          <p className=\"tips\">关联规则: 当前歌曲没有歌词，同时可以找到歌词名，包含完整歌曲名</p>\n        </section>\n      </section>\n      <section className=\"local-content\">\n        <Tabs activeKey={key} onChange={tabCallback}>\n        <TabPane tab=\"专辑列表\" key=\"album\">\n            <AlbumList />\n          </TabPane>\n          <TabPane tab=\"音乐列表\" key=\"music\">\n            <MusicList />\n          </TabPane>\n          <TabPane tab=\"歌词列表\" key=\"lrc\">\n            <LrcList />\n          </TabPane>\n        </Tabs>\n      </section>\n    </section>\n  )\n}\n\nexport default Locale","import React from \"react\"\n// import * as musicMetadata from 'music-metadata-browser'\n\n// 用来测试线上播放的数据\n\n// const online = {\n//   name: '寻找周杰伦',\n//   url: 'http://127.0.0.1:8887/%E5%85%AB%E5%BA%A6%E7%A9%BA%E9%97%B4/08.%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB.flac',\n//   lrc: 'http://127.0.0.1:8887/%E5%85%AB%E5%BA%A6%E7%A9%BA%E9%97%B4/%E5%91%A8%E6%9D%B0%E4%BC%A6%20-%20%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB.lrc'\n// };\n\n//  musicMetadata.fetchFromUrl(online.url).then(res => {\n//   console.log(res)\n// })\n\n// console.log(online)\n\nconst Love = () => {\n  return (\n    <p>测试在线音乐播放</p>\n  )\n}\n\nexport default Love","import React from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport Player from '../Components/Player';\nimport Locale from '../Local';\nimport Love from '../Love';\nimport './index.scss'\nconst Home = () => {\n\n  return (\n    <section className=\"page-home\">\n      <section className=\"wrapper-box\">\n        <section className=\"nav\">\n          <p className=\"nav-item\">\n            <NavLink to=\"/\">本地音乐</NavLink>\n          </p>\n          <p className=\"nav-item\">\n            <NavLink to=\"/like\" exact>在线音乐</NavLink>\n          </p>\n        </section>\n        <section className=\"music-box\">\n          <Switch>\n            <Route path=\"/like\" exact>\n              <Love />\n            </Route>\n            <Route path=\"/\" exact>\n              <Locale />\n            </Route>\n          </Switch>\n        </section>\n      </section>\n      <Player />\n    </section>\n  );\n}\n\nexport default Home\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './Home';\nimport './App.scss'\n\n// function PrivateRoute({ children, ...rest }: any) {\n//   return (\n//     <Route\n//       {...rest}\n//       render={({ location }) =>\n//       common.timeDate.isBegin ? (\n//           children\n//         ) : (\n//           <Redirect\n//             to={{\n//               pathname: \"/\",\n//               state: { from: location }\n//             }}\n//           />\n//         )\n//       }\n//     />\n//   );\n// }\n\n\nfunction App() {\n  return (\n    <section className=\"hzfe-music\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"*\" exact>\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport localforage from 'localforage';\nimport { ConfigProvider } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport './common.less'\nimport './index.scss';\n\nlocalforage.config({\n  name: 'HZFE-MUSIC',\n});\n\n\n\nReactDOM.render(\n  <ConfigProvider locale={zh_CN}>\n    <App />\n  </ConfigProvider>,\n  // <React.StrictMode>\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}