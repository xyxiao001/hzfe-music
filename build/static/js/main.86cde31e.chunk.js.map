{"version":3,"sources":["utils/index.ts","Components/Lrc/index.tsx","Components/Progress/index.tsx","utils/local.ts","store/common.ts","Components/Control/index.tsx","Components/Lrc/Lrc-word.tsx","Components/Player/index.tsx","config.ts","Components/Upload/index.tsx","Components/LrcList/index.tsx","Components/Playing-icon/index.tsx","Components/MusicList/index.tsx","Local/index.tsx","Love/index.tsx","Home/index.tsx","App.tsx","index.tsx"],"names":["loadFile","file","a","isBuffer","Promise","resolve","reject","reader","FileReader","onload","event","target","result","Blob","onerror","readAsArrayBuffer","readAsText","uint8arrayToBase64","u8Arr","slice","index","length","subarray","Math","min","String","fromCharCode","apply","btoa","formatTime","secs","minutes","floor","seconds","transformArrayToTime","str","timeArr","exec","map","item","Number","Lrc","props","useState","lrcList","setLrcList","lrcIndex","setLrcIndex","lrcScroll","useRef","canScroll","setCanScroll","lineHeight","setLineHeight","useEffect","lrc","lrc_s","lyric","replace","match","p1","split","res","lyricLen","i","lrcTimes","lrcText","timeLen","j","lrcTime","push","time","text","filter","sort","b","formatLrc","getChooseLrcIndex","currentTime","setCurrentLrc","isPlaying","current","top","scrollTo","behavior","getLrcChooseName","resize","document","body","offsetHeight","window","addEventListener","removeEventListener","className","ref","onMouseEnter","onMouseLeave","lrcItem","key","style","color","Progress","value","setValue","isChanging","setIsChanging","range","defaultValue","onChange","setChange","handleChanging","onAfterChange","tooltipVisible","addLrc","localforage","getItem","list","every","fileName","setItem","getLrcList","addMusic","musicInfo","blob","musicHash","random","Date","now","id","removeMusic","removeItem","getMusicList","getMusicInfoFromLocal","cur","music","lrcKey","forEach","content","removeLrc","common","handlePlay","console","log","updatedMusicData","musicPlayer","seek","duration","playing","change","handlePause","handleEnd","requestAnimationFrame","handlePlaying","handleNextMusic","handleStop","musicData","type","stop","len","musicPlayList","next","play","handlePreMusic","pre","localMusicLrcList","url","this","preUrl","URL","revokeObjectURL","createObjectURL","updatePreUrl","Howl","autoplay","src","html5","format","code","codec","toLowerCase","fileType","volume","onplay","onpause","onend","onstop","data","picture","process","hasOwnProperty","classList","remove","add","setTimeout","observable","action","loop","localMusicLoading","localMusicList","updateMusicPlayList","cloneDeep","message","success","updateLocalMusicList","error","localMusicLrcLoading","updateLocalMusicLrcList","musicColor","documentElement","setProperty","Control","setRange","allTime","currentInfo","musicPlayingInfo","onClick","StepBackwardOutlined","PauseCircleOutlined","PlayCircleOutlined","StepForwardOutlined","toFixed","LrcWord","backgroundImage","bg","setBg","lineTime","start","end","formatLrcProgress","getChooseLrcWordIndex","join","progress","wordIndex","getWordLineProgress","word","fac","FastAverageColor","Player","observer","currentLrc","refChange","setChangeFromControl","getInfoFormLocal","useCallback","handelPlay","pause","getMusicInfo","info","updatedMusicInfo","getColorAsync","then","updateMusicColor","setSaturation","setLightness","rgba","catch","e","keyDown","preventDefault","keyCode","handelChangeSize","createdPlayer","destroyPlayer","alt","name","artist","album","DownOutlined","supportMusicFormat","supportMusicLrcFormat","UploadFile","handleMusicData","File","nameList","FileType","FileName","musicMetadata","warning","obj","get","albumartist","artists","comment","date","sampleRate","fileSize","filesize","size","handleMusicLrc","beforeUpload","includes","showUploadList","accept","arr","concat","acceptStr","multiple","icon","UploadOutlined","LrcList","columns","title","dataIndex","sorter","render","_","row","placement","onConfirm","handleDelete","okText","cancelText","loading","deleteLrc","dataSource","pagination","rowKey","PlayingIcon","MusicList","width","handlePauseClick","handlePlayClick","deleteMusic","TabPane","Tabs","Locale","history","useHistory","query","URLSearchParams","useLocation","search","params","setKey","handleRelated","musicList","activeKey","pathname","tab","Love","Home","to","exact","path","Local","App","config","ReactDOM","locale","zh_CN","getElementById"],"mappings":"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","file":"static/js/main.86cde31e.chunk.js","sourcesContent":["import { get } from \"lodash\"\nimport { InterfaceLrc, InterfaceLrcWord, InterfaceMusicInfo } from \"../Interface/music\"\n\n// 上次文件转化函数\nexport const loadFile = async (file: File, isBuffer = true): Promise<any> => {\n  if (!file) {\n    return ''\n  }\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event: Event) => {\n      const target = event.target as FileReader\n      if (isBuffer) {\n        resolve(target.result ? new Blob([target.result]) : null)\n      } else {\n        resolve(target.result)\n      }\n    }\n    reader.onerror = reject\n    // 转化为blob\n    if (isBuffer) {\n      reader.readAsArrayBuffer(file)\n    } else {\n      reader.readAsText(file)\n    }\n  })\n}\n\n// 格式化歌曲信息保存\nexport const transformMusicInfo = (obj: any): InterfaceMusicInfo => {\n  const result: InterfaceMusicInfo = {\n    // 歌曲名\n    name: get(obj, 'common.title', ''),\n    // 专辑名\n    album: get(obj, 'common.album', ''),\n    // 专辑主导艺人\n    albumartist: get(obj, 'common.albumartist', ''),\n    // 专辑艺人\n    artist: get(obj, 'common.artist', ''),\n    // 专辑艺人列表\n    artists: get(obj, 'common.artists', []),\n    // 专辑备注: \n    comment: get(obj, 'common.comment', []),\n    // 歌曲时间\n    date: get(obj, 'common.date', 0),\n    // 歌曲图片\n    picture: get(obj, 'common.picture', []).map((item: any) => {\n      return `data:${item.format};base64,${uint8arrayToBase64(item.data)}`\n    }),\n    // 编码方式\n    codec: get(obj, 'format.codec', ''),\n    // 歌曲时长\n    duration: get(obj, 'format.duration', 0),\n    // 歌曲采样率\n    sampleRate: get(obj, 'format.sampleRate', ''),\n    // 对应的歌词信息 key\n    lrc: ''\n  }\n  return result\n}\n\n\nexport const uint8arrayToBase64 = (u8Arr: { length: any; subarray: (arg0: number, arg1: number) => any }): string => {\n  let CHUNK_SIZE = 0x8000; //arbitrary number\n  let index = 0;\n  let length = u8Arr.length;\n  let result = '';\n  let slice;\n  while (index < length) {\n    slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\n    result += String.fromCharCode.apply(null, slice);\n    index += CHUNK_SIZE;\n  }\n  return btoa(result);\n}\n\n// 歌词解析算法 - 逐行解析的歌词\nexport const formatLrc = (lrc: string): InterfaceLrc[] => {\n  // ti: 歌曲标题  ar: 歌唱者  al:  唱片集\n  // 格式  [00:01.01]七里香 - 周杰伦   或者 [01:20.64][01:47.80][02:41.96][03:35.77]雨下整夜我的爱溢出就像雨水\n\n  // 如果两个数组中间有文字 类似[01:20.64]我[01:47.80] 表示这个是是单字解析的歌词，那么我们就进行二次加工处理\n  let lrc_s = lrc\n  if (lrc_s) {\n    lrc_s = lrc_s.replace(/([^\\]^\\n])\\[/g, (match, p1) => p1 + '\\n[');\n    const lyric = lrc_s.split('\\n');\n    let res = [];\n    const lyricLen = lyric.length;\n    for (let i = 0; i < lyricLen; i++) {\n      // match lrc time\n      const lrcTimes = lyric[i].match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g);\n      // match lrc text\n      const lrcText = lyric[i]\n        .replace(/.*\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g, '')\n        .replace(/<(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?>/g, '')\n        .replace(/^\\s+|\\s+$/g, '');\n\n      if (lrcTimes) {\n        // handle multiple time tag\n        const timeLen = lrcTimes.length;\n        for (let j = 0; j < timeLen; j++) {\n          const lrcTime = transformArrayToTime(lrcTimes[j])\n          res.push({\n            time: lrcTime,\n            text: lrcText\n          });\n        }\n      }\n    }\n    // sort by time\n    res = res.filter((item: InterfaceLrc) => item.text);\n    res.sort((a: InterfaceLrc, b: InterfaceLrc) => a.time - b.time);\n    return res;\n  } else {\n    return [];\n  }\n}\n\n// 格式化时间显示\nexport const formatTime = (secs: number): string => {\n  const minutes = Math.floor(secs / 60) || 0;\n  const seconds = ~~(secs - minutes * 60) || 0;\n  return (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\n}\n\n// 返回当前歌词选中的索引\nexport const getChooseLrcIndex = (lrcList: InterfaceLrc[], time: number): number => {\n  if (lrcList.length <= 0) return -1\n  let index = 0\n  // 如果比当前时间小，那么聚焦当前时间\n  while (index < lrcList.length) {\n    if (lrcList[index].time > time) {\n      break\n    }\n    index++\n  }\n  return index - 1\n}\n\n// 歌词解析算法 - 逐行-分字解析歌词\nexport const formatLrcProgress = (lrc: string): InterfaceLrcWord[][] => {\n  let res: any[] = []\n  console.log('进入逐字解析的歌词哦')\n  // 逐字的歌词 ->  每行开始时间， 每个字开始时间 -> 计算百分比进行每个字覆盖\n  // 先按照 \\n 进行换行处理，然后正则提出每个字的时间，然后计算出每行的开始时间\n  let lrcStr = lrc\n  const lyric = lrcStr.split('\\n')\n  let i = 0\n  while (i < lyric.length) {\n    let cur = lyric[i].replace(/\\s/g, '')\n    const lrcTimes = cur.match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g)\n    const lrcText = cur.match(/(?<=\\])\\S\\s?(?=\\[)/g)\n    if (lrcTimes && lrcText) {\n      // console.log(lrcTimes, lrcText)\n      // 时间是 [[00:32.27], [00:32.27]] 数组，  子也是数组\n      // 数据结构，每个字开始时间和结束时间 start = j + 1    end j - 1\n      const lineTime = []\n      for (let j = 0; j < lrcText.length; j++) {\n        lineTime.push({\n          text: lrcText[j],\n          start: transformArrayToTime(lrcTimes[j]),\n          end: transformArrayToTime(lrcTimes[j + 1])\n        })\n      }\n      res.push(lineTime)\n    }\n    i++\n  }\n  return res\n}\n\n// 转换时间 [00:42.27] -> 11ms\nexport const transformArrayToTime = (str: string): number => {\n  let time = 0\n  const timeArr: number[] = /\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/.exec(str)?.map(item => {\n    return item ? Number(item) : 0\n  }) || []\n  const min2sec = timeArr[1] * 60;\n  const sec2sec = timeArr[2];\n  const msec2sec = timeArr[4] ? timeArr[4] / ((timeArr[4] + '').length === 2 ? 100 : 1000) : 0;\n  time = min2sec + sec2sec + msec2sec;\n  return time\n}\n\n// 获取逐字歌词的当前行\nexport const getChooseLrcWordIndex = (lrcList: InterfaceLrcWord[][], time: number): number => {\n  if (lrcList.length <= 0) return -1\n  let index = 0\n  // 如果比当前时间小，那么聚焦当前时间\n  while (index < lrcList.length) {\n    if (lrcList[index][0].start > time) {\n      break\n    }\n    index++\n  }\n  return index - 1\n}\n\n\n// 获取逐字歌词的当前行的百分比\nexport const getWordLineProgress = (lrcItem: InterfaceLrcWord[], time: number): number => {\n  if (!lrcItem) return 0\n  let progress = 0\n  // 看看在当前时间的哪个字，同时看看占比当前时间间隙的百分比\n  let wordIndex = 0\n  // 如果比当前字小，那么聚焦上一个字\n  while (wordIndex < lrcItem.length) {\n    if (lrcItem[wordIndex].start > time) {\n      break\n    }\n    wordIndex++\n  }\n  if (wordIndex <= 0) return 0\n  if (wordIndex >= lrcItem.length) return 100\n  // 知道哪个字后, 看看一共多少字，然后分百分比，这里从 0 开始，实际少了一个字\n  progress = wordIndex * (100 / lrcItem.length)\n  // 如果当前时间比字结束时间大，那么是 100%\n  const cur = lrcItem[wordIndex - 1]\n  if (time >= cur.end) {\n    return 100\n  }\n  if (time <= cur.start) {\n    return (wordIndex - 1) * (100 / lrcItem.length)\n  }\n  const len = cur.end - cur.start\n  progress += (time - cur.start) / len * (100 / lrcItem.length)\n  return progress\n}\n\n// 滚动函数\nexport const goScroll = (top: number, target: HTMLElement) => {\n  let requestAnimationFrame: any = null\n  if (window.requestAnimationFrame) {\n    requestAnimationFrame = window.requestAnimationFrame\n  } else {\n    requestAnimationFrame = setTimeout((fn) => {\n      fn()\n    }, 17)\n  }\n  // 当前时间\n  let t = 0\n  // 初始值\n  const b = target.scrollTop\n  // 变化量\n  const c = top - b\n\n  // 如果变化量太大，直接终止\n  if (Math.abs(c) > 200) {\n    target.scrollTo({\n      top,\n      behavior: 'smooth'\n    })\n    return\n  }\n  // 持续时间\n  const d = 32\n  const step = () => {\n    let top = Tween.Linear(t, b, c, d)\n    target.scrollTo({\n      top\n    })\n    t += 1\n    if (t <= d) {\n      requestAnimationFrame(step)\n    }\n  }\n  step()\n}\n// 运动\nconst Tween = {\n  Linear: function (t: number, b: number, c: number, d: number): number {\n    return c * t / d + b;\n  },\n  QuadIn: function (t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t + b;\n  },\n  QuadOut: function (t: number, b: number, c: number, d: number): number {\n    return -c * (t /= d) * (t - 2) + b;\n  },\n  QuadInOut: function (t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n  },\n  CubicIn: function (t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t + b;\n  }\n}\n\n// 返回音乐播放格式\nexport const getFormatCode = (code: string) => {\n  if (code === 'mpeg 1 layer 3') return 'mp3'\n  return code\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport { InterfaceLrc, InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatLrc, getChooseLrcIndex } from \"../../utils\"\nimport './index.scss'\nconst Lrc = (props: {\n  lrc: string,\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  setCurrentLrc: Function,\n  color?: string\n}) => {\n  // 保存当前渲染的歌词列表\n  const [lrcList, setLrcList] = useState<InterfaceLrc[]>([])\n\n  // 需要渲染的歌词\n  const [lrcIndex, setLrcIndex] = useState(-1)\n\n  // 歌词滚动容器\n  const lrcScroll = useRef(null);\n\n  // 当前是否可以进行歌词的自动滚动\n  const [canScroll, setCanScroll] = useState(true)\n\n  // 当前每行滚动的高度\n  const [lineHeight, setLineHeight] = useState(0)\n\n  const topLine = 1\n   \n  useEffect(() => {\n    setLrcList(formatLrc(props.lrc))\n  }, [props.lrc])\n\n  useEffect(() => {\n    setLrcIndex(\n      getChooseLrcIndex(lrcList, props.currentTime)\n    )\n    if (lrcList.length && lrcList[lrcIndex]) {\n      props.setCurrentLrc(lrcList[lrcIndex].text)\n    }\n  }, [lrcIndex, lrcList, props, props.currentTime])\n\n  useEffect(() => {\n    if (lrcScroll && canScroll && props.isPlaying) {\n      // 计算当前歌词应该需要滚动的场景\n      const target: any = lrcScroll.current\n      const top = lineHeight * (lrcIndex - topLine) || 0\n      if (target) {\n        target.scrollTo({\n          top,\n          behavior: 'smooth'\n        })\n        // goScroll(top, target)\n      }\n    }\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\n\n  const getLrcChooseName = (index: number) => {\n    // 这里处理下其他的, 最近 10 条显示\n    if(lrcIndex === index) {\n      return 'choose-lrc'\n    }\n    // // 下面 10 条\n    // if (lrcIndex < index && (index - lrcIndex) < 10) {\n    //   return `choose-next-${index - lrcIndex}`\n\n    // }\n    // // 上面 5 条\n    // if (lrcIndex > index && (lrcIndex - index) < 5) {\n    //   return `choose-pre-${lrcIndex - index}`\n    // }\n    return ''\n  }\n  \n  const resize = () => {\n    // 浏览器高除以 高度 + \n    setLineHeight(document.body.offsetHeight * (5 + 2.5) / 100)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n    return () => {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  return (\n    <section className=\"music-lrc\"\n      ref={lrcScroll}\n      onMouseEnter={() => {\n        setCanScroll(false)\n      }}\n      onMouseLeave={() => {\n        if (!props.isPlaying) {\n          setCanScroll(true)\n          return\n        }\n        const target: any = lrcScroll.current\n        const top = lineHeight * (lrcIndex - topLine) || 0\n        if (target) {\n          target.scrollTo({\n            top,\n            behavior: 'auto'\n          })\n        }\n        setCanScroll(true)\n      }}>\n      {/* 渲染歌词列表 */}\n      <section className=\"lrc-list\">\n        {\n          lrcList.map((lrcItem: InterfaceLrc, index) => (\n            <p \n              key={ `${lrcItem.time}${lrcIndex}${lrcItem.text}`}\n              style={{\n                color: lrcIndex === index ? props.color : ''\n              }}\n              className={getLrcChooseName(index)}\n            >\n              { lrcItem.text}\n            </p>\n          ))\n        }\n      </section>\n    </section>\n  )\n}\n\nexport default Lrc","import React, { useEffect, useState } from \"react\"\nimport './index.scss'\nimport { Slider } from 'antd';\n\nconst Progress = (props: {\n  range: number,\n  handleChanging: Function,\n  setChange: Function,\n}) => {\n\n  const [value, setValue] = useState(0)\n\n  const [isChanging, setIsChanging] = useState(false)\n\n\n  useEffect(() => {\n    if (!isChanging) {\n      setValue(props.range)\n    }\n  }, [isChanging, props.range])\n\n  const onChange = (value: number) => {\n    setIsChanging(true)\n    props.setChange(true)\n    setValue(value)\n    props.handleChanging(value)\n  }\n\n  const onAfterChange = (value: number) => {\n    // 已经取消拖动，可以同步跳转了\n    // console.log('afterChange', value)\n    props.setChange(false)\n    setIsChanging(false)\n  }\n\n  return (\n    <section className=\"progress\">\n       <Slider defaultValue={0} value={value} onChange={onChange} onAfterChange={onAfterChange} tooltipVisible={false} />\n    </section>\n  )\n}\n\nexport default Progress","/**\n * 所有对数据操作的集合，包括存储数据， 查询数据\n * \n * 1. 歌曲的储存方式\n *   MusicList  InterfaceMusicInfo  \n *   id -> 名称生成的hash 值\n *   lrc ->   歌词，在列表进行操作关联\n *   music -> 歌曲的 blob，播放时进行查询关联\n *    \n * \n *   music-名称生成的hash 值, 随机储存, 播放通过歌曲信息的 hash 值获取具体文件流\n * \n *   LrcList  InterfaceLrcInfo  id -> 名称生成的hash 值, 文件本身存在列表里面\n * \n */\n\nimport localforage from 'localforage'\nimport { InterfaceLrcInfo, InterfaceMusicInfo } from '../Interface/music'\n\n /**\n  * 添加歌词的存储方法\n  * key: music-lrc-list\n  */\n export const addLrc = async (lrc: InterfaceLrcInfo):Promise<any> => {\n    const key = 'music-lrc-list'\n    // 歌词，直接拉出列表，然后塞进去，储存\n    const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\n    // 这里需要判断下是否已经存在\n    let noExist = list.every(item => item.fileName !== lrc.fileName)\n    if (noExist) {\n      list.push(lrc)\n    }\n    return localforage.setItem('music-lrc-list', list)\n}\n\n// 获取歌词列表\nexport const getLrcList = async ():Promise<InterfaceLrcInfo[]>  => {\n  const key = 'music-lrc-list'\n  const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\n  return list\n}\n\n/**\n * 添加歌曲列表方法\n * music-list\n * 具体流地址 music-名称生成的hash 值\n */\n\nexport const addMusic = async (musicInfo: InterfaceMusicInfo, blob: Blob):Promise<any> => {\n  const key = 'music-list'\n  // 歌词，直接拉出列表，然后塞进去，储存\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n  // 这里需要判断下是否已经存在\n  let noExist = list.every(item => item.fileName !== musicInfo.fileName)\n  if (noExist) {\n    // 这里需要去存储文件流\n    const musicHash = `${musicInfo.fileName}-${Math.random() * 100}-${Date.now()}`\n    musicInfo.id = musicHash\n    await localforage.setItem(musicHash, blob)\n    list.push(musicInfo)\n  }\n  return localforage.setItem('music-list', list)\n}\n\n// 通过 id 删除歌曲\nexport const removeMusic = async (id: string):Promise<Boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const key = 'music-list'\n      // 拉出歌曲列表\n      let list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n      list = list.filter(item => item.id !== id)\n      await localforage.setItem('music-list', list)\n      await localforage.removeItem(id)\n      resolve(true)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 获取歌曲列表\nexport const getMusicList = async ():Promise<InterfaceMusicInfo[]>  => {\n  const key = 'music-list'\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n  return list\n}\n\n// 获取单首歌词信息\nexport const getMusicInfoFromLocal = async (id: string): Promise<InterfaceMusicInfo> => {\n  return new Promise(async (resolve, reject) => {\n    const list = await localforage.getItem('music-list') as InterfaceMusicInfo[] || []\n    const cur = list.filter((item: InterfaceMusicInfo) => item.id === id)[0]\n    if (!cur) {\n      reject('获取歌曲信息失败')\n    } else {\n      cur.music = await localforage.getItem(id)  as Blob\n      if (cur.lrcKey) {\n         const lrcList = await getLrcList()\n         lrcList.forEach(item => {\n           if (item.fileName === cur.lrcKey) {\n            cur.lrc = item.content\n           }\n         })\n      }\n      resolve(cur)\n    }\n  })\n} \n\n// 通过 id 删除歌词\nexport const removeLrc = async (id: string):Promise<Boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const key = 'music-lrc-list'\n      // 拉出歌词列表\n      let list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n      list = list.filter(item => item.fileName !== id)\n      await localforage.setItem('music-lrc-list', list)\n      resolve(true)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 自动关联歌曲歌词\nexport const MusicRelatedLrc = (): Promise<string> => {\n  return new Promise(async(resolve, reject) => {\n    try {\n      let musicList = await getMusicList()\n      const lrcList = await getLrcList()\n      musicList = musicList.map((item: InterfaceMusicInfo) => {\n        lrcList.forEach((lrc: InterfaceLrcInfo) => {\n          if (lrc.fileName.includes(item.name)) {\n            item.lrcKey = lrc.fileName\n          }\n        })\n        return item\n      })\n      // console.log(musicList)\n      await localforage.setItem('music-list', musicList)\n      resolve('success')\n    } catch (error) {\n      reject(error)\n    }\n  })\n}","import { observable, action } from 'mobx';\nimport { InterfaceLrcInfo, InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../Interface/music';\nimport { Howl } from 'howler'\nimport { getLrcList, getMusicList, removeLrc, removeMusic, } from '../utils/local';\nimport { getFormatCode } from '../utils';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nclass Common {\n  @observable\n  preUrl: string = ''\n\n  @action\n  updatePreUrl (url: string) {\n    this.preUrl = url\n  }\n  \n  // 音乐播放实例\n  @observable\n  musicPlayer: Howl | null = null\n\n  @action\n  createdPlayer () {\n    if (this.musicInfo) {\n      this.updatedMusicData({\n        playing: false,\n      })\n      if (this.preUrl) {\n        URL.revokeObjectURL(this.preUrl)\n      }\n      const url = URL.createObjectURL(this.musicInfo.music)\n      this.updatePreUrl(url)\n      this.musicPlayer = new Howl({\n        autoplay: true,\n        src: url,\n        html5: true,\n        format: [getFormatCode(this.musicInfo.codec.toLowerCase() || String(this.musicInfo.fileType).toLowerCase())],\n        volume: 1,\n        onplay: this.handlePlay,\n        onpause: this.handlePause,\n        onend: this.handleEnd,\n        onstop: this.handleStop\n      })\n    }\n  }\n\n  handlePlay = () => {\n    console.log('歌曲播放了')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      duration: this.musicPlayer?.duration(),\n      playing: true,\n      change: false\n    })\n    if (this.musicInfo && !this.musicInfo.duration) {\n      this.musicInfo.duration = Number(this.musicPlayer?.duration())\n    }\n  }\n\n  handlePause = () => {\n    console.log('歌曲暂停了')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n  }\n\n  handleEnd = () => {\n    console.log('歌曲播放完了')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n    requestAnimationFrame(this.handlePlaying)\n    this.handleNextMusic()\n  }\n\n  handleStop = () => {\n    console.log('歌曲停止')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n  }\n\n  handlePlaying = () => {\n    if (!this.musicData.change && this.musicPlayer && this.musicPlayer.playing()) {\n      this.updatedMusicData({\n        type: 'update',\n        currentTime: this.musicPlayer.seek()\n      })\n      requestAnimationFrame(this.handlePlaying)\n    }\n  }\n\n  @action\n  destroyPlayer () {\n    this.musicPlayer = null\n  }\n\n\n  @observable\n  musicInfo: InterfaceMusicInfo | null = null\n\n  @action\n  updatedMusicInfo (data: InterfaceMusicInfo) {\n    if (data.picture.length === 0) {\n      data.picture = [`${process.env.PUBLIC_URL}/images/music-no.jpeg`]\n    }\n    this.musicInfo = data\n  }\n  \n \n\n  // 当前音乐播放的数据\n  @observable\n  musicData: InterfaceMusicPlayingInfo  = {\n    id: '',\n    playing: false,\n    duration: 0,\n    currentTime: 0,\n    change: false,\n    min: true\n  }\n\n  @action\n  updatedMusicData (data: any) {\n    if (data.type === 'update') {\n      this.musicData.currentTime = data.currentTime\n      return\n    }\n    // 判断 body 样式\n    if (data.hasOwnProperty('min')) {\n      if (data.min) {\n        document.body.classList.remove('dialog-screen')\n      } else {\n        document.body.classList.add('dialog-screen')\n      }\n    }\n    if (!data.change) {\n      setTimeout(() => {\n        requestAnimationFrame(this.handlePlaying)\n      }, 100)\n    }\n    this.musicData = {\n      ...this.musicData,\n      ...data\n    }\n  }\n\n  // 播放器状态\n  @observable\n  musicPlayerStats = {\n    // 播放器循环状态  单曲播放 single, 随机 random 顺序播放 order\n    loop: 'random'\n  }\n  \n  // 播放下一首，上一首功能实现\n  @observable\n  musicPlayList: InterfaceMusicInfo[] = []\n\n  @action\n  updateMusicPlayList = (list: InterfaceMusicInfo[]) => {\n    this.musicPlayList = list\n  }\n\n  // 歌曲播放下一首\n  handleNextMusic = () => {\n    if (this.musicPlayer) {\n      this.musicPlayer.stop()\n    }\n    let cur = 0\n    const len = this.musicPlayList.length - 1\n    while (cur < this.musicPlayList.length) {\n      if (this.musicPlayList[cur].id === this.musicData.id) {\n        break\n      }\n      cur++\n    }\n    // 防止超出下一首\n    let next = cur + 1\n    next = next > len ? (next - len) - 1 : next\n    if (this.musicPlayList[next].id === this.musicData.id) {\n      this.musicPlayer?.play()\n    } else {\n      common.updatedMusicData({\n        id: this.musicPlayList[next].id\n      })\n    }\n  }\n\n  // 歌曲播放上一首\n  handlePreMusic = () => {\n    if (this.musicPlayer) {\n      this.musicPlayer.stop()\n    }\n    let cur = 0\n    const len = this.musicPlayList.length - 1\n    while (cur < this.musicPlayList.length) {\n      if (this.musicPlayList[cur].id === this.musicData.id) {\n        break\n      }\n      cur++\n    }\n    // 防止低于 0\n    let pre = cur - 1\n    pre = pre < 0 ? len : pre\n    if (this.musicPlayList[pre].id === this.musicData.id) {\n      this.musicPlayer?.play()\n    } else {\n      common.updatedMusicData({\n        id: this.musicPlayList[pre].id\n      })\n    }\n  }\n\n  // 本地音乐展示列表\n  @observable\n  localMusicList: InterfaceMusicInfo[] = []\n  @observable\n  localMusicLoading: boolean = false\n\n  @action\n  updateLocalMusicList = async () => {\n    this.localMusicLoading = true\n    this.localMusicList = await getMusicList()\n    // 用来做播放列表更新\n    this.updateMusicPlayList(cloneDeep(this.localMusicList))\n    this.localMusicLoading = false\n  }\n\n  // 删除歌曲, 操作列表删除当前歌曲，同时删除歌曲文件流\n  @action deleteMusic = async (id: string) => {\n    try {\n      await removeMusic(id)\n      message.success('删除成功')\n      this.updateLocalMusicList()\n    } catch (error) {\n      console.log(error)\n      message.error('删除失败')\n    }\n  }\n\n\n  // 本地歌词展示列表\n  localMusicLrcList: InterfaceLrcInfo[] = []\n  @observable\n  localMusicLrcLoading: boolean = false\n\n  @action\n  updateLocalMusicLrcList = async () => {\n    this.localMusicLrcLoading = true\n    this.localMusicLrcList = await getLrcList()\n    this.localMusicLrcLoading = false\n  }\n\n  // 删除歌曲, 操作列表删除当前歌曲，同时删除歌曲文件流\n  @action deleteLrc = async (id: string) => {\n    try {\n      await removeLrc(id)\n      message.success('删除成功')\n      this.updateLocalMusicLrcList()\n    } catch (error) {\n      console.log(error)\n      message.error('删除失败')\n    }\n  }\n\n  // 音乐播放时修改全局主题色\n  @observable\n  musicColor = '#1890ff'\n\n  @action\n  updateMusicColor = (color: string) => {\n    this.musicColor = color\n    document.documentElement.style.setProperty('--primary-color', color)\n  }\n}\n\nconst common = new Common()\n\n\n \nexport default common\n\n","import React, { useEffect, useState } from 'react';\nimport './index.scss'\nimport { InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../../Interface/music';\nimport { formatTime } from '../../utils';\nimport Progress from '../Progress';\nimport { PauseCircleOutlined, PlayCircleOutlined, StepBackwardOutlined, StepForwardOutlined } from '@ant-design/icons';\nimport common from '../../store/common';\nconst Control = (props: {\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  handlePlay: Function,\n  handlePause: Function,\n  handleChanging: Function,\n  setChange: Function,\n  musicPlayingInfo: InterfaceMusicPlayingInfo,\n  min?: Boolean\n}) => {\n\n  const [range, setRange] = useState(0)\n\n  useEffect(() => {\n    const allTime = props.currentInfo?.duration || props.musicPlayingInfo.duration || 0\n    setRange(\n      (props.currentTime / allTime) * 100\n    )\n  }, [props.currentInfo, props.currentTime, props.musicPlayingInfo.duration])\n\n  return (\n    <section className=\"player-control\">\n      {\n        props.min ? (\n          <section className=\"control-min\">\n            <section className=\"control-icon-list\">\n              <p onClick={common.handlePreMusic}>\n                <StepBackwardOutlined />\n              </p>\n              <p className=\"icon-play-bg\" onClick={\n                () => {\n                  if (props.isPlaying) {\n                    props.handlePause()\n                  } else {\n                    props.handlePlay()\n                  }\n                }\n              }>\n                {\n                  props.isPlaying ? (\n                    <PauseCircleOutlined />\n                  ) : (\n                    <PlayCircleOutlined />\n                    )\n                }\n              </p>\n              <p onClick={common.handleNextMusic}>\n                <StepForwardOutlined />\n              </p>\n            </section>\n            <section className=\"control-progress\">\n              <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\n              {/* <span>歌曲进度百分比: { range.toFixed(2) }%</span> */}\n            </section>\n            <section className=\"line-left\">\n              <span> {formatTime(props.currentTime || 0)} </span>\n              <span>/</span>\n              <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\n            </section>\n          </section>\n        ) : (\n            <section className=\"control\">\n              <section className=\"control-progress\">\n                <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\n                {/* <span>歌曲进度百分比: { range.toFixed(2) }%</span> */}\n              </section>\n              <section className=\"control-line\">\n                <section className=\"line-left\">\n                  <span> {formatTime(props.currentTime || 0)} </span>\n                  <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\n                </section>\n                <section className=\"line-center\">\n                <section className=\"control-icon-list\">\n                  <p onClick={common.handlePreMusic}>\n                    <StepBackwardOutlined />\n                  </p>\n                  <p className=\"icon-play-bg\" onClick={\n                    () => {\n                      if (props.isPlaying) {\n                        props.handlePause()\n                      } else {\n                        props.handlePlay()\n                      }\n                    }\n                  }>\n                    {\n                      props.isPlaying ? (\n                        <PauseCircleOutlined />\n                      ) : (\n                        <PlayCircleOutlined />\n                      )\n                    }\n                  </p>\n                  <p onClick={common.handleNextMusic}>\n                    <StepForwardOutlined />\n                  </p>\n            </section>\n                </section>\n              </section>\n            </section>\n          )\n      }\n\n    </section>\n  )\n}\n\nexport default Control","import React, { useEffect, useRef, useState } from \"react\"\nimport { InterfaceLrcWord, InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatLrcProgress, getChooseLrcWordIndex, getWordLineProgress} from \"../../utils\"\nimport './index-word.scss'\n// 逐字渲染的歌词\n\nconst LrcWord = (props: {\n  lrc: string,\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  setCurrentLrc: Function,\n  color?: string\n}) => {\n  // 保存当前渲染的歌词列表\n  const [lrcList, setLrcList] = useState<InterfaceLrcWord[][]>([])\n\n  // 需要渲染的歌词\n  const [lrcIndex, setLrcIndex] = useState(-1)\n\n  // 歌词滚动容器\n  const lrcScroll = useRef(null);\n\n  // 当前是否可以进行歌词的自动滚动\n  const [canScroll, setCanScroll] = useState(true)\n\n  // 当前进度\n  const [bg, setBg] = useState({\n    backgroundImage: ''\n  })\n\n  // 当前每行滚动的高度\n  const [lineHeight, setLineHeight] = useState(0)\n\n  const topLine = 1\n   \n  useEffect(() => {\n    setLrcList(formatLrcProgress(props.lrc))\n  }, [props.lrc])\n\n  useEffect(() => {\n    setLrcIndex(\n      getChooseLrcWordIndex(lrcList, props.currentTime)\n    )\n    if (lrcList[lrcIndex] && lrcList[lrcIndex].length) {\n      const text = lrcList[lrcIndex].map(item => {\n        return item.text\n      })\n      props.setCurrentLrc(text.join(''))\n    }\n    const key = getWordLineProgress(lrcList[lrcIndex], props.currentTime)\n    setBg(\n      {\n        backgroundImage: `-webkit-linear-gradient(left,${props.color} ${key}%,#ffffff ${key}%)`\n      }\n    )\n  }, [lrcIndex, lrcList, props, props.currentTime])\n\n  useEffect(() => {\n    if (lrcScroll && canScroll && props.isPlaying) {\n      // 计算当前歌词应该需要滚动的场景\n      const target: any = lrcScroll.current\n      const top = lineHeight * (lrcIndex - topLine) || 0\n      if (target) {\n        target.scrollTo({\n          top,\n          behavior: 'smooth'\n        })\n      }\n    }\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\n\n  const getLrcChooseName = (index: number) => {\n    return lrcIndex === index ? 'choose-lrc-line' : ''\n  }\n\n  const resize = () => {\n    // 浏览器高除以 高度 + \n    setLineHeight(document.body.offsetHeight * (5 + 2.5) / 100)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n    return () => {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n\n  return (\n    <section className=\"music-lrc-word\"\n      ref={lrcScroll}\n      onMouseEnter={() => {\n        setCanScroll(false)\n      }}\n      onMouseLeave={() => {\n        setCanScroll(true)\n        if (!props.isPlaying) {\n          return\n        }\n        const target: any = lrcScroll.current\n        const top = lineHeight * (lrcIndex - topLine) || 0\n        if (target) {\n          target.scrollTo({\n            top,\n            behavior: 'auto'\n          })\n        }\n      }}>\n      {/* 渲染歌词列表 */}\n      <section className=\"lrc-list\">\n        {\n          lrcList.map((lrcItem: InterfaceLrcWord[], index) => (\n            <section key={ index } className=\"lrc-line\">\n              <p className={getLrcChooseName(index)} style={lrcIndex === index ? bg : {}}>\n                {\n                  lrcItem.map((word: InterfaceLrcWord, i) => (\n                    <span key={ i }>{word.text}</span>\n                  ))\n                }\n              </p>\n            </section>\n          ))\n        }\n      </section>\n    </section>\n  )\n}\n\nexport default LrcWord","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport './index.scss'\n// import Upload from '../Upload'\nimport { InterfaceMusicInfo } from '../../Interface/music';\nimport Lrc from '../Lrc';\nimport Control from '../Control';\nimport LrcWord from '../Lrc/Lrc-word';\nimport FastAverageColor from 'fast-average-color';\nimport { setLightness, setSaturation } from 'polished';\nimport { getMusicInfoFromLocal } from '../../utils/local';\nimport { DownOutlined } from '@ant-design/icons';\nimport { observer } from \"mobx-react\"\nimport common from '../../store/common';\n\nconst fac = new FastAverageColor();\n\nconst Player = observer(() => {\n\n  // const [musicPlayer, setMusicPlayer] = useState<Howl | null>(null)\n  const musicPlayer = common.musicPlayer\n\n  const musicInfo = common.musicInfo\n\n  // 当前的状态, 用来做歌曲时间，还是当前拖动时间的判定\n  const musicData = common.musicData\n\n  const [currentLrc, setCurrentLrc] = useState('')\n\n  const refChange = useRef(false)\n\n  // 主题色\n  const musicColor = common.musicColor\n\n  const handleChanging = (value: number) => {\n    // 当前拖动时间的改变\n    // 反推出当前时间\n    const time = (musicInfo?.duration || 0) * value / 100\n    common.updatedMusicData(\n      {\n        currentTime: time\n      }\n    )\n  }\n\n  const setChangeFromControl = (key: boolean) => {\n    if (!key) {\n      // 表示操作结束，开始同步数据，播放\n      musicPlayer?.seek(musicData.currentTime)\n      if (!musicData.playing) {\n        musicPlayer?.play()\n      }\n    }\n    common.updatedMusicData({\n      change: key\n    })\n  }\n\n  const getInfoFormLocal = useCallback(async () => {\n    return new Promise(async (resolve, reject) => {\n      const res = await getMusicInfoFromLocal(musicData.id)\n      if (res) {\n        resolve(res)\n      } else {\n        reject('歌曲信息获取失败')\n      }\n    })\n  }, [musicData.id])\n\n  // 歌曲停止事件\n  // const handleStop = useCallback(() => {\n  //   if (musicPlayer) {\n  //     musicPlayer.stop()\n  //   }\n  // }, [musicPlayer])\n\n  // 歌曲播放事件\n  const handelPlay = useCallback(() => {\n    if (musicPlayer) {\n      if (!musicPlayer.playing()) {\n        musicPlayer.play()\n      } else {\n        musicPlayer.pause()\n      }\n    }\n  }, [musicPlayer])\n\n  const getMusicInfo = useCallback(async () => {\n    if (!musicData.id) return\n    const info: InterfaceMusicInfo = await getInfoFormLocal() as InterfaceMusicInfo\n    if (!info) return\n    common.updatedMusicInfo(info)\n    fac.getColorAsync(info.picture[0])\n      .then(color => {\n        common.updateMusicColor(\n          setSaturation(.8, setLightness(.5, color.rgba))\n        )\n      })\n      .catch(e => {\n        common.updateMusicColor(\n          '#1890ff'\n        )\n      });\n  }, [getInfoFormLocal, musicData.id])\n\n  // 绑定键盘事件\n  const keyDown = useCallback((event: any) => {\n    event.preventDefault()\n    const keyCode = event.keyCode as number\n    if (keyCode === 32) {\n      handelPlay()\n    }\n  }, [handelPlay])\n\n  // 修改播放器状态\n  const handelChangeSize = () => {\n    common.updatedMusicData({\n      min: !musicData.min,\n    })\n  }\n\n  useEffect(() => {\n    console.log('useEffect-getMusicInfo')\n    getMusicInfo()\n  }, [getMusicInfo])\n\n\n  useEffect(() => {\n    console.log('useEffect-create')\n    if (musicInfo && !musicPlayer) {\n      setCurrentLrc('')\n      console.log('创建音乐实例')\n      common.createdPlayer()\n    }\n    return () => {\n      if (musicPlayer) {\n        console.log('created destroy')\n        common.updatedMusicData({\n          playing: false\n        })\n        common.destroyPlayer()\n      }\n    }\n  }, [musicInfo, musicPlayer])\n\n  useEffect(() => {\n    console.log('music-change-key')\n    refChange.current = musicData.change\n  }, [musicData.change])\n\n  useEffect(() => {\n    // 绑定enter 事件\n    window.addEventListener('keydown', keyDown)\n    return () => {\n      window.removeEventListener('keydown', keyDown)\n    }\n  }, [keyDown])\n\n\n  return (\n    <section className=\"player\">\n      {\n        musicData.min ? (\n          <section className=\"player-min\">\n            {\n              musicInfo ? (\n                <section className=\"player-layout\">\n                  <section className=\"layout-left\">\n                    <section className=\"music-img\" onClick={handelChangeSize}>\n                      <img src={musicInfo.picture.length > 0 ? musicInfo.picture[0] : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\n                    </section>\n                    <section className=\"player-info\">\n                      <p className=\"music-name\">{musicInfo.name}</p>\n                      <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\n                    </section>\n                  </section>\n                  <section className=\"music-progress\">\n                    <Control\n                      handlePlay={handelPlay}\n                      handlePause={handelPlay}\n                      currentInfo={musicInfo || null}\n                      musicPlayingInfo={musicData}\n                      currentTime={musicData.currentTime}\n                      handleChanging={handleChanging}\n                      setChange={setChangeFromControl}\n                      min={musicData.min}\n                      isPlaying={musicData.playing}></Control>\n                  </section>\n                </section>\n              ) : (\n                  <section className=\"player-layout\">\n                    请选择歌曲进行播放\n                  </section>\n                )\n            }\n          </section>\n        ) : (\n            <section className=\"player-max\">\n              <section className=\"status-control\" onClick={handelChangeSize}>\n                <DownOutlined />\n              </section>\n              <section className=\"player-bg\" style={{ \"backgroundImage\": `url(${musicInfo?.picture[0] || process.env.PUBLIC_URL + '/images/music-no.jpeg'})` }}></section>\n              <section className=\"player-fade\"></section>\n              {/* <Upload></Upload> */}\n              {/* 这里去渲染歌曲信息 */}\n              <section className=\"player-layout\">\n                {\n                  musicInfo ?\n                    <section className=\"player-box\">\n\n                      <section className=\"player-left\">\n                        <section className=\"player-line\">\n                          <img src={musicInfo.picture.length > 0 ? musicInfo.picture[0] : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\n                        </section>\n                        <section className=\"player-line\">\n                          <section className=\"player-info\">\n                            <p className=\"music-name\">{musicInfo.name}</p>\n                            <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\n                            <p className=\"music-current-lrc\">{currentLrc}</p>\n                          </section>\n                        </section>\n                        <Control\n                          handlePlay={handelPlay}\n                          handlePause={handelPlay}\n                          currentInfo={musicInfo || null}\n                          musicPlayingInfo={musicData}\n                          currentTime={musicData.currentTime}\n                          handleChanging={handleChanging}\n                          setChange={setChangeFromControl}\n                          isPlaying={musicData.playing}></Control>\n                      </section>\n                      <section className=\"player-right\">\n                        {\n                          musicInfo.lrc?.match(/\\](\\S)\\[/g) ? (\n                            <LrcWord\n                              setCurrentLrc={setCurrentLrc}\n                              color={musicColor}\n                              lrc={musicInfo.lrc || ''}\n                              currentInfo={musicInfo || null}\n                              currentTime={musicData.currentTime}\n                              isPlaying={musicData.playing}></LrcWord>\n                          )\n                            : (\n                              <Lrc\n                                setCurrentLrc={setCurrentLrc}\n                                color={musicColor}\n                                lrc={musicInfo.lrc || ''}\n                                currentInfo={musicInfo || null}\n                                currentTime={musicData.currentTime}\n                                isPlaying={musicData.playing}></Lrc>\n                            )\n                        }\n                      </section>\n                    </section> : ''\n                }\n              </section>\n              {/* <section className=\"music-log\">\n                <p>歌曲播放状态 {musicData.playing ? '播放中' : '没有播放'}</p>\n                  <p>歌曲总时长 {formatTime(musicData.duration)}</p>\n                  <p>歌曲当前时间 {formatTime(musicData.currentTime)}</p>\n              </section> */}\n              {/* 这里是歌曲控制台的 */}\n            </section>\n          )\n      }\n    </section>\n  );\n})\n\nexport default Player\n","// 用来做文件解析， 文件生成， 歌词 歌曲匹配的配置文件\n\n// 支持的歌曲的格式\nexport const supportMusicFormat = [\n  'mp3', 'ogg', 'wav', 'aac', 'flac', 'dolby', 'opus', 'webm', 'alac'\n]\n\n// 支持的歌词的格式\nexport const supportMusicLrcFormat = [\n  'lrc', 'txt'\n]","import React from 'react';\nimport { loadFile, transformMusicInfo } from '../../utils';\nimport * as musicMetadata from 'music-metadata-browser'\nimport { Button, message, Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport './index.scss'\nimport { supportMusicFormat, supportMusicLrcFormat } from '../../config'\nimport filesize from 'filesize'\nimport { InterfaceMusicInfo } from '../../Interface/music';\nimport { addLrc, addMusic } from '../../utils/local';\nimport common from '../../store/common';\n\nconst UploadFile = () => {\n  \n  const acceptStr = (): string => {\n    let arr = supportMusicFormat.concat(supportMusicLrcFormat)\n    arr = arr.map((item: string) => {\n      item = `.${item}`\n      return item\n    })\n    return arr.join(',')\n  }\n\n  const handleUpload = (File: File): boolean => {\n    const nameList = File.name.split('.')\n    const FileType = nameList[nameList.length - 1]\n    const FileName = File.name.replace(`.${FileType}`, '')\n    // 这里处理我们文件的存储\n    if (supportMusicFormat.includes(FileType)) {\n      console.log('当前是音频文件处理', FileName, FileType)\n      handleMusicData(File)\n      return false\n    }\n\n    if (supportMusicLrcFormat.includes(FileType)) {\n      console.log('当前是歌词文件处理', FileName, FileType)\n      handleMusicLrc(File)\n      return false\n    }\n    message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\n    return false\n  }\n\n  // 音频文件处理\n  const handleMusicData = async (File: File) => {\n    // console.log(File, filesize(File.size))\n    const nameList = File.name.split('.')\n    const FileType = nameList[nameList.length - 1]\n    const FileName = File.name.replace(`.${FileType}`, '')\n    let blob:Blob\n    let result\n    try {\n      blob = await loadFile(File, true)\n      result = await musicMetadata.parseBlob(blob)\n    } catch (error) {\n      message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\n      return\n    }\n    const data: InterfaceMusicInfo = transformMusicInfo(result)\n    data.fileName = FileName\n    data.fileType = FileType\n    data.fileSize = filesize(File.size)\n    data.size = File.size\n    data.name = data.name || data.fileName || '未知歌曲'\n    addMusic(data, blob).then(res => {\n      console.log(res)\n      message.success(`${File.name}  上传成功`)\n      common.updateLocalMusicList()\n    })\n  }\n\n  // 歌词文件处理\n  const handleMusicLrc = async (File: File) => {\n    const nameList = File.name.split('.')\n    const fileType = nameList[nameList.length - 1]\n    const fileName = File.name.replace(`.${fileType}`, '')\n    let result = ''\n    try {\n      result = await loadFile(File, false)\n    } catch (error) {\n      message.warning(`目前还不支持处理${fileType}这种类型文件，${fileName}`)\n      return\n    }\n    addLrc({\n      content: result,\n      fileName,\n      fileType,\n      size: File.size,\n      fileSize: filesize(File.size)\n    }).then(res => {\n      common.updateLocalMusicLrcList()\n      message.success(`${File.name}  上传成功`)\n    })\n  }\n\n  return (\n    <section className=\"page-upload\">\n      <section className=\"upload-line\">\n        <Upload beforeUpload={handleUpload} showUploadList={false} accept={acceptStr()} multiple>\n          <Button icon={<UploadOutlined />}>点击上传本地歌曲或者歌词</Button>\n        </Upload>\n        <p className=\"tips\">\n          <span>支持歌曲格式 { supportMusicFormat.join('，')}</span>\n          <span>支持歌词格式 { supportMusicLrcFormat.join('，')}</span>\n        </p>\n      </section>\n    </section>\n  );\n}\n\nexport default UploadFile","// 歌词列表展示\nimport { Popconfirm, Table } from \"antd\"\nimport { observer } from \"mobx-react\"\nimport React, { useEffect } from \"react\"\nimport { InterfaceLrcInfo } from \"../../Interface/music\"\nimport common from \"../../store/common\"\n\nconst LrcList = observer(() => {\n  const columns = [\n    {\n      title: '歌词名',\n      dataIndex: 'fileName',\n      key: 'fileName',\n    },\n    {\n      title: '大小',\n      dataIndex: 'fileSize',\n      key: 'fileSize',\n      sorter: (a: InterfaceLrcInfo, b: InterfaceLrcInfo) => a.size - b.size\n    },\n    {\n      title: '操作',\n      dataIndex: 'name',\n      key: 'control',\n      render: (_: string, row: InterfaceLrcInfo) => {\n        return (\n          <p>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`确定删除-${row.fileName}-歌词嘛`}\n              onConfirm={() => handleDelete(row.fileName || '')}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <span className=\"link\">删除</span>\n            </Popconfirm>\n          </p>\n        )\n      }\n    },\n  ]\n  const list = common.localMusicLrcList\n  const loading = common.localMusicLrcLoading\n\n  const handleDelete = (id: string) => {\n    common.deleteLrc(id)\n  }\n\n  useEffect(() => {\n    console.log('获取歌词列表')\n    common.updateLocalMusicLrcList()\n  }, [])\n\n  return (\n    <section className=\"lrc-list\">\n      <Table\n        dataSource={list}\n        columns={columns}\n        pagination={false}\n        rowKey=\"fileName\"\n        loading={loading} />\n    </section>\n  )\n})\n\nexport default LrcList","import React from \"react\"\nimport './index.scss'\n\nconst PlayingIcon = () => {\n  return (\n    <p className=\"playing-icon\">\n      <span className=\"rect1\"></span>\n      <span className=\"rect2\"></span>\n      <span className=\"rect3\"></span>\n      <span className=\"rect4\"></span>\n      <span className=\"rect5\"></span>\n    </p>\n  )\n}\n\nexport default PlayingIcon","// 歌词列表展示\nimport { Popconfirm, Space, Table } from \"antd\"\nimport React, { useEffect } from \"react\"\nimport { InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatTime } from \"../../utils\"\nimport { observer } from \"mobx-react\"\nimport { PauseCircleOutlined, PlayCircleOutlined } from \"@ant-design/icons\"\nimport './index.scss'\nimport common from \"../../store/common\"\nimport PlayingIcon from \"../Playing-icon\"\nconst MusicList = observer(() => {\n  const musicData = common.musicData\n  const list = common.localMusicList\n  const loading = common.localMusicLoading\n  const columns = [\n    {\n      title: '歌曲',\n      dataIndex: 'name',\n      key: 'name',\n      width: 300,\n      render: (name: string, row: InterfaceMusicInfo) =>\n        (\n          <section className=\"list-play\">\n            {\n              (musicData?.id === row.id && musicData.playing) ?\n                (\n                  <span>\n                    <PauseCircleOutlined className=\"icon\" onClick={() => handlePauseClick()} />\n                  </span>\n                ) : (\n                  <span>\n                    <PlayCircleOutlined className=\"icon\" onClick={() => handlePlayClick(row)} />\n                  </span>\n                )\n            }\n            <span>{name}</span>\n            {\n              (musicData?.id === row.id && musicData.playing) ?\n                (\n                  <PlayingIcon></PlayingIcon>\n                ) : ''\n            }\n          </section>\n        )\n    },\n    {\n      title: '歌手',\n      dataIndex: 'artist',\n      key: 'artist',\n    },\n    {\n      title: '专辑',\n      dataIndex: 'album',\n      key: 'album',\n    },\n    {\n      title: '时长',\n      dataIndex: 'duration',\n      key: 'duration',\n      render: (time: number) => formatTime(time) || '未知',\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.duration) - Number(b.duration)\n    },\n    {\n      title: '格式',\n      dataIndex: 'codec',\n      key: 'codec',\n      render: (codec: string, row: InterfaceMusicInfo) => codec || row.fileType\n    },\n    {\n      title: '大小',\n      dataIndex: 'fileSize',\n      key: 'fileSize',\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.size) - Number(b.size)\n    },\n    {\n      title: '关联歌词名',\n      dataIndex: 'lrcKey',\n      key: 'lrcKey',\n      render: (lrcKey: string, row: InterfaceMusicInfo) => {\n        if (lrcKey) {\n          return lrcKey\n        } else {\n          return (\n            <Space size=\"middle\">\n              <span className=\"action\">关联歌词</span>\n            </Space>\n          )\n        }\n      }\n    },\n    {\n      title: '操作',\n      dataIndex: 'name',\n      key: 'control',\n      render: (_: string, row: InterfaceMusicInfo) => {\n        return (\n          <p>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`确定删除-${row.name}-这首歌嘛`}\n              onConfirm={() => handleDelete(row.id || '')}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <span className=\"link\">删除</span>\n            </Popconfirm>\n          </p>\n        )\n      }\n    },\n  ]\n\n  const handlePlayClick = (item: InterfaceMusicInfo) => {\n    if (item.id !== musicData.id) {\n      common.musicPlayer?.stop()\n      setTimeout(() => {\n        common.updatedMusicData({\n          id: item.id\n        })\n      }, 100)\n    } else {\n      if (common.musicPlayer) {\n        common.musicPlayer.play()\n      }\n    }\n\n  }\n\n  const handlePauseClick = () => {\n    common.musicPlayer?.pause()\n  }\n\n  const handleDelete = (id: string) => {\n    common.deleteMusic(id)\n  }\n\n  useEffect(() => {\n    console.log('获取音乐列表')\n    common.updateLocalMusicList()\n  }, [])\n\n  return (\n    <section className=\"lrc-list\">\n      <Table dataSource={list} columns={columns} pagination={false} rowKey=\"fileName\" loading={loading} />\n    </section>\n  )\n})\n\nexport default MusicList","import React, { useState } from \"react\"\nimport Upload from \"../Components/Upload\"\nimport { Button, message, Tabs } from 'antd';\nimport LrcList from \"../Components/LrcList\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport MusicList from \"../Components/MusicList\";\nimport { MusicRelatedLrc } from \"../utils/local\";\nimport common from \"../store/common\";\n\nconst { TabPane } = Tabs;\n\nconst Locale = () => {\n\n  const history = useHistory()\n\n  const useQuery = () => {\n    return new URLSearchParams(useLocation().search);\n  }\n  const query = useQuery()\n\n  const params = useLocation()\n\n  const tabCallback = (key: string) => {\n    history.push(`${params.pathname}?type=${key}`)\n  }\n  const [key, setKey] = useState('')\n\n  const handleRelated = async () => {\n    await MusicRelatedLrc()\n    message.success('关联成功')\n    common.updateLocalMusicList()\n    common.updateLocalMusicLrcList()\n  }\n\n  useEffect(() => {\n    const list = ['music', 'lrc']\n    if (query) {\n      const key = query.get('type') || ''\n      if (list.includes(key)) {\n        setKey(key)\n      } else {\n        setKey('music')\n      }\n    }\n  }, [query])\n\n  return (\n    <section className=\"page-local\">\n      <section className=\"local-upload\">\n        <Upload></Upload>\n        <section>\n          <Button onClick={handleRelated}>自动关联歌词</Button>\n          <p className=\"tips\">关联规则: 当前歌曲没有歌词，同时可以找到歌词名，包含完整歌曲名</p>\n        </section>\n      </section>\n      <section className=\"local-content\">\n        <Tabs activeKey={key} onChange={tabCallback}>\n          <TabPane tab=\"音乐列表\" key=\"music\">\n            <MusicList />\n          </TabPane>\n          <TabPane tab=\"歌词列表\" key=\"lrc\">\n            <LrcList />\n          </TabPane>\n        </Tabs>\n      </section>\n    </section>\n  )\n}\n\nexport default Locale","import React from \"react\"\n\n// 用来测试线上播放的数据\n\nconst online = {\n  music: 'http://172.28.150.185:8887/%E5%85%AB%E5%BA%A6%E7%A9%BA%E9%97%B4/08.%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB.flac',\n  lrc: 'http://172.28.150.185:8887/%E5%85%AB%E5%BA%A6%E7%A9%BA%E9%97%B4/%E5%91%A8%E6%9D%B0%E4%BC%A6%20-%20%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB.lrc'\n}\n\nconsole.log(online)\n\nconst Love = () => {\n  return (\n    <p>Love</p>\n  )\n}\n\nexport default Love","import React from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport Player from '../Components/Player';\nimport Locale from '../Local';\nimport Love from '../Love';\nimport './index.scss'\nconst Home = () => {\n\n  return (\n    <section className=\"page-home\">\n      <section className=\"wrapper-box\">\n        <section className=\"nav\">\n          <p className=\"nav-item\">\n            <NavLink to=\"/\" exact>推荐</NavLink>\n          </p>\n          <p className=\"nav-item\">\n            <NavLink to=\"/local\">本地音乐</NavLink>\n          </p>\n        </section>\n        <section className=\"music-box\">\n          <Switch>\n            <Route path=\"/local\" exact>\n              <Locale />\n            </Route>\n            <Route path=\"/\" exact>\n              <Love />\n            </Route>\n          </Switch>\n        </section>\n      </section>\n      <Player />\n    </section>\n  );\n}\n\nexport default Home\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './Home';\nimport './App.scss'\n\n// function PrivateRoute({ children, ...rest }: any) {\n//   return (\n//     <Route\n//       {...rest}\n//       render={({ location }) =>\n//       common.timeDate.isBegin ? (\n//           children\n//         ) : (\n//           <Redirect\n//             to={{\n//               pathname: \"/\",\n//               state: { from: location }\n//             }}\n//           />\n//         )\n//       }\n//     />\n//   );\n// }\n\n\nfunction App() {\n  return (\n    <section className=\"hzfe-music\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"*\" exact>\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport localforage from 'localforage';\nimport { ConfigProvider } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport './common.less'\nimport './index.scss';\n\nlocalforage.config({\n  name: 'HZFE-MUSIC',\n});\n\n\n\nReactDOM.render(\n  <ConfigProvider locale={zh_CN}>\n    <App />\n  </ConfigProvider>,\n  // <React.StrictMode>\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}