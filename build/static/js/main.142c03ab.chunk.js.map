{"version":3,"sources":["utils/index.ts","Components/Lrc/index.tsx","Components/Progress/index.tsx","Components/Control/index.tsx","Components/Lrc/Lrc-word.tsx","utils/local.ts","store/common.ts","Components/Player/index.tsx","config.ts","Components/Upload/index.tsx","Components/LrcList/index.tsx","Components/MusicList/index.tsx","Local/index.tsx","Love/index.tsx","Home/index.tsx","App.tsx","index.tsx"],"names":["loadFile","file","a","isBuffer","Promise","resolve","reject","reader","FileReader","onload","event","target","result","Blob","onerror","readAsArrayBuffer","readAsText","uint8arrayToBase64","u8Arr","slice","index","length","subarray","Math","min","String","fromCharCode","apply","btoa","formatTime","secs","minutes","floor","seconds","transformArrayToTime","str","timeArr","exec","map","item","Number","Lrc","props","useState","lrcList","setLrcList","lrcIndex","setLrcIndex","lrcScroll","useRef","canScroll","setCanScroll","lineHeight","setLineHeight","useEffect","lrc","lrc_s","lyric","replace","match","p1","split","res","lyricLen","i","lrcTimes","lrcText","timeLen","j","lrcTime","push","time","text","filter","sort","b","formatLrc","getChooseLrcIndex","currentTime","setCurrentLrc","isPlaying","current","top","scrollTo","behavior","getLrcChooseName","resize","document","body","offsetHeight","window","addEventListener","removeEventListener","className","ref","onMouseEnter","onMouseLeave","lrcItem","key","style","color","Progress","value","setValue","isChanging","setIsChanging","range","defaultValue","onChange","setChange","handleChanging","onAfterChange","tooltipVisible","Control","setRange","allTime","currentInfo","duration","musicPlayingInfo","onClick","handlePause","handlePlay","aria-hidden","xlinkHref","toFixed","LrcWord","backgroundImage","bg","setBg","console","log","cur","lineTime","start","end","formatLrcProgress","getChooseLrcWordIndex","join","progress","wordIndex","len","getWordLineProgress","word","addLrc","localforage","getItem","list","every","fileName","setItem","getLrcList","addMusic","musicInfo","blob","musicHash","random","Date","now","id","getMusicList","getMusicInfoFromLocal","music","lrcKey","forEach","content","common","updatedMusicData","musicPlayer","seek","playing","change","handleEnd","requestAnimationFrame","handlePlaying","handleStop","musicData","type","localMusicLrcList","this","Howl","autoplay","src","URL","createObjectURL","html5","format","codec","toLowerCase","fileType","volume","onplay","onpause","onend","onstop","data","picture","process","hasOwnProperty","classList","remove","add","setTimeout","observable","action","localMusicLoading","localMusicList","localMusicLrcLoading","fac","FastAverageColor","Player","observer","musicColor","setMusicColor","currentLrc","refChange","setChangeFromControl","play","getInfoFormLocal","useCallback","handelPlay","pause","getMusicInfo","info","updatedMusicInfo","getColorAsync","then","setSaturation","setLightness","rgba","catch","e","keyDown","preventDefault","keyCode","handelChangeSize","createdPlayer","destroyPlayer","alt","name","artist","album","DownOutlined","supportMusicFormat","supportMusicLrcFormat","UploadFile","handleMusicData","File","nameList","FileType","FileName","musicMetadata","message","warning","obj","get","albumartist","artists","comment","date","sampleRate","fileSize","filesize","size","success","updateLocalMusicList","handleMusicLrc","beforeUpload","includes","showUploadList","accept","arr","concat","acceptStr","multiple","icon","UploadOutlined","LrcList","loading","updateLocalMusicLrcList","dataSource","columns","title","dataIndex","sorter","pagination","rowKey","MusicList","render","row","PauseCircleOutlined","handlePauseClick","PlayCircleOutlined","handlePlayClick","stop","TabPane","Tabs","Locale","history","useHistory","query","URLSearchParams","useLocation","search","params","setKey","handleRelated","musicList","activeKey","pathname","tab","Love","Home","to","exact","path","Local","App","config","ReactDOM","locale","zh_CN","getElementById"],"mappings":"yiBAIaA,EAAQ,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,yDAAmBC,IAAnB,iCACjBF,EADiB,yCAEb,IAFa,gCAIf,IAAIG,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACf,IAAMC,EAASD,EAAMC,OAEnBN,EADEF,EACMQ,EAAOC,OAAS,IAAIC,KAAK,CAACF,EAAOC,SAAW,KAE5CD,EAAOC,SAGnBL,EAAOO,QAAUR,EAEbH,EACFI,EAAOQ,kBAAkBd,GAEzBM,EAAOS,WAAWf,OAnBA,2CAAH,sDA0DRgB,EAAqB,SAACC,GAMjC,IALA,IAIIC,EAHAC,EAAQ,EACRC,EAASH,EAAMG,OACfT,EAAS,GAENQ,EAAQC,GACbF,EAAQD,EAAMI,SAASF,EAAOG,KAAKC,IAAIJ,EANxB,MAM4CC,IAC3DT,GAAUa,OAAOC,aAAaC,MAAM,KAAMR,GAC1CC,GARe,MAUjB,OAAOQ,KAAKhB,IA8CDiB,EAAa,SAACC,GACzB,IAAMC,EAAUR,KAAKS,MAAMF,EAAO,KAAO,EACnCG,KAAaH,EAAiB,GAAVC,IAAiB,EAC3C,OAAQA,EAAU,GAAK,IAAM,IAAMA,EAAU,KAAOE,EAAU,GAAK,IAAM,IAAMA,GAkDpEC,EAAuB,SAACC,GAAyB,IAAD,EAErDC,GAAoB,6CAAmCC,KAAKF,UAAxC,eAA8CG,KAAI,SAAAC,GAC1E,OAAOA,EAAOC,OAAOD,GAAQ,OACzB,GAKN,OAJ6B,GAAbH,EAAQ,GACRA,EAAQ,IACPA,EAAQ,GAAKA,EAAQ,IAAmC,KAA5BA,EAAQ,GAAK,IAAIf,OAAe,IAAM,KAAQ,ICnD9EoB,G,OA5HH,SAACC,GAOP,MAE0BC,mBAAyB,IAFnD,mBAEGC,EAFH,KAEYC,EAFZ,OAK4BF,oBAAU,GALtC,mBAKGG,EALH,KAKaC,EALb,KAQEC,EAAYC,iBAAO,MARrB,EAW8BN,oBAAS,GAXvC,mBAWGO,EAXH,KAWcC,EAXd,OAcgCR,mBAAS,GAdzC,mBAcGS,EAdH,KAceC,EAdf,KAkBJC,qBAAU,WACRT,ED+CqB,SAACU,GAKxB,IAAIC,EAAQD,EACZ,GAAIC,EAAO,CAKT,IAHA,IAAMC,GADND,EAAQA,EAAME,QAAQ,iBAAiB,SAACC,EAAOC,GAAR,OAAeA,EAAK,UACvCC,MAAM,MACtBC,EAAM,GACJC,EAAWN,EAAMpC,OACd2C,EAAI,EAAGA,EAAID,EAAUC,IAAK,CAEjC,IAAMC,EAAWR,EAAMO,GAAGL,MAAM,qCAE1BO,EAAUT,EAAMO,GACnBN,QAAQ,sCAAuC,IAC/CA,QAAQ,mCAAoC,IAC5CA,QAAQ,aAAc,IAEzB,GAAIO,EAGF,IADA,IAAME,EAAUF,EAAS5C,OAChB+C,EAAI,EAAGA,EAAID,EAASC,IAAK,CAChC,IAAMC,EAAUnC,EAAqB+B,EAASG,IAC9CN,EAAIQ,KAAK,CACPC,KAAMF,EACNG,KAAMN,KAQd,OAFAJ,EAAMA,EAAIW,QAAO,SAAClC,GAAD,OAAwBA,EAAKiC,SAC1CE,MAAK,SAACxE,EAAiByE,GAAlB,OAAsCzE,EAAEqE,KAAOI,EAAEJ,QACnDT,EAEP,MAAO,GCpFIc,CAAUlC,EAAMa,QAC1B,CAACb,EAAMa,MAEVD,qBAAU,WACRP,ED4F6B,SAACH,EAAyB2B,GACzD,GAAI3B,EAAQvB,QAAU,EAAG,OAAQ,EAGjC,IAFA,IAAID,EAAQ,EAELA,EAAQwB,EAAQvB,UACjBuB,EAAQxB,GAAOmD,KAAOA,IAG1BnD,IAEF,OAAOA,EAAQ,ECrGXyD,CAAkBjC,EAASF,EAAMoC,cAE/BlC,EAAQvB,QAAUuB,EAAQE,IAC5BJ,EAAMqC,cAAcnC,EAAQE,GAAU0B,QAEvC,CAAC1B,EAAUF,EAASF,EAAOA,EAAMoC,cAEpCxB,qBAAU,WACR,GAAIN,GAAaE,GAAaR,EAAMsC,UAAW,CAE7C,IAAMrE,EAAcqC,EAAUiC,QACxBC,EAAM9B,GAAcN,EAnBd,IAmBqC,EAC7CnC,GACFA,EAAOwE,SAAS,CACdD,MACAE,SAAU,cAKf,CAAClC,EAAWE,EAAYN,EAAUJ,EAAMsC,YAE3C,IAAMK,EAAmB,SAACjE,GAExB,OAAG0B,IAAa1B,EACP,aAWF,IAGHkE,EAAS,WAEbjC,EAAc,IAAAkC,SAASC,KAAKC,aAA2B,MAWzD,OARAnC,qBAAU,WAGR,OAFAoC,OAAOC,iBAAiB,SAAUL,GAClCA,IACO,WACLI,OAAOE,oBAAoB,SAAUN,MAEtC,IAGD,6BAASO,UAAU,YACjBC,IAAK9C,EACL+C,aAAc,WACZ5C,GAAa,IAEf6C,aAAc,WACZ,GAAKtD,EAAMsC,UAAX,CAIA,IAAMrE,EAAcqC,EAAUiC,QACxBC,EAAM9B,GAAcN,EAxEhB,IAwEuC,EAC7CnC,GACFA,EAAOwE,SAAS,CACdD,MACAE,SAAU,SAGdjC,GAAa,QAXXA,GAAa,KAcjB,6BAAS0C,UAAU,YAEfjD,EAAQN,KAAI,SAAC2D,EAAuB7E,GAAxB,OACV,uBACE8E,IAAG,UAAMD,EAAQ1B,MAAd,OAAqBzB,GAArB,OAAgCmD,EAAQzB,MAC3C2B,MAAO,CACLC,MAAOtD,IAAa1B,EAAQsB,EAAM0D,MAAQ,IAE5CP,UAAWR,EAAiBjE,IAE1B6E,EAAQzB,a,yBC7ET6B,EAtCE,SAAC3D,GAIX,IAAD,EAEsBC,mBAAS,GAF/B,mBAEG2D,EAFH,KAEUC,EAFV,OAIgC5D,oBAAS,GAJzC,mBAIG6D,EAJH,KAIeC,EAJf,KAOJnD,qBAAU,WACHkD,GACHD,EAAS7D,EAAMgE,SAEhB,CAACF,EAAY9D,EAAMgE,QAgBtB,OACE,6BAASb,UAAU,YAChB,kBAAC,IAAD,CAAQc,aAAc,EAAGL,MAAOA,EAAOM,SAhB3B,SAACN,GAChBG,GAAc,GACd/D,EAAMmE,WAAU,GAChBN,EAASD,GACT5D,EAAMoE,eAAeR,IAYyCS,cAT1C,SAACT,GAGrB5D,EAAMmE,WAAU,GAChBJ,GAAc,IAK8EO,gBAAgB,MCwEjGC,EAxGC,SAACvE,GAUV,IAAD,MAEsBC,mBAAS,GAF/B,mBAEG+D,EAFH,KAEUQ,EAFV,KAWJ,OAPA5D,qBAAU,WAAO,IAAD,EACR6D,GAAU,UAAAzE,EAAM0E,mBAAN,eAAmBC,WAAY3E,EAAM4E,iBAAiBD,UAAY,EAClFH,EACGxE,EAAMoC,YAAcqC,EAAW,OAEjC,CAACzE,EAAM0E,YAAa1E,EAAMoC,YAAapC,EAAM4E,iBAAiBD,WAG/D,6BAASxB,UAAU,kBAEfnD,EAAMlB,IACJ,6BAASqE,UAAU,eACjB,uBAAGA,UAAU,eAAe0B,QAC1B,WACM7E,EAAMsC,UACRtC,EAAM8E,cAEN9E,EAAM+E,eAKR/E,EAAMsC,UACJ,yBAAKa,UAAU,kBAAkB6B,cAAY,QAC3C,yBAAKC,UAAU,iBAIf,yBAAK9B,UAAU,iBAAiB6B,cAAY,QAC1C,yBAAKC,UAAU,iBAMzB,6BAAS9B,UAAU,oBACjB,kBAAC,EAAD,CAAUa,MAAOlE,OAAOkE,EAAMkB,QAAQ,IAAKd,eAAgBpE,EAAMoE,eAAgBD,UAAWnE,EAAMmE,aAGpG,6BAAShB,UAAU,aACjB,kCAAQhE,EAAWa,EAAMoC,aAAe,GAAxC,KACA,mCACA,kCAAQjD,GAAW,UAAAa,EAAM0E,mBAAN,eAAmBC,WAAY3E,EAAM4E,iBAAiBD,UAAY,GAArF,OAIF,6BAASxB,UAAU,WACjB,6BAASA,UAAU,oBACjB,kBAAC,EAAD,CAAUa,MAAOlE,OAAOkE,EAAMkB,QAAQ,IAAKd,eAAgBpE,EAAMoE,eAAgBD,UAAWnE,EAAMmE,aAGpG,6BAAShB,UAAU,gBACjB,6BAASA,UAAU,aACjB,kCAAQhE,EAAWa,EAAMoC,aAAe,GAAxC,KACA,kCAAQjD,GAAW,UAAAa,EAAM0E,mBAAN,eAAmBC,WAAY3E,EAAM4E,iBAAiBD,UAAY,GAArF,MAEF,6BAASxB,UAAU,eACjB,uBAAGA,UAAU,eAAe0B,QAC1B,WACM7E,EAAMsC,UACRtC,EAAM8E,cAEN9E,EAAM+E,eAKR/E,EAAMsC,UACJ,yBAAKa,UAAU,kBAAkB6B,cAAY,QAC3C,yBAAKC,UAAU,iBAIf,yBAAK9B,UAAU,iBAAiB6B,cAAY,QAC1C,yBAAKC,UAAU,sBCqC5BE,G,OA5HC,SAACnF,GAOX,MAE0BC,mBAA+B,IAFzD,mBAEGC,EAFH,KAEYC,EAFZ,OAK4BF,oBAAU,GALtC,mBAKGG,EALH,KAKaC,EALb,KAQEC,EAAYC,iBAAO,MARrB,EAW8BN,oBAAS,GAXvC,mBAWGO,EAXH,KAWcC,EAXd,OAcgBR,mBAAS,CAC3BmF,gBAAiB,KAff,mBAcGC,EAdH,KAcOC,EAdP,OAmBgCrF,mBAAS,GAnBzC,mBAmBGS,EAnBH,KAmBeC,EAnBf,KAuBJC,qBAAU,WACRT,EJuG6B,SAACU,GAChC,IAAIO,EAAa,GACjBmE,QAAQC,IAAI,gEAMZ,IAHA,IACMzE,EADOF,EACQM,MAAM,MACvBG,EAAI,EACDA,EAAIP,EAAMpC,QAAQ,CACvB,IAAI8G,EAAM1E,EAAMO,GAAGN,QAAQ,MAAO,IAC5BO,EAAWkE,EAAIxE,MAAM,qCACrBO,EAAUiE,EAAIxE,MAAM,uBAC1B,GAAIM,GAAYC,EAAS,CAKvB,IADA,IAAMkE,EAAW,GACRhE,EAAI,EAAGA,EAAIF,EAAQ7C,OAAQ+C,IAClCgE,EAAS9D,KAAK,CACZE,KAAMN,EAAQE,GACdiE,MAAOnG,EAAqB+B,EAASG,IACrCkE,IAAKpG,EAAqB+B,EAASG,EAAI,MAG3CN,EAAIQ,KAAK8D,GAEXpE,IAEF,OAAOF,EInIMyE,CAAkB7F,EAAMa,QAClC,CAACb,EAAMa,MAEVD,qBAAU,WAIR,GAHAP,EJgJiC,SAACH,EAA+B2B,GACnE,GAAI3B,EAAQvB,QAAU,EAAG,OAAQ,EAGjC,IAFA,IAAID,EAAQ,EAELA,EAAQwB,EAAQvB,UACjBuB,EAAQxB,GAAO,GAAGiH,MAAQ9D,IAG9BnD,IAEF,OAAOA,EAAQ,EIzJXoH,CAAsB5F,EAASF,EAAMoC,cAEnClC,EAAQE,IAAaF,EAAQE,GAAUzB,OAAQ,CACjD,IAAMmD,EAAO5B,EAAQE,GAAUR,KAAI,SAAAC,GACjC,OAAOA,EAAKiC,QAEd9B,EAAMqC,cAAcP,EAAKiE,KAAK,KAEhC,IAAMvC,EJsJyB,SAACD,EAA6B1B,GAC/D,IAAK0B,EAAS,OAAO,EAKrB,IAJA,IAAIyC,EAAW,EAEXC,EAAY,EAETA,EAAY1C,EAAQ5E,UACrB4E,EAAQ0C,GAAWN,MAAQ9D,IAG/BoE,IAEF,GAAIA,GAAa,EAAG,OAAO,EAC3B,GAAIA,GAAa1C,EAAQ5E,OAAQ,OAAO,IAExCqH,EAAWC,GAAa,IAAM1C,EAAQ5E,QAEtC,IAAM8G,EAAMlC,EAAQ0C,EAAY,GAChC,GAAIpE,GAAQ4D,EAAIG,IACd,OAAO,IAET,GAAI/D,GAAQ4D,EAAIE,MACd,OAAQM,EAAY,IAAM,IAAM1C,EAAQ5E,QAE1C,IAAMuH,EAAMT,EAAIG,IAAMH,EAAIE,MAE1B,OADAK,IAAanE,EAAO4D,EAAIE,OAASO,GAAO,IAAM3C,EAAQ5E,QI/KxCwH,CAAoBjG,EAAQE,GAAWJ,EAAMoC,aACzDkD,EACE,CACEF,gBAAgB,gCAAD,OAAkCpF,EAAM0D,MAAxC,YAAiDF,EAAjD,qBAAiEA,EAAjE,UAGlB,CAACpD,EAAUF,EAASF,EAAOA,EAAMoC,cAEpCxB,qBAAU,WACR,GAAIN,GAAaE,GAAaR,EAAMsC,UAAW,CAE7C,IAAMrE,EAAcqC,EAAUiC,QACxBC,EAAM9B,GAAcN,EA5Bd,IA4BqC,EAC7CnC,GACFA,EAAOwE,SAAS,CACdD,MACAE,SAAU,cAIf,CAAClC,EAAWE,EAAYN,EAAUJ,EAAMsC,YAE3C,IAAMK,EAAmB,SAACjE,GACxB,OAAO0B,IAAa1B,EAAQ,kBAAoB,IAG5CkE,EAAS,WAEbjC,EAAc,IAAAkC,SAASC,KAAKC,aAA2B,MAYzD,OATAnC,qBAAU,WAGR,OAFAoC,OAAOC,iBAAiB,SAAUL,GAClCA,IACO,WACLI,OAAOE,oBAAoB,SAAUN,MAEtC,IAID,6BAASO,UAAU,iBACjBC,IAAK9C,EACL+C,aAAc,WACZ5C,GAAa,IAEf6C,aAAc,WAEZ,GADA7C,GAAa,GACRT,EAAMsC,UAAX,CAGA,IAAMrE,EAAcqC,EAAUiC,QACxBC,EAAM9B,GAAcN,EApEhB,IAoEuC,EAC7CnC,GACFA,EAAOwE,SAAS,CACdD,MACAE,SAAU,YAKhB,6BAASS,UAAU,YAEfjD,EAAQN,KAAI,SAAC2D,EAA6B7E,GAA9B,OACV,6BAAS8E,IAAM9E,EAAQyE,UAAU,YAC/B,uBAAGA,UAAWR,EAAiBjE,GAAQ+E,MAAOrD,IAAa1B,EAAQ2G,EAAK,IAEpE9B,EAAQ3D,KAAI,SAACwG,EAAwB9E,GAAzB,OACV,0BAAMkC,IAAMlC,GAAK8E,EAAKtE,kB,mCC/F5BuE,EAAM,uCAAG,WAAOxF,GAAP,eAAArD,EAAA,4DACP,iBADO,SAGoB8I,IAAYC,QAFvC,kBADO,gDAGiD,GAHjD,cAGbC,EAHa,KAKLA,EAAKC,OAAM,SAAA5G,GAAI,OAAIA,EAAK6G,WAAa7F,EAAI6F,aAErDF,EAAK5E,KAAKf,GAPO,kBASZyF,IAAYK,QAAQ,iBAAkBH,IAT1B,4CAAH,sDAaPI,EAAU,uCAAG,4BAAApJ,EAAA,4DACZ,iBADY,SAEe8I,IAAYC,QADvC,kBADY,gDAE4C,GAF5C,cAElBC,EAFkB,uBAGjBA,GAHiB,2CAAH,qDAYVK,EAAQ,uCAAG,WAAOC,EAA+BC,GAAtC,iBAAAvJ,EAAA,4DACV,aADU,SAGmB8I,IAAYC,QAFzC,cADU,gDAGgD,GAHhD,UAGhBC,EAHgB,MAKRA,EAAKC,OAAM,SAAA5G,GAAI,OAAIA,EAAK6G,WAAaI,EAAUJ,YALvC,wBAQdM,EARc,UAQCF,EAAUJ,SARX,YAQuC,IAAhB7H,KAAKoI,SAR5B,YAQ8CC,KAAKC,OACvEL,EAAUM,GAAKJ,EATK,UAUdV,IAAYK,QAAQK,EAAWD,GAVjB,QAWpBP,EAAK5E,KAAKkF,GAXU,iCAafR,IAAYK,QAAQ,aAAcH,IAbnB,4CAAH,wDAiBRa,EAAY,uCAAG,4BAAA7J,EAAA,4DACd,aADc,SAEe8I,IAAYC,QADzC,cADc,gDAE4C,GAF5C,cAEpBC,EAFoB,uBAGnBA,GAHmB,2CAAH,qDAOZc,EAAqB,uCAAG,WAAOF,GAAP,SAAA5J,EAAA,+EAC5B,IAAIE,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,iBAAAJ,EAAA,sEACE8I,IAAYC,QAAQ,cADtB,gDAC+D,GAD/D,UACXC,EADW,KAEXf,EAAMe,EAAKzE,QAAO,SAAClC,GAAD,OAA8BA,EAAKuH,KAAOA,KAAI,GAFrD,iBAIfxJ,EAAO,oDAJQ,yCAMG0I,IAAYC,QAAQa,GANvB,WAMf3B,EAAI8B,MANW,QAOX9B,EAAI+B,OAPO,kCAQUZ,IARV,eASJa,SAAQ,SAAA5H,GACVA,EAAK6G,WAAajB,EAAI+B,SACzB/B,EAAI5E,IAAMhB,EAAK6H,YAXN,QAef/J,EAAQ8H,GAfO,4CAAZ,0DAD4B,2CAAH,sD,sFC+FnBkC,EAJA,I,qGApIb5C,WAAa,WAAO,IAAD,IAQ+B,GAPhDQ,QAAQC,IAAI,kCACZ,EAAKoC,iBAAiB,CACpBxF,YAAW,UAAE,EAAKyF,mBAAP,aAAE,EAAkBC,OAC/BnD,SAAQ,UAAE,EAAKkD,mBAAP,aAAE,EAAkBlD,WAC5BoD,SAAS,EACTC,QAAQ,IAEN,EAAKlB,YAAc,EAAKA,UAAUnC,YACpC,EAAKmC,UAAUnC,SAAW7E,OAAM,UAAC,EAAK+H,mBAAN,aAAC,EAAkBlD,c,KAIvDG,YAAc,WAAO,IAAD,EAClBS,QAAQC,IAAI,kCACZ,EAAKoC,iBAAiB,CACpBxF,YAAW,UAAE,EAAKyF,mBAAP,aAAE,EAAkBC,OAC/BC,SAAS,K,KAIbE,UAAY,WAAO,IAAD,EAChB1C,QAAQC,IAAI,wCACZ,EAAKoC,iBAAiB,CACpBxF,YAAW,UAAE,EAAKyF,mBAAP,aAAE,EAAkBC,OAC/BC,SAAS,IAEXG,sBAAsB,EAAKC,gB,KAG7BC,WAAa,WAAO,IAAD,EACjB7C,QAAQC,IAAI,4BACZ,EAAKoC,iBAAiB,CACpBxF,YAAW,UAAE,EAAKyF,mBAAP,aAAE,EAAkBC,OAC/BC,SAAS,K,KAIbI,cAAgB,YACT,EAAKE,UAAUL,QAAU,EAAKH,aAAe,EAAKA,YAAYE,YACjE,EAAKH,iBAAiB,CACpBU,KAAM,SACNlG,YAAa,EAAKyF,YAAYC,SAEhCI,sBAAsB,EAAKC,iB,sNA2E/BI,kBAAwC,G,+JA3IlCC,KAAK1B,YACP0B,KAAKZ,iBAAiB,CACpBG,SAAS,IAEXS,KAAKX,YAAc,IAAIY,OAAK,CAC1BC,UAAU,EACVC,IAAKC,IAAIC,gBAAgBL,KAAK1B,UAAUS,OAGxCuB,OAAO,EACPC,OAAQ,CAACP,KAAK1B,UAAUkC,MAAMC,eAAiBlK,OAAOyJ,KAAK1B,UAAUoC,UAAUD,eAC/EE,OAAQ,EACRC,OAAQZ,KAAKzD,WACbsE,QAASb,KAAK1D,YACdwE,MAAOd,KAAKP,UACZsB,OAAQf,KAAKJ,gB,sCAuDjBI,KAAKX,YAAc,O,uCAQH2B,GACY,IAAxBA,EAAKC,QAAQ9K,SACf6K,EAAKC,QAAU,CAAC,GAAD,OAAIC,IAAJ,2BAEjBlB,KAAK1B,UAAY0C,I,uCAiBDA,GAAY,IAAD,OACT,WAAdA,EAAKlB,MAKLkB,EAAKG,eAAe,SAClBH,EAAK1K,IACP+D,SAASC,KAAK8G,UAAUC,OAAO,iBAE/BhH,SAASC,KAAK8G,UAAUE,IAAI,kBAG3BN,EAAKxB,QACR+B,YAAW,WACT7B,sBAAsB,EAAKC,iBAC1B,KAELK,KAAKH,UAAL,2BACKG,KAAKH,WACLmB,IAlBHhB,KAAKH,UAAUjG,YAAcoH,EAAKpH,gB,8CA1GrC4H,K,yEAC0B,Q,yCAE1BC,K,mHAsEAA,K,iHAMAD,K,yEACsC,Q,4CAEtCC,K,oHAWAD,K,wEACuC,CACtC5C,GAAI,GACJW,SAAS,EACTpD,SAAU,EACVvC,YAAa,EACb4F,QAAQ,EACRlJ,KAAK,M,4CAGNmL,K,yHA0BAD,K,wEACsC,M,+CACtCA,K,yEAC4B,K,kDAE5BC,K,0GACsB,sBAAAzM,EAAA,6DACrB,EAAK0M,mBAAoB,EADJ,SAEO7C,IAFP,OAErB,EAAK8C,eAFgB,OAGrB,EAAKD,mBAAoB,EAHJ,8C,kDAUtBF,K,yEAC+B,K,qDAE/BC,K,0GACyB,sBAAAzM,EAAA,6DACxB,EAAK4M,sBAAuB,EADJ,SAEOxD,IAFP,OAExB,EAAK2B,kBAFmB,OAGxB,EAAK6B,sBAAuB,EAHJ,8C,GC7ItBC,EAAM,IAAIC,IA8PDC,EA5PAC,aAAS,WAAO,IAAD,EAGtB3C,EAAcF,EAAOE,YAErBf,EAAYa,EAAOb,UAGnBuB,EAAYV,EAAOU,UARG,EAWQpI,mBAAS,WAXjB,mBAWrBwK,EAXqB,KAWTC,EAXS,OAcQzK,mBAAS,IAdjB,mBAcrB0K,EAdqB,KAcTtI,EAdS,KAgBtBuI,EAAYrK,kBAAO,GAEnB6D,EAAiB,SAACR,GAGtB,IAAM/B,IAAiB,OAATiF,QAAS,IAATA,OAAA,EAAAA,EAAWnC,WAAY,GAAKf,EAAQ,IAClD+D,EAAOC,iBACL,CACExF,YAAaP,KAKbgJ,EAAuB,SAACrH,GACvBA,IAEQ,OAAXqE,QAAW,IAAXA,KAAaC,KAAKO,EAAUjG,aACvBiG,EAAUN,SACF,OAAXF,QAAW,IAAXA,KAAaiD,QAGjBnD,EAAOC,iBAAiB,CACtBI,OAAQxE,KAINuH,EAAmBC,sBAAW,sBAAC,sBAAAxN,EAAA,+EAC5B,IAAIE,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAJ,EAAA,sEACC8J,EAAsBe,EAAUjB,IADjC,QACXhG,EADW,QAGfzD,EAAQyD,GAERxD,EAAO,oDALQ,2CAAZ,0DAD4B,2CASlC,CAACyK,EAAUjB,KAUR6D,EAAaD,uBAAY,WACzBnD,IACGA,EAAYE,UAGfF,EAAYqD,QAFZrD,EAAYiD,UAKf,CAACjD,IAEEsD,EAAeH,sBAAW,sBAAC,4BAAAxN,EAAA,yDAC1B6K,EAAUjB,GADgB,iEAEQ2D,IAFR,UAEzBK,EAFyB,wDAI/BzD,EAAO0D,iBAAiBD,GACxBf,EAAIiB,cAAcF,EAAK3B,QAAQ,IAC5B8B,MAAK,SAAA7H,GACJgH,EACEc,YAAc,GAAIC,YAAa,GAAI/H,EAAMgI,WAG5CC,OAAM,SAAAC,GACLlB,EACE,cAbyB,2CAgB9B,CAACK,EAAkB1C,EAAUjB,KAG1ByE,EAAUb,uBAAY,SAAChN,GAC3BA,EAAM8N,iBAEU,KADA9N,EAAM+N,SAEpBd,MAED,CAACA,IAGEe,EAAmB,WACvBrE,EAAOC,iBAAiB,CACtB9I,KAAMuJ,EAAUvJ,OAyCpB,OArCA8B,qBAAU,WACR2E,QAAQC,IAAI,0BACZ2F,MACC,CAACA,IAGJvK,qBAAU,WAMR,OALA2E,QAAQC,IAAI,oBACRsB,IAAce,IAChBtC,QAAQC,IAAI,wCACZmC,EAAOsE,iBAEF,WACDpE,IACFtC,QAAQC,IAAI,mBACZmC,EAAOC,iBAAiB,CACtBG,SAAS,IAEXJ,EAAOuE,oBAGV,CAACpF,EAAWe,IAEfjH,qBAAU,WACR2E,QAAQC,IAAI,oBACZoF,EAAUrI,QAAU8F,EAAUL,SAC7B,CAACK,EAAUL,SAEdpH,qBAAU,WAGR,OADAoC,OAAOC,iBAAiB,UAAW4I,GAC5B,WACL7I,OAAOE,oBAAoB,UAAW2I,MAEvC,CAACA,IAIF,6BAAS1I,UAAU,UAEfkF,EAAUvJ,IACR,6BAASqE,UAAU,aAAaM,MAAO,CAAEC,MAAO+G,IAE5C3D,EACE,6BAAS3D,UAAU,iBACjB,6BAASA,UAAU,eACjB,6BAASA,UAAU,YAAY0B,QAASmH,GACtC,yBAAKrD,IAAK7B,EAAU2C,QAAQ9K,OAAS,EAAImI,EAAU2C,QAAQ,GAAKC,yBAAkDyC,IAAI,MAExH,6BAAShJ,UAAU,eACjB,uBAAGA,UAAU,cAAc2D,EAAUsF,MACrC,uBAAGjJ,UAAU,gBAAgB2D,EAAUuF,OAAvC,MAAkDvF,EAAUwF,SAGhE,6BAASnJ,UAAU,kBACjB,kBAAC,EAAD,CACE4B,WAAYkG,EACZnG,YAAamG,EACbvG,YAAaoC,GAAa,KAC1BlC,iBAAkByD,EAClBjG,YAAaiG,EAAUjG,YACvBgC,eAAgBA,EAChBD,UAAW0G,EACX/L,IAAKuJ,EAAUvJ,IACfwD,UAAW+F,EAAUN,YAIzB,6BAAS5E,UAAU,iBAAnB,2DAON,6BAASA,UAAU,cACjB,6BAASA,UAAU,iBAAiB0B,QAASmH,GAC3C,kBAACO,EAAA,EAAD,OAEF,6BAASpJ,UAAU,YAAYM,MAAO,CAAE,gBAAkB,OAAlB,QAAmC,OAATqD,QAAS,IAATA,OAAA,EAAAA,EAAW2C,QAAQ,KAAMC,yBAAnD,QACxC,6BAASvG,UAAU,gBAGnB,6BAASA,UAAU,iBAEf2D,EACE,6BAAS3D,UAAU,cAEjB,6BAASA,UAAU,eACjB,6BAASA,UAAU,eACjB,yBAAKwF,IAAK7B,EAAU2C,QAAQ9K,OAAS,EAAImI,EAAU2C,QAAQ,GAAKC,yBAAkDyC,IAAI,MAExH,6BAAShJ,UAAU,eACjB,6BAASA,UAAU,eACjB,uBAAGA,UAAU,cAAc2D,EAAUsF,MACrC,uBAAGjJ,UAAU,gBAAgB2D,EAAUuF,OAAvC,MAAkDvF,EAAUwF,OAC5D,uBAAGnJ,UAAU,qBAAqBwH,KAGtC,kBAAC,EAAD,CACE5F,WAAYkG,EACZnG,YAAamG,EACbvG,YAAaoC,GAAa,KAC1BlC,iBAAkByD,EAClBjG,YAAaiG,EAAUjG,YACvBgC,eAAgBA,EAChBD,UAAW0G,EACXvI,UAAW+F,EAAUN,WAEzB,6BAAS5E,UAAU,iBAEf,UAAA2D,EAAUjG,WAAV,eAAeI,MAAM,cACnB,kBAAC,EAAD,CACEoB,cAAeA,EACfqB,MAAO+G,EACP5J,IAAKiG,EAAUjG,KAAO,GACtB6D,YAAaoC,GAAa,KAC1B1E,YAAaiG,EAAUjG,YACvBE,UAAW+F,EAAUN,UAGrB,kBAAC,EAAD,CACE1F,cAAeA,EACfqB,MAAO+G,EACP5J,IAAKiG,EAAUjG,KAAO,GACtB6D,YAAaoC,GAAa,KAC1B1E,YAAaiG,EAAUjG,YACvBE,UAAW+F,EAAUN,YAIpB,S,gDCzPpByE,I,OAAqB,CAChC,MAAO,MAAO,MAAO,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAIlDC,GAAwB,CACnC,MAAO,O,qBCqGMC,GAlGI,WAEjB,IA8BMC,EAAe,uCAAG,WAAOC,GAAP,yBAAApP,EAAA,6DAEhBqP,EAAWD,EAAKR,KAAKjL,MAAM,KAC3B2L,EAAWD,EAASA,EAASlO,OAAS,GACtCoO,EAAWH,EAAKR,KAAKpL,QAAV,WAAsB8L,GAAY,IAJ7B,kBAQPxP,EAASsP,GAAM,GARR,cAQpB7F,EARoB,gBASLiG,YAAwBjG,GATnB,OASpB7I,EAToB,gEAWpB+O,KAAQC,QAAR,0DAA2BJ,EAA3B,qDAA6CC,IAXzB,2BTfSI,ES6BqBjP,GAA9CsL,ET5B2B,CAEjC4C,KAAMgB,cAAID,EAAK,eAAgB,IAE/Bb,MAAOc,cAAID,EAAK,eAAgB,IAEhCE,YAAaD,cAAID,EAAK,qBAAsB,IAE5Cd,OAAQe,cAAID,EAAK,gBAAiB,IAElCG,QAASF,cAAID,EAAK,iBAAkB,IAEpCI,QAASH,cAAID,EAAK,iBAAkB,IAEpCK,KAAMJ,cAAID,EAAK,cAAe,GAE9B1D,QAAS2D,cAAID,EAAK,iBAAkB,IAAIvN,KAAI,SAACC,GAC3C,MAAM,QAAN,OAAeA,EAAKkJ,OAApB,mBAAqCxK,EAAmBsB,EAAK2J,UAG/DR,MAAOoE,cAAID,EAAK,eAAgB,IAEhCxI,SAAUyI,cAAID,EAAK,kBAAmB,GAEtCM,WAAYL,cAAID,EAAK,oBAAqB,IAE1CtM,IAAK,KSGA6F,SAAWqG,EAChBvD,EAAKN,SAAW4D,EAChBtD,EAAKkE,SAAWC,KAASf,EAAKgB,MAC9BpE,EAAKoE,KAAOhB,EAAKgB,KACjBpE,EAAK4C,KAAO5C,EAAK4C,MAAQ5C,EAAK9C,UAAY,2BAC1CG,EAAS2C,EAAMzC,GAAMwE,MAAK,SAAAnK,GACxBmE,QAAQC,IAAIpE,GACZ6L,KAAQY,QAAR,UAAmBjB,EAAKR,KAAxB,+BACAzE,EAAOmG,0BAvBa,kCTfQ,IAACX,ISeT,qBAAH,sDA4BfY,EAAc,uCAAG,WAAOnB,GAAP,qBAAApP,EAAA,6DACfqP,EAAWD,EAAKR,KAAKjL,MAAM,KAC3B+H,EAAW2D,EAASA,EAASlO,OAAS,GACtC+H,EAAWkG,EAAKR,KAAKpL,QAAV,WAAsBkI,GAAY,IAC/ChL,EAAS,GAJQ,kBAMJZ,EAASsP,GAAM,GANX,OAMnB1O,EANmB,gEAQnB+O,KAAQC,QAAR,0DAA2BhE,EAA3B,qDAA6CxC,IAR1B,2BAWrBL,EAAO,CACLqB,QAASxJ,EACTwI,WACAwC,WACA0E,KAAMhB,EAAKgB,KACXF,SAAUC,KAASf,EAAKgB,QACvBrC,MAAK,SAAAnK,GACNmE,QAAQC,IAAIpE,GACZ6L,KAAQY,QAAR,UAAmBjB,EAAKR,KAAxB,kCAnBmB,0DAAH,sDAuBpB,OACE,6BAASjJ,UAAU,eACjB,6BAASA,UAAU,eACjB,kBAAC,KAAD,CAAQ6K,aA3EO,SAACpB,GACpB,IAAMC,EAAWD,EAAKR,KAAKjL,MAAM,KAC3B2L,EAAWD,EAASA,EAASlO,OAAS,GACtCoO,EAAWH,EAAKR,KAAKpL,QAAV,WAAsB8L,GAAY,IAEnD,OAAIN,GAAmByB,SAASnB,IAC9BvH,QAAQC,IAAI,yDAAauH,EAAUD,GACnCH,EAAgBC,IACT,GAGLH,GAAsBwB,SAASnB,IACjCvH,QAAQC,IAAI,yDAAauH,EAAUD,GACnCiB,EAAenB,IACR,IAETK,KAAQC,QAAR,0DAA2BJ,EAA3B,qDAA6CC,KACtC,IA0DiCmB,gBAAgB,EAAOC,OApF/C,WAChB,IAAIC,EAAM5B,GAAmB6B,OAAO5B,IAKpC,OAJA2B,EAAMA,EAAIxO,KAAI,SAACC,GAEb,OADAA,EAAI,WAAOA,OAGFkG,KAAK,KA8EuDuI,GAAaC,UAAQ,GACtF,kBAAC,KAAD,CAAQC,KAAM,kBAACC,GAAA,EAAD,OAAd,6EAEF,uBAAGtL,UAAU,QACX,sEAAeqJ,GAAmBzG,KAAK,WACvC,sEAAe0G,GAAsB1G,KAAK,e,oBC9DrC2I,GAlCClE,aAAS,WACvB,IAaMhE,EAAOmB,EAAOY,kBACdoG,EAAUhH,EAAOyC,qBAOvB,OALAxJ,qBAAU,WACR2E,QAAQC,IAAI,wCACZmC,EAAOiH,4BACN,IAGD,6BAASzL,UAAU,YACjB,kBAAC,KAAD,CACE0L,WAAYrI,EACZsI,QAzBU,CACd,CACEC,MAAO,qBACPC,UAAW,WACXxL,IAAK,YAEP,CACEuL,MAAO,eACPC,UAAW,WACXxL,IAAK,WACLyL,OAAQ,SAACzR,EAAqByE,GAAtB,OAA8CzE,EAAEoQ,KAAO3L,EAAE2L,QAgB/DsB,YAAY,EACZC,OAAO,WACPR,QAASA,Q,8BCgFFS,I,OA3GG5E,aAAS,WACzB,IAAMnC,EAAYV,EAAOU,UACnB7B,EAAOmB,EAAOwC,eACdwE,EAAUhH,EAAOuC,kBACjB4E,EAAU,CACd,CACEC,MAAO,eACPC,UAAW,OACXxL,IAAK,OACL6L,OAAQ,SAACjD,EAAckD,GAAf,OAEJ,uBAAGnM,UAAU,cAEC,OAATkF,QAAS,IAATA,OAAA,EAAAA,EAAWjB,MAAOkI,EAAIlI,IAAMiB,EAAUN,QAErC,8BACE,kBAACwH,GAAA,EAAD,CAAqBpM,UAAU,OAAO0B,QAAS,kBAAM2K,QAGvD,8BACE,kBAACC,GAAA,EAAD,CAAoBtM,UAAU,OAAO0B,QAAS,kBAAM6K,EAAgBJ,OAI1E,8BAAQlD,MAIhB,CACE2C,MAAO,eACPC,UAAW,SACXxL,IAAK,UAEP,CACEuL,MAAO,eACPC,UAAW,QACXxL,IAAK,SAEP,CACEuL,MAAO,eACPC,UAAW,WACXxL,IAAK,WACL6L,OAAQ,SAACxN,GAAD,OAAkB1C,EAAW0C,IAAS,gBAC9CoN,OAAQ,SAACzR,EAAuByE,GAAxB,OAAkDnC,OAAOtC,EAAEmH,UAAY7E,OAAOmC,EAAE0C,YAE1F,CACEoK,MAAO,eACPC,UAAW,QACXxL,IAAK,QACL6L,OAAQ,SAACrG,EAAesG,GAAhB,OAA6CtG,GAASsG,EAAIpG,WAEpE,CACE6F,MAAO,eACPC,UAAW,WACXxL,IAAK,WACLyL,OAAQ,SAACzR,EAAuByE,GAAxB,OAAkDnC,OAAOtC,EAAEoQ,MAAQ9N,OAAOmC,EAAE2L,QAEtF,CACEmB,MAAO,iCACPC,UAAW,SACXxL,IAAK,SACL6L,OAAQ,SAAC7H,EAAgB8H,GACvB,OAAI9H,GAIA,kBAAC,KAAD,CAAOoG,KAAK,UACV,0BAAMzK,UAAU,UAAhB,gCAQNuM,EAAkB,SAAC7P,GACQ,IAAD,EAA1BA,EAAKuH,KAAOiB,EAAUjB,IACxB,UAAAO,EAAOE,mBAAP,SAAoB8H,OACpB5F,YAAW,WACTpC,EAAOC,iBAAiB,CACtBR,GAAIvH,EAAKuH,OAEV,MAECO,EAAOE,aACTF,EAAOE,YAAYiD,QAMnB0E,EAAmB,WAAO,IAAD,EAC7B,UAAA7H,EAAOE,mBAAP,SAAoBqD,SAQtB,OALAtK,qBAAU,WACR2E,QAAQC,IAAI,wCACZmC,EAAOmG,yBACN,IAGD,6BAAS3K,UAAU,YACjB,kBAAC,KAAD,CAAO0L,WAAYrI,EAAMsI,QAASA,EAASI,YAAY,EAAOC,OAAO,WAAWR,QAASA,SCrGvFiB,GAAYC,KAAZD,QA4DOE,GA1DA,WAEb,IAAMC,EAAUC,cAKVC,EAFG,IAAIC,gBAAgBC,cAAcC,QAIrCC,EAASF,cATI,EAcGlQ,mBAAS,IAdZ,mBAcZuD,EAdY,KAcP8M,EAdO,KAgBbC,EAAa,uCAAG,sBAAA/S,EAAA,sEPmEf,IAAIE,QAAJ,uCAAY,WAAMC,EAASC,GAAf,iBAAAJ,EAAA,+EAEO6J,IAFP,cAEXmJ,EAFW,gBAGO5J,IAHP,cAGT1G,EAHS,OAIfsQ,EAAYA,EAAU5Q,KAAI,SAACC,GAMzB,OALAK,EAAQuH,SAAQ,SAAC5G,GACXA,EAAI6F,SAASuH,SAASpO,EAAKuM,QAC7BvM,EAAK2H,OAAS3G,EAAI6F,aAGf7G,KAVM,UAaTyG,IAAYK,QAAQ,aAAc6J,GAbzB,QAcf7S,EAAQ,WAdO,kDAgBfC,EAAO,EAAD,IAhBS,0DAAZ,yDOnEe,OAEpBqP,KAAQY,QAAQ,4BAChBlG,EAAOmG,uBACPnG,EAAOiH,0BAJa,2CAAH,qDAmBnB,OAZAhO,qBAAU,WAER,GAAIqP,EAAO,CACT,IAAMzM,EAAMyM,EAAM7C,IAAI,SAAW,GAFtB,CAAC,QAAS,OAGZa,SAASzK,GAChB8M,EAAO9M,GAEP8M,EAAO,YAGV,CAACL,IAGF,6BAAS9M,UAAU,cACjB,6BAASA,UAAU,gBACjB,kBAAC,GAAD,MACA,iCACE,kBAAC,KAAD,CAAQ0B,QAAS0L,GAAjB,wCACA,uBAAGpN,UAAU,QAAb,4LAGJ,6BAASA,UAAU,iBACjB,kBAAC,KAAD,CAAMsN,UAAWjN,EAAKU,SAlCR,SAACV,GACnBuM,EAAQnO,KAAR,UAAgByO,EAAOK,SAAvB,iBAAwClN,MAkClC,kBAACoM,GAAD,CAASe,IAAI,2BAAOnN,IAAI,SACtB,kBAAC,GAAD,OAEF,kBAACoM,GAAD,CAASe,IAAI,2BAAOnN,IAAI,OACtB,kBAAC,GAAD,WCtDGoN,GANF,WACX,OACE,oCC+BWC,I,OA7BF,WAEX,OACE,6BAAS1N,UAAU,aACjB,6BAASA,UAAU,eACjB,6BAASA,UAAU,OACjB,uBAAGA,UAAU,YACX,kBAAC,IAAD,CAAS2N,GAAG,IAAIC,OAAK,GAArB,iBAEF,uBAAG5N,UAAU,YACX,kBAAC,IAAD,CAAS2N,GAAG,UAAZ,8BAGJ,6BAAS3N,UAAU,aACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6N,KAAK,SAASD,OAAK,GACxB,kBAACE,GAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,IAAID,OAAK,GACnB,kBAAC,GAAD,UAKR,kBAAC,EAAD,S,OCiBSG,OAjBf,WACE,OACE,6BAAS/N,UAAU,cACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6N,KAAK,IAAID,OAAK,GACnB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOC,KAAK,IAAID,OAAK,GACnB,kBAAC,GAAD,W,8BC9BZzK,IAAY6K,OAAO,CACjB/E,KAAM,eAKRgF,IAAS/B,OACP,kBAAC,KAAD,CAAgBgC,OAAQC,MACtB,kBAAC,GAAD,OAIFzO,SAAS0O,eAAe,W","file":"static/js/main.142c03ab.chunk.js","sourcesContent":["import { get } from \"lodash\"\r\nimport { InterfaceLrc, InterfaceLrcWord, InterfaceMusicInfo } from \"../Interface/music\"\r\n\r\n// 上次文件转化函数\r\nexport const loadFile = async (file: File, isBuffer = true): Promise<any> => {\r\n  if (!file) {\r\n    return ''\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.onload = (event: Event) => {\r\n      const target = event.target as FileReader\r\n      if (isBuffer) {\r\n        resolve(target.result ? new Blob([target.result]) : null)\r\n      } else {\r\n        resolve(target.result)\r\n      }\r\n    }\r\n    reader.onerror = reject\r\n    // 转化为blob\r\n    if (isBuffer) {\r\n      reader.readAsArrayBuffer(file)\r\n    } else {\r\n      reader.readAsText(file)\r\n    }\r\n  })\r\n}\r\n\r\n// 格式化歌曲信息保存\r\nexport const transformMusicInfo = (obj: any): InterfaceMusicInfo => {\r\n  const result: InterfaceMusicInfo = {\r\n    // 歌曲名\r\n    name: get(obj, 'common.title', ''),\r\n    // 专辑名\r\n    album: get(obj, 'common.album', ''),\r\n    // 专辑主导艺人\r\n    albumartist: get(obj, 'common.albumartist', ''),\r\n    // 专辑艺人\r\n    artist: get(obj, 'common.artist', ''),\r\n    // 专辑艺人列表\r\n    artists: get(obj, 'common.artists', []),\r\n    // 专辑备注: \r\n    comment: get(obj, 'common.comment', []),\r\n    // 歌曲时间\r\n    date: get(obj, 'common.date', 0),\r\n    // 歌曲图片\r\n    picture: get(obj, 'common.picture', []).map((item: any) => {\r\n      return `data:${item.format};base64,${uint8arrayToBase64(item.data)}`\r\n    }),\r\n    // 编码方式\r\n    codec: get(obj, 'format.codec', ''),\r\n    // 歌曲时长\r\n    duration: get(obj, 'format.duration', 0),\r\n    // 歌曲采样率\r\n    sampleRate: get(obj, 'format.sampleRate', ''),\r\n    // 对应的歌词信息 key\r\n    lrc: ''\r\n  }\r\n  return result\r\n}\r\n\r\n\r\nexport const uint8arrayToBase64 = (u8Arr: { length: any; subarray: (arg0: number, arg1: number) => any }): string => {\r\n  let CHUNK_SIZE = 0x8000; //arbitrary number\r\n  let index = 0;\r\n  let length = u8Arr.length;\r\n  let result = '';\r\n  let slice;\r\n  while (index < length) {\r\n    slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\r\n    result += String.fromCharCode.apply(null, slice);\r\n    index += CHUNK_SIZE;\r\n  }\r\n  return btoa(result);\r\n}\r\n\r\n// 歌词解析算法 - 逐行解析的歌词\r\nexport const formatLrc = (lrc: string): InterfaceLrc[] => {\r\n  // ti: 歌曲标题  ar: 歌唱者  al:  唱片集\r\n  // 格式  [00:01.01]七里香 - 周杰伦   或者 [01:20.64][01:47.80][02:41.96][03:35.77]雨下整夜我的爱溢出就像雨水\r\n\r\n  // 如果两个数组中间有文字 类似[01:20.64]我[01:47.80] 表示这个是是单字解析的歌词，那么我们就进行二次加工处理\r\n  let lrc_s = lrc\r\n  if (lrc_s) {\r\n    lrc_s = lrc_s.replace(/([^\\]^\\n])\\[/g, (match, p1) => p1 + '\\n[');\r\n    const lyric = lrc_s.split('\\n');\r\n    let res = [];\r\n    const lyricLen = lyric.length;\r\n    for (let i = 0; i < lyricLen; i++) {\r\n      // match lrc time\r\n      const lrcTimes = lyric[i].match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g);\r\n      // match lrc text\r\n      const lrcText = lyric[i]\r\n        .replace(/.*\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g, '')\r\n        .replace(/<(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?>/g, '')\r\n        .replace(/^\\s+|\\s+$/g, '');\r\n\r\n      if (lrcTimes) {\r\n        // handle multiple time tag\r\n        const timeLen = lrcTimes.length;\r\n        for (let j = 0; j < timeLen; j++) {\r\n          const lrcTime = transformArrayToTime(lrcTimes[j])\r\n          res.push({\r\n            time: lrcTime,\r\n            text: lrcText\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // sort by time\r\n    res = res.filter((item: InterfaceLrc) => item.text);\r\n    res.sort((a: InterfaceLrc, b: InterfaceLrc) => a.time - b.time);\r\n    return res;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\n// 格式化时间显示\r\nexport const formatTime = (secs: number): string => {\r\n  const minutes = Math.floor(secs / 60) || 0;\r\n  const seconds = ~~(secs - minutes * 60) || 0;\r\n  return (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n}\r\n\r\n// 返回当前歌词选中的索引\r\nexport const getChooseLrcIndex = (lrcList: InterfaceLrc[], time: number): number => {\r\n  if (lrcList.length <= 0) return -1\r\n  let index = 0\r\n  // 如果比当前时间小，那么聚焦当前时间\r\n  while (index < lrcList.length) {\r\n    if (lrcList[index].time > time) {\r\n      break\r\n    }\r\n    index++\r\n  }\r\n  return index - 1\r\n}\r\n\r\n// 歌词解析算法 - 逐行-分字解析歌词\r\nexport const formatLrcProgress = (lrc: string): InterfaceLrcWord[][] => {\r\n  let res: any[] = []\r\n  console.log('进入逐字解析的歌词哦')\r\n  // 逐字的歌词 ->  每行开始时间， 每个字开始时间 -> 计算百分比进行每个字覆盖\r\n  // 先按照 \\n 进行换行处理，然后正则提出每个字的时间，然后计算出每行的开始时间\r\n  let lrcStr = lrc\r\n  const lyric = lrcStr.split('\\n')\r\n  let i = 0\r\n  while (i < lyric.length) {\r\n    let cur = lyric[i].replace(/\\s/g, '')\r\n    const lrcTimes = cur.match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g)\r\n    const lrcText = cur.match(/(?<=\\])\\S\\s?(?=\\[)/g)\r\n    if (lrcTimes && lrcText) {\r\n      // console.log(lrcTimes, lrcText)\r\n      // 时间是 [[00:32.27], [00:32.27]] 数组，  子也是数组\r\n      // 数据结构，每个字开始时间和结束时间 start = j + 1    end j - 1\r\n      const lineTime = []\r\n      for (let j = 0; j < lrcText.length; j++) {\r\n        lineTime.push({\r\n          text: lrcText[j],\r\n          start: transformArrayToTime(lrcTimes[j]),\r\n          end: transformArrayToTime(lrcTimes[j + 1])\r\n        })\r\n      }\r\n      res.push(lineTime)\r\n    }\r\n    i++\r\n  }\r\n  return res\r\n}\r\n\r\n// 转换时间 [00:42.27] -> 11ms\r\nexport const transformArrayToTime = (str: string): number => {\r\n  let time = 0\r\n  const timeArr: number[] = /\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/.exec(str)?.map(item => {\r\n    return item ? Number(item) : 0\r\n  }) || []\r\n  const min2sec = timeArr[1] * 60;\r\n  const sec2sec = timeArr[2];\r\n  const msec2sec = timeArr[4] ? timeArr[4] / ((timeArr[4] + '').length === 2 ? 100 : 1000) : 0;\r\n  time = min2sec + sec2sec + msec2sec;\r\n  return time\r\n}\r\n\r\n// 获取逐字歌词的当前行\r\nexport const getChooseLrcWordIndex = (lrcList: InterfaceLrcWord[][], time: number): number => {\r\n  if (lrcList.length <= 0) return -1\r\n  let index = 0\r\n  // 如果比当前时间小，那么聚焦当前时间\r\n  while (index < lrcList.length) {\r\n    if (lrcList[index][0].start > time) {\r\n      break\r\n    }\r\n    index++\r\n  }\r\n  return index - 1\r\n}\r\n\r\n\r\n// 获取逐字歌词的当前行的百分比\r\nexport const getWordLineProgress = (lrcItem: InterfaceLrcWord[], time: number): number => {\r\n  if (!lrcItem) return 0\r\n  let progress = 0\r\n  // 看看在当前时间的哪个字，同时看看占比当前时间间隙的百分比\r\n  let wordIndex = 0\r\n  // 如果比当前字小，那么聚焦上一个字\r\n  while (wordIndex < lrcItem.length) {\r\n    if (lrcItem[wordIndex].start > time) {\r\n      break\r\n    }\r\n    wordIndex++\r\n  }\r\n  if (wordIndex <= 0) return 0\r\n  if (wordIndex >= lrcItem.length) return 100\r\n  // 知道哪个字后, 看看一共多少字，然后分百分比，这里从 0 开始，实际少了一个字\r\n  progress = wordIndex * (100 / lrcItem.length)\r\n  // 如果当前时间比字结束时间大，那么是 100%\r\n  const cur = lrcItem[wordIndex - 1]\r\n  if (time >= cur.end) {\r\n    return 100\r\n  }\r\n  if (time <= cur.start) {\r\n    return (wordIndex - 1) * (100 / lrcItem.length)\r\n  }\r\n  const len = cur.end - cur.start\r\n  progress += (time - cur.start) / len * (100 / lrcItem.length)\r\n  return progress\r\n}\r\n\r\n// 滚动函数\r\nexport const goScroll = (top: number, target: HTMLElement) => {\r\n  let requestAnimationFrame: any = null\r\n  if (window.requestAnimationFrame) {\r\n    requestAnimationFrame = window.requestAnimationFrame\r\n  } else {\r\n    requestAnimationFrame = setTimeout((fn) => {\r\n      fn()\r\n    }, 17)\r\n  }\r\n  // 当前时间\r\n  let t = 0\r\n  // 初始值\r\n  const b = target.scrollTop\r\n  // 变化量\r\n  const c = top - b\r\n\r\n  // 如果变化量太大，直接终止\r\n  if (Math.abs(c) > 200) {\r\n    target.scrollTo({\r\n      top,\r\n      behavior: 'smooth'\r\n    })\r\n    return\r\n  }\r\n  // 持续时间\r\n  const d = 32\r\n  const step = () => {\r\n    let top = Tween.Linear(t, b, c, d)\r\n    target.scrollTo({\r\n      top\r\n    })\r\n    t += 1\r\n    if (t <= d) {\r\n      requestAnimationFrame(step)\r\n    }\r\n  }\r\n  step()\r\n}\r\n// 运动\r\nconst Tween = {\r\n  Linear: function (t: number, b: number, c: number, d: number): number {\r\n    return c * t / d + b;\r\n  },\r\n  QuadIn: function (t: number, b: number, c: number, d: number): number {\r\n    return c * (t /= d) * t + b;\r\n  },\r\n  QuadOut: function (t: number, b: number, c: number, d: number): number {\r\n    return -c * (t /= d) * (t - 2) + b;\r\n  },\r\n  QuadInOut: function (t: number, b: number, c: number, d: number): number {\r\n    if ((t /= d / 2) < 1) return c / 2 * t * t + b;\r\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\r\n  },\r\n  CubicIn: function (t: number, b: number, c: number, d: number): number {\r\n    return c * (t /= d) * t * t + b;\r\n  }\r\n}","import React, { useEffect, useRef, useState } from \"react\"\r\nimport { InterfaceLrc, InterfaceMusicInfo } from \"../../Interface/music\"\r\nimport { formatLrc, getChooseLrcIndex } from \"../../utils\"\r\nimport './index.scss'\r\nconst Lrc = (props: {\r\n  lrc: string,\r\n  currentInfo: InterfaceMusicInfo | null,\r\n  currentTime: number,\r\n  isPlaying: boolean,\r\n  setCurrentLrc: Function,\r\n  color?: string\r\n}) => {\r\n  // 保存当前渲染的歌词列表\r\n  const [lrcList, setLrcList] = useState<InterfaceLrc[]>([])\r\n\r\n  // 需要渲染的歌词\r\n  const [lrcIndex, setLrcIndex] = useState(-1)\r\n\r\n  // 歌词滚动容器\r\n  const lrcScroll = useRef(null);\r\n\r\n  // 当前是否可以进行歌词的自动滚动\r\n  const [canScroll, setCanScroll] = useState(true)\r\n\r\n  // 当前每行滚动的高度\r\n  const [lineHeight, setLineHeight] = useState(0)\r\n\r\n  const topLine = 1\r\n   \r\n  useEffect(() => {\r\n    setLrcList(formatLrc(props.lrc))\r\n  }, [props.lrc])\r\n\r\n  useEffect(() => {\r\n    setLrcIndex(\r\n      getChooseLrcIndex(lrcList, props.currentTime)\r\n    )\r\n    if (lrcList.length && lrcList[lrcIndex]) {\r\n      props.setCurrentLrc(lrcList[lrcIndex].text)\r\n    }\r\n  }, [lrcIndex, lrcList, props, props.currentTime])\r\n\r\n  useEffect(() => {\r\n    if (lrcScroll && canScroll && props.isPlaying) {\r\n      // 计算当前歌词应该需要滚动的场景\r\n      const target: any = lrcScroll.current\r\n      const top = lineHeight * (lrcIndex - topLine) || 0\r\n      if (target) {\r\n        target.scrollTo({\r\n          top,\r\n          behavior: 'smooth'\r\n        })\r\n        // goScroll(top, target)\r\n      }\r\n    }\r\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\r\n\r\n  const getLrcChooseName = (index: number) => {\r\n    // 这里处理下其他的, 最近 10 条显示\r\n    if(lrcIndex === index) {\r\n      return 'choose-lrc'\r\n    }\r\n    // // 下面 10 条\r\n    // if (lrcIndex < index && (index - lrcIndex) < 10) {\r\n    //   return `choose-next-${index - lrcIndex}`\r\n\r\n    // }\r\n    // // 上面 5 条\r\n    // if (lrcIndex > index && (lrcIndex - index) < 5) {\r\n    //   return `choose-pre-${lrcIndex - index}`\r\n    // }\r\n    return ''\r\n  }\r\n  \r\n  const resize = () => {\r\n    // 浏览器高除以 高度 + \r\n    setLineHeight(document.body.offsetHeight * (5 + 2.5) / 100)\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', resize)\r\n    resize()\r\n    return () => {\r\n      window.removeEventListener('resize', resize)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <section className=\"music-lrc\"\r\n      ref={lrcScroll}\r\n      onMouseEnter={() => {\r\n        setCanScroll(false)\r\n      }}\r\n      onMouseLeave={() => {\r\n        if (!props.isPlaying) {\r\n          setCanScroll(true)\r\n          return\r\n        }\r\n        const target: any = lrcScroll.current\r\n        const top = lineHeight * (lrcIndex - topLine) || 0\r\n        if (target) {\r\n          target.scrollTo({\r\n            top,\r\n            behavior: 'auto'\r\n          })\r\n        }\r\n        setCanScroll(true)\r\n      }}>\r\n      {/* 渲染歌词列表 */}\r\n      <section className=\"lrc-list\">\r\n        {\r\n          lrcList.map((lrcItem: InterfaceLrc, index) => (\r\n            <p \r\n              key={ `${lrcItem.time}${lrcIndex}${lrcItem.text}`}\r\n              style={{\r\n                color: lrcIndex === index ? props.color : ''\r\n              }}\r\n              className={getLrcChooseName(index)}\r\n            >\r\n              { lrcItem.text}\r\n            </p>\r\n          ))\r\n        }\r\n      </section>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Lrc","import React, { useEffect, useState } from \"react\"\r\nimport './index.scss'\r\nimport { Slider } from 'antd';\r\n\r\nconst Progress = (props: {\r\n  range: number,\r\n  handleChanging: Function,\r\n  setChange: Function,\r\n}) => {\r\n\r\n  const [value, setValue] = useState(0)\r\n\r\n  const [isChanging, setIsChanging] = useState(false)\r\n\r\n\r\n  useEffect(() => {\r\n    if (!isChanging) {\r\n      setValue(props.range)\r\n    }\r\n  }, [isChanging, props.range])\r\n\r\n  const onChange = (value: number) => {\r\n    setIsChanging(true)\r\n    props.setChange(true)\r\n    setValue(value)\r\n    props.handleChanging(value)\r\n  }\r\n\r\n  const onAfterChange = (value: number) => {\r\n    // 已经取消拖动，可以同步跳转了\r\n    // console.log('afterChange', value)\r\n    props.setChange(false)\r\n    setIsChanging(false)\r\n  }\r\n\r\n  return (\r\n    <section className=\"progress\">\r\n       <Slider defaultValue={0} value={value} onChange={onChange} onAfterChange={onAfterChange} tooltipVisible={false} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Progress","import React, { useEffect, useState } from 'react';\r\nimport './index.scss'\r\nimport { InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../../Interface/music';\r\nimport { formatTime } from '../../utils';\r\nimport Progress from '../Progress';\r\nconst Control = (props: {\r\n  currentInfo: InterfaceMusicInfo | null,\r\n  currentTime: number,\r\n  isPlaying: boolean,\r\n  handlePlay: Function,\r\n  handlePause: Function,\r\n  handleChanging: Function,\r\n  setChange: Function,\r\n  musicPlayingInfo: InterfaceMusicPlayingInfo,\r\n  min?: Boolean\r\n}) => {\r\n\r\n  const [range, setRange] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const allTime = props.currentInfo?.duration || props.musicPlayingInfo.duration || 0\r\n    setRange(\r\n      (props.currentTime / allTime) * 100\r\n    )\r\n  }, [props.currentInfo, props.currentTime, props.musicPlayingInfo.duration])\r\n\r\n  return (\r\n    <section className=\"player-control\">\r\n      {\r\n        props.min ? (\r\n          <section className=\"control-min\">\r\n            <p className=\"icon-play-bg\" onClick={\r\n              () => {\r\n                if (props.isPlaying) {\r\n                  props.handlePause()\r\n                } else {\r\n                  props.handlePlay()\r\n                }\r\n              }\r\n            }>\r\n              {\r\n                props.isPlaying ? (\r\n                  <svg className=\"icon icon-pause\" aria-hidden=\"true\">\r\n                    <use xlinkHref=\"#icon-Pause\"></use>\r\n                  </svg>\r\n\r\n                ) : (\r\n                    <svg className=\"icon icon-play\" aria-hidden=\"true\">\r\n                      <use xlinkHref=\"#icon-Play\"></use>\r\n                    </svg>\r\n\r\n                  )\r\n              }\r\n            </p>\r\n            <section className=\"control-progress\">\r\n              <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\r\n              {/* <span>歌曲进度百分比: { range.toFixed(2) }%</span> */}\r\n            </section>\r\n            <section className=\"line-left\">\r\n              <span> {formatTime(props.currentTime || 0)} </span>\r\n              <span>/</span>\r\n              <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\r\n            </section>\r\n          </section>\r\n        ) : (\r\n            <section className=\"control\">\r\n              <section className=\"control-progress\">\r\n                <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\r\n                {/* <span>歌曲进度百分比: { range.toFixed(2) }%</span> */}\r\n              </section>\r\n              <section className=\"control-line\">\r\n                <section className=\"line-left\">\r\n                  <span> {formatTime(props.currentTime || 0)} </span>\r\n                  <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\r\n                </section>\r\n                <section className=\"line-center\">\r\n                  <p className=\"icon-play-bg\" onClick={\r\n                    () => {\r\n                      if (props.isPlaying) {\r\n                        props.handlePause()\r\n                      } else {\r\n                        props.handlePlay()\r\n                      }\r\n                    }\r\n                  }>\r\n                    {\r\n                      props.isPlaying ? (\r\n                        <svg className=\"icon icon-pause\" aria-hidden=\"true\">\r\n                          <use xlinkHref=\"#icon-Pause\"></use>\r\n                        </svg>\r\n\r\n                      ) : (\r\n                          <svg className=\"icon icon-play\" aria-hidden=\"true\">\r\n                            <use xlinkHref=\"#icon-Play\"></use>\r\n                          </svg>\r\n\r\n                        )\r\n                    }\r\n                  </p>\r\n                </section>\r\n              </section>\r\n            </section>\r\n          )\r\n      }\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Control","import React, { useEffect, useRef, useState } from \"react\"\r\nimport { InterfaceLrcWord, InterfaceMusicInfo } from \"../../Interface/music\"\r\nimport { formatLrcProgress, getChooseLrcWordIndex, getWordLineProgress} from \"../../utils\"\r\nimport './index-word.scss'\r\n// 逐字渲染的歌词\r\n\r\nconst LrcWord = (props: {\r\n  lrc: string,\r\n  currentInfo: InterfaceMusicInfo | null,\r\n  currentTime: number,\r\n  isPlaying: boolean,\r\n  setCurrentLrc: Function,\r\n  color?: string\r\n}) => {\r\n  // 保存当前渲染的歌词列表\r\n  const [lrcList, setLrcList] = useState<InterfaceLrcWord[][]>([])\r\n\r\n  // 需要渲染的歌词\r\n  const [lrcIndex, setLrcIndex] = useState(-1)\r\n\r\n  // 歌词滚动容器\r\n  const lrcScroll = useRef(null);\r\n\r\n  // 当前是否可以进行歌词的自动滚动\r\n  const [canScroll, setCanScroll] = useState(true)\r\n\r\n  // 当前进度\r\n  const [bg, setBg] = useState({\r\n    backgroundImage: ''\r\n  })\r\n\r\n  // 当前每行滚动的高度\r\n  const [lineHeight, setLineHeight] = useState(0)\r\n\r\n  const topLine = 1\r\n   \r\n  useEffect(() => {\r\n    setLrcList(formatLrcProgress(props.lrc))\r\n  }, [props.lrc])\r\n\r\n  useEffect(() => {\r\n    setLrcIndex(\r\n      getChooseLrcWordIndex(lrcList, props.currentTime)\r\n    )\r\n    if (lrcList[lrcIndex] && lrcList[lrcIndex].length) {\r\n      const text = lrcList[lrcIndex].map(item => {\r\n        return item.text\r\n      })\r\n      props.setCurrentLrc(text.join(''))\r\n    }\r\n    const key = getWordLineProgress(lrcList[lrcIndex], props.currentTime)\r\n    setBg(\r\n      {\r\n        backgroundImage: `-webkit-linear-gradient(left,${props.color} ${key}%,#ffffff ${key}%)`\r\n      }\r\n    )\r\n  }, [lrcIndex, lrcList, props, props.currentTime])\r\n\r\n  useEffect(() => {\r\n    if (lrcScroll && canScroll && props.isPlaying) {\r\n      // 计算当前歌词应该需要滚动的场景\r\n      const target: any = lrcScroll.current\r\n      const top = lineHeight * (lrcIndex - topLine) || 0\r\n      if (target) {\r\n        target.scrollTo({\r\n          top,\r\n          behavior: 'smooth'\r\n        })\r\n      }\r\n    }\r\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\r\n\r\n  const getLrcChooseName = (index: number) => {\r\n    return lrcIndex === index ? 'choose-lrc-line' : ''\r\n  }\r\n\r\n  const resize = () => {\r\n    // 浏览器高除以 高度 + \r\n    setLineHeight(document.body.offsetHeight * (5 + 2.5) / 100)\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', resize)\r\n    resize()\r\n    return () => {\r\n      window.removeEventListener('resize', resize)\r\n    }\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <section className=\"music-lrc-word\"\r\n      ref={lrcScroll}\r\n      onMouseEnter={() => {\r\n        setCanScroll(false)\r\n      }}\r\n      onMouseLeave={() => {\r\n        setCanScroll(true)\r\n        if (!props.isPlaying) {\r\n          return\r\n        }\r\n        const target: any = lrcScroll.current\r\n        const top = lineHeight * (lrcIndex - topLine) || 0\r\n        if (target) {\r\n          target.scrollTo({\r\n            top,\r\n            behavior: 'auto'\r\n          })\r\n        }\r\n      }}>\r\n      {/* 渲染歌词列表 */}\r\n      <section className=\"lrc-list\">\r\n        {\r\n          lrcList.map((lrcItem: InterfaceLrcWord[], index) => (\r\n            <section key={ index } className=\"lrc-line\">\r\n              <p className={getLrcChooseName(index)} style={lrcIndex === index ? bg : {}}>\r\n                {\r\n                  lrcItem.map((word: InterfaceLrcWord, i) => (\r\n                    <span key={ i }>{word.text}</span>\r\n                  ))\r\n                }\r\n              </p>\r\n            </section>\r\n          ))\r\n        }\r\n      </section>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default LrcWord","/**\r\n * 所有对数据操作的集合，包括存储数据， 查询数据\r\n * \r\n * 1. 歌曲的储存方式\r\n *   MusicList  InterfaceMusicInfo  \r\n *   id -> 名称生成的hash 值\r\n *   lrc ->   歌词，在列表进行操作关联\r\n *   music -> 歌曲的 blob，播放时进行查询关联\r\n *    \r\n * \r\n *   music-名称生成的hash 值, 随机储存, 播放通过歌曲信息的 hash 值获取具体文件流\r\n * \r\n *   LrcList  InterfaceLrcInfo  id -> 名称生成的hash 值, 文件本身存在列表里面\r\n * \r\n */\r\n\r\nimport localforage from 'localforage'\r\nimport { InterfaceLrcInfo, InterfaceMusicInfo } from '../Interface/music'\r\n\r\n /**\r\n  * 添加歌词的存储方法\r\n  * key: music-lrc-list\r\n  */\r\n export const addLrc = async (lrc: InterfaceLrcInfo):Promise<any> => {\r\n    const key = 'music-lrc-list'\r\n    // 歌词，直接拉出列表，然后塞进去，储存\r\n    const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\r\n    // 这里需要判断下是否已经存在\r\n    let noExist = list.every(item => item.fileName !== lrc.fileName)\r\n    if (noExist) {\r\n      list.push(lrc)\r\n    }\r\n    return localforage.setItem('music-lrc-list', list)\r\n}\r\n\r\n// 获取歌词列表\r\nexport const getLrcList = async ():Promise<InterfaceLrcInfo[]>  => {\r\n  const key = 'music-lrc-list'\r\n  const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\r\n  return list\r\n}\r\n\r\n/**\r\n * 添加歌曲列表方法\r\n * music-list\r\n * 具体流地址 music-名称生成的hash 值\r\n */\r\n\r\nexport const addMusic = async (musicInfo: InterfaceMusicInfo, blob: Blob):Promise<any> => {\r\n  const key = 'music-list'\r\n  // 歌词，直接拉出列表，然后塞进去，储存\r\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\r\n  // 这里需要判断下是否已经存在\r\n  let noExist = list.every(item => item.fileName !== musicInfo.fileName)\r\n  if (noExist) {\r\n    // 这里需要去存储文件流\r\n    const musicHash = `${musicInfo.fileName}-${Math.random() * 100}-${Date.now()}`\r\n    musicInfo.id = musicHash\r\n    await localforage.setItem(musicHash, blob)\r\n    list.push(musicInfo)\r\n  }\r\n  return localforage.setItem('music-list', list)\r\n}\r\n\r\n// 获取歌曲列表\r\nexport const getMusicList = async ():Promise<InterfaceMusicInfo[]>  => {\r\n  const key = 'music-list'\r\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\r\n  return list\r\n}\r\n\r\n// 获取单首歌词信息\r\nexport const getMusicInfoFromLocal = async (id: string): Promise<InterfaceMusicInfo> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const list = await localforage.getItem('music-list') as InterfaceMusicInfo[] || []\r\n    const cur = list.filter((item: InterfaceMusicInfo) => item.id === id)[0]\r\n    if (!cur) {\r\n      reject('获取歌曲信息失败')\r\n    } else {\r\n      cur.music = await localforage.getItem(id)  as Blob\r\n      if (cur.lrcKey) {\r\n         const lrcList = await getLrcList()\r\n         lrcList.forEach(item => {\r\n           if (item.fileName === cur.lrcKey) {\r\n            cur.lrc = item.content\r\n           }\r\n         })\r\n      }\r\n      resolve(cur)\r\n    }\r\n  })\r\n} \r\n\r\n// 自动关联歌曲歌词\r\nexport const MusicRelatedLrc = (): Promise<string> => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let musicList = await getMusicList()\r\n      const lrcList = await getLrcList()\r\n      musicList = musicList.map((item: InterfaceMusicInfo) => {\r\n        lrcList.forEach((lrc: InterfaceLrcInfo) => {\r\n          if (lrc.fileName.includes(item.name)) {\r\n            item.lrcKey = lrc.fileName\r\n          }\r\n        })\r\n        return item\r\n      })\r\n      // console.log(musicList)\r\n      await localforage.setItem('music-list', musicList)\r\n      resolve('success')\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  })\r\n}","import { observable, action } from 'mobx';\r\nimport { InterfaceLrcInfo, InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../Interface/music';\r\nimport { Howl } from 'howler'\r\nimport { getLrcList, getMusicList } from '../utils/local';\r\nclass Common {\r\n  // 音乐播放实例\r\n  @observable\r\n  musicPlayer: Howl | null = null\r\n\r\n  @action\r\n  createdPlayer () {\r\n    if (this.musicInfo) {\r\n      this.updatedMusicData({\r\n        playing: false,\r\n      })\r\n      this.musicPlayer = new Howl({\r\n        autoplay: true,\r\n        src: URL.createObjectURL(this.musicInfo.music),\r\n        // src: 'https://jay-music1.oss-cn-beijing.aliyuncs.com/01.%E7%88%B1%E5%9C%A8%E8%A5%BF%E5%85%83%E5%89%8D.flac?Expires=1611355123&OSSAccessKeyId=TMP.3KgLmqPNAzpF5wPEETMh2Dq86Wcz5FyeAHsHEtGksuQw9c7y5jm7LQWDLJ2Vv1cbwnpfTdrM8S4K19VLMAmCX51Cp1tbeD&Signature=zSC5jpvQqvd1BCBjjXGwUMT0g%2Bw%3D',\r\n        // src: 'http://qna13isfq.hn-bkt.clouddn.com/07.%E7%88%B7%E7%88%B7%E6%B3%A1%E7%9A%84%E8%8C%B6.flac',\r\n        html5: true,\r\n        format: [this.musicInfo.codec.toLowerCase() || String(this.musicInfo.fileType).toLowerCase()],\r\n        volume: 1,\r\n        onplay: this.handlePlay,\r\n        onpause: this.handlePause,\r\n        onend: this.handleEnd,\r\n        onstop: this.handleStop\r\n      })\r\n    }\r\n  }\r\n\r\n  handlePlay = () => {\r\n    console.log('歌曲播放了')\r\n    this.updatedMusicData({\r\n      currentTime: this.musicPlayer?.seek(),\r\n      duration: this.musicPlayer?.duration(),\r\n      playing: true,\r\n      change: false\r\n    })\r\n    if (this.musicInfo && !this.musicInfo.duration) {\r\n      this.musicInfo.duration = Number(this.musicPlayer?.duration())\r\n    }\r\n  }\r\n\r\n  handlePause = () => {\r\n    console.log('歌曲暂停了')\r\n    this.updatedMusicData({\r\n      currentTime: this.musicPlayer?.seek(),\r\n      playing: false,\r\n    })\r\n  }\r\n\r\n  handleEnd = () => {\r\n    console.log('歌曲播放完了')\r\n    this.updatedMusicData({\r\n      currentTime: this.musicPlayer?.seek(),\r\n      playing: false,\r\n    })\r\n    requestAnimationFrame(this.handlePlaying)\r\n  }\r\n\r\n  handleStop = () => {\r\n    console.log('歌曲停止')\r\n    this.updatedMusicData({\r\n      currentTime: this.musicPlayer?.seek(),\r\n      playing: false,\r\n    })\r\n  }\r\n\r\n  handlePlaying = () => {\r\n    if (!this.musicData.change && this.musicPlayer && this.musicPlayer.playing()) {\r\n      this.updatedMusicData({\r\n        type: 'update',\r\n        currentTime: this.musicPlayer.seek()\r\n      })\r\n      requestAnimationFrame(this.handlePlaying)\r\n    }\r\n  }\r\n\r\n  @action\r\n  destroyPlayer () {\r\n    this.musicPlayer = null\r\n  }\r\n\r\n\r\n  @observable\r\n  musicInfo: InterfaceMusicInfo | null = null\r\n\r\n  @action\r\n  updatedMusicInfo (data: InterfaceMusicInfo) {\r\n    if (data.picture.length === 0) {\r\n      data.picture = [`${process.env.PUBLIC_URL}/images/music-no.jpeg`]\r\n    }\r\n    this.musicInfo = data\r\n  }\r\n  \r\n \r\n\r\n  // 当前音乐播放的数据\r\n  @observable\r\n  musicData: InterfaceMusicPlayingInfo  = {\r\n    id: '',\r\n    playing: false,\r\n    duration: 0,\r\n    currentTime: 0,\r\n    change: false,\r\n    min: true\r\n  }\r\n\r\n  @action\r\n  updatedMusicData (data: any) {\r\n    if (data.type === 'update') {\r\n      this.musicData.currentTime = data.currentTime\r\n      return\r\n    }\r\n    // 判断 body 样式\r\n    if (data.hasOwnProperty('min')) {\r\n      if (data.min) {\r\n        document.body.classList.remove('dialog-screen')\r\n      } else {\r\n        document.body.classList.add('dialog-screen')\r\n      }\r\n    }\r\n    if (!data.change) {\r\n      setTimeout(() => {\r\n        requestAnimationFrame(this.handlePlaying)\r\n      }, 100)\r\n    }\r\n    this.musicData = {\r\n      ...this.musicData,\r\n      ...data\r\n    }\r\n  }\r\n\r\n  // 本地音乐展示列表\r\n  @observable\r\n  localMusicList: InterfaceMusicInfo[] = []\r\n  @observable\r\n  localMusicLoading: boolean = false\r\n\r\n  @action\r\n  updateLocalMusicList = async () => {\r\n    this.localMusicLoading = true\r\n    this.localMusicList = await getMusicList()\r\n    this.localMusicLoading = false\r\n\r\n  }\r\n\r\n\r\n  // 本地歌词展示列表\r\n  localMusicLrcList: InterfaceLrcInfo[] = []\r\n  @observable\r\n  localMusicLrcLoading: boolean = false\r\n\r\n  @action\r\n  updateLocalMusicLrcList = async () => {\r\n    this.localMusicLrcLoading = true\r\n    this.localMusicLrcList = await getLrcList()\r\n    this.localMusicLrcLoading = false\r\n  }\r\n\r\n}\r\n\r\nconst common = new Common()\r\n\r\n\r\n \r\nexport default common\r\n\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport './index.scss'\r\n// import Upload from '../Upload'\r\nimport { InterfaceMusicInfo } from '../../Interface/music';\r\nimport Lrc from '../Lrc';\r\nimport Control from '../Control';\r\nimport LrcWord from '../Lrc/Lrc-word';\r\nimport FastAverageColor from 'fast-average-color';\r\nimport { setLightness, setSaturation } from 'polished';\r\nimport { getMusicInfoFromLocal } from '../../utils/local';\r\nimport { DownOutlined } from '@ant-design/icons';\r\nimport { observer } from \"mobx-react\"\r\nimport common from '../../store/common';\r\n\r\nconst fac = new FastAverageColor();\r\n\r\nconst Player = observer(() => {\r\n\r\n  // const [musicPlayer, setMusicPlayer] = useState<Howl | null>(null)\r\n  const musicPlayer = common.musicPlayer\r\n\r\n  const musicInfo = common.musicInfo\r\n\r\n  // 当前的状态, 用来做歌曲时间，还是当前拖动时间的判定\r\n  const musicData = common.musicData\r\n\r\n\r\n  const [musicColor, setMusicColor] = useState('#1890ff')\r\n\r\n\r\n  const [currentLrc, setCurrentLrc] = useState('')\r\n\r\n  const refChange = useRef(false)\r\n\r\n  const handleChanging = (value: number) => {\r\n    // 当前拖动时间的改变\r\n    // 反推出当前时间\r\n    const time = (musicInfo?.duration || 0) * value / 100\r\n    common.updatedMusicData(\r\n      {\r\n        currentTime: time\r\n      }\r\n    )\r\n  }\r\n\r\n  const setChangeFromControl = (key: boolean) => {\r\n    if (!key) {\r\n      // 表示操作结束，开始同步数据，播放\r\n      musicPlayer?.seek(musicData.currentTime)\r\n      if (!musicData.playing) {\r\n        musicPlayer?.play()\r\n      }\r\n    }\r\n    common.updatedMusicData({\r\n      change: key\r\n    })\r\n  }\r\n\r\n  const getInfoFormLocal = useCallback(async () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      const res = await getMusicInfoFromLocal(musicData.id)\r\n      if (res) {\r\n        resolve(res)\r\n      } else {\r\n        reject('歌曲播放获取失败')\r\n      }\r\n    })\r\n  }, [musicData.id])\r\n\r\n  // 歌曲停止事件\r\n  // const handleStop = useCallback(() => {\r\n  //   if (musicPlayer) {\r\n  //     musicPlayer.stop()\r\n  //   }\r\n  // }, [musicPlayer])\r\n\r\n  // 歌曲播放事件\r\n  const handelPlay = useCallback(() => {\r\n    if (musicPlayer) {\r\n      if (!musicPlayer.playing()) {\r\n        musicPlayer.play()\r\n      } else {\r\n        musicPlayer.pause()\r\n      }\r\n    }\r\n  }, [musicPlayer])\r\n\r\n  const getMusicInfo = useCallback(async () => {\r\n    if (!musicData.id) return\r\n    const info: InterfaceMusicInfo = await getInfoFormLocal() as InterfaceMusicInfo\r\n    if (!info) return\r\n    common.updatedMusicInfo(info)\r\n    fac.getColorAsync(info.picture[0])\r\n      .then(color => {\r\n        setMusicColor(\r\n          setSaturation(.8, setLightness(.5, color.rgba))\r\n        )\r\n      })\r\n      .catch(e => {\r\n        setMusicColor(\r\n          '#1890ff'\r\n        )\r\n      });\r\n  }, [getInfoFormLocal, musicData.id])\r\n\r\n  // 绑定键盘事件\r\n  const keyDown = useCallback((event: any) => {\r\n    event.preventDefault()\r\n    const keyCode = event.keyCode as number\r\n    if (keyCode === 32) {\r\n      handelPlay()\r\n    }\r\n  }, [handelPlay])\r\n\r\n  // 修改播放器状态\r\n  const handelChangeSize = () => {\r\n    common.updatedMusicData({\r\n      min: !musicData.min,\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('useEffect-getMusicInfo')\r\n    getMusicInfo()\r\n  }, [getMusicInfo])\r\n\r\n\r\n  useEffect(() => {\r\n    console.log('useEffect-create')\r\n    if (musicInfo && !musicPlayer) {\r\n      console.log('创建音乐实例')\r\n      common.createdPlayer()\r\n    }\r\n    return () => {\r\n      if (musicPlayer) {\r\n        console.log('created destroy')\r\n        common.updatedMusicData({\r\n          playing: false\r\n        })\r\n        common.destroyPlayer()\r\n      }\r\n    }\r\n  }, [musicInfo, musicPlayer])\r\n\r\n  useEffect(() => {\r\n    console.log('music-change-key')\r\n    refChange.current = musicData.change\r\n  }, [musicData.change])\r\n\r\n  useEffect(() => {\r\n    // 绑定enter 事件\r\n    window.addEventListener('keydown', keyDown)\r\n    return () => {\r\n      window.removeEventListener('keydown', keyDown)\r\n    }\r\n  }, [keyDown])\r\n\r\n\r\n  return (\r\n    <section className=\"player\">\r\n      {\r\n        musicData.min ? (\r\n          <section className=\"player-min\" style={{ color: musicColor }}>\r\n            {\r\n              musicInfo ? (\r\n                <section className=\"player-layout\">\r\n                  <section className=\"layout-left\">\r\n                    <section className=\"music-img\" onClick={handelChangeSize}>\r\n                      <img src={musicInfo.picture.length > 0 ? musicInfo.picture[0] : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\r\n                    </section>\r\n                    <section className=\"player-info\">\r\n                      <p className=\"music-name\">{musicInfo.name}</p>\r\n                      <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\r\n                    </section>\r\n                  </section>\r\n                  <section className=\"music-progress\">\r\n                    <Control\r\n                      handlePlay={handelPlay}\r\n                      handlePause={handelPlay}\r\n                      currentInfo={musicInfo || null}\r\n                      musicPlayingInfo={musicData}\r\n                      currentTime={musicData.currentTime}\r\n                      handleChanging={handleChanging}\r\n                      setChange={setChangeFromControl}\r\n                      min={musicData.min}\r\n                      isPlaying={musicData.playing}></Control>\r\n                  </section>\r\n                </section>\r\n              ) : (\r\n                  <section className=\"player-layout\">\r\n                    请选择歌曲进行播放\r\n                  </section>\r\n                )\r\n            }\r\n          </section>\r\n        ) : (\r\n            <section className=\"player-max\">\r\n              <section className=\"status-control\" onClick={handelChangeSize}>\r\n                <DownOutlined />\r\n              </section>\r\n              <section className=\"player-bg\" style={{ \"backgroundImage\": `url(${musicInfo?.picture[0] || process.env.PUBLIC_URL + '/images/music-no.jpeg'})` }}></section>\r\n              <section className=\"player-fade\"></section>\r\n              {/* <Upload></Upload> */}\r\n              {/* 这里去渲染歌曲信息 */}\r\n              <section className=\"player-layout\">\r\n                {\r\n                  musicInfo ?\r\n                    <section className=\"player-box\">\r\n\r\n                      <section className=\"player-left\">\r\n                        <section className=\"player-line\">\r\n                          <img src={musicInfo.picture.length > 0 ? musicInfo.picture[0] : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\r\n                        </section>\r\n                        <section className=\"player-line\">\r\n                          <section className=\"player-info\">\r\n                            <p className=\"music-name\">{musicInfo.name}</p>\r\n                            <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\r\n                            <p className=\"music-current-lrc\">{currentLrc}</p>\r\n                          </section>\r\n                        </section>\r\n                        <Control\r\n                          handlePlay={handelPlay}\r\n                          handlePause={handelPlay}\r\n                          currentInfo={musicInfo || null}\r\n                          musicPlayingInfo={musicData}\r\n                          currentTime={musicData.currentTime}\r\n                          handleChanging={handleChanging}\r\n                          setChange={setChangeFromControl}\r\n                          isPlaying={musicData.playing}></Control>\r\n                      </section>\r\n                      <section className=\"player-right\">\r\n                        {\r\n                          musicInfo.lrc?.match(/\\](\\S)\\[/g) ? (\r\n                            <LrcWord\r\n                              setCurrentLrc={setCurrentLrc}\r\n                              color={musicColor}\r\n                              lrc={musicInfo.lrc || ''}\r\n                              currentInfo={musicInfo || null}\r\n                              currentTime={musicData.currentTime}\r\n                              isPlaying={musicData.playing}></LrcWord>\r\n                          )\r\n                            : (\r\n                              <Lrc\r\n                                setCurrentLrc={setCurrentLrc}\r\n                                color={musicColor}\r\n                                lrc={musicInfo.lrc || ''}\r\n                                currentInfo={musicInfo || null}\r\n                                currentTime={musicData.currentTime}\r\n                                isPlaying={musicData.playing}></Lrc>\r\n                            )\r\n                        }\r\n                      </section>\r\n                    </section> : ''\r\n                }\r\n              </section>\r\n              {/* <section className=\"music-log\">\r\n                <p>歌曲播放状态 {musicData.playing ? '播放中' : '没有播放'}</p>\r\n                  <p>歌曲总时长 {formatTime(musicData.duration)}</p>\r\n                  <p>歌曲当前时间 {formatTime(musicData.currentTime)}</p>\r\n              </section> */}\r\n              {/* 这里是歌曲控制台的 */}\r\n            </section>\r\n          )\r\n      }\r\n    </section>\r\n  );\r\n})\r\n\r\nexport default Player\r\n","// 用来做文件解析， 文件生成， 歌词 歌曲匹配的配置文件\r\n\r\n// 支持的歌曲的格式\r\nexport const supportMusicFormat = [\r\n  'mp3', 'ogg', 'wav', 'aac', 'flac', 'dolby', 'opus', 'webm', 'alac'\r\n]\r\n\r\n// 支持的歌词的格式\r\nexport const supportMusicLrcFormat = [\r\n  'lrc', 'txt'\r\n]","import React from 'react';\r\nimport { loadFile, transformMusicInfo } from '../../utils';\r\nimport * as musicMetadata from 'music-metadata-browser'\r\nimport { Button, message, Upload } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport './index.scss'\r\nimport { supportMusicFormat, supportMusicLrcFormat } from '../../config'\r\nimport filesize from 'filesize'\r\nimport { InterfaceMusicInfo } from '../../Interface/music';\r\nimport { addLrc, addMusic } from '../../utils/local';\r\nimport common from '../../store/common';\r\n\r\nconst UploadFile = () => {\r\n  \r\n  const acceptStr = (): string => {\r\n    let arr = supportMusicFormat.concat(supportMusicLrcFormat)\r\n    arr = arr.map((item: string) => {\r\n      item = `.${item}`\r\n      return item\r\n    })\r\n    return arr.join(',')\r\n  }\r\n\r\n  const handleUpload = (File: File): boolean => {\r\n    const nameList = File.name.split('.')\r\n    const FileType = nameList[nameList.length - 1]\r\n    const FileName = File.name.replace(`.${FileType}`, '')\r\n    // 这里处理我们文件的存储\r\n    if (supportMusicFormat.includes(FileType)) {\r\n      console.log('当前是音频文件处理', FileName, FileType)\r\n      handleMusicData(File)\r\n      return false\r\n    }\r\n\r\n    if (supportMusicLrcFormat.includes(FileType)) {\r\n      console.log('当前是歌词文件处理', FileName, FileType)\r\n      handleMusicLrc(File)\r\n      return false\r\n    }\r\n    message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\r\n    return false\r\n  }\r\n\r\n  // 音频文件处理\r\n  const handleMusicData = async (File: File) => {\r\n    // console.log(File, filesize(File.size))\r\n    const nameList = File.name.split('.')\r\n    const FileType = nameList[nameList.length - 1]\r\n    const FileName = File.name.replace(`.${FileType}`, '')\r\n    let blob:Blob\r\n    let result\r\n    try {\r\n      blob = await loadFile(File, true)\r\n      result = await musicMetadata.parseBlob(blob)\r\n    } catch (error) {\r\n      message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\r\n      return\r\n    }\r\n    const data: InterfaceMusicInfo = transformMusicInfo(result)\r\n    data.fileName = FileName\r\n    data.fileType = FileType\r\n    data.fileSize = filesize(File.size)\r\n    data.size = File.size\r\n    data.name = data.name || data.fileName || '未知歌曲'\r\n    addMusic(data, blob).then(res => {\r\n      console.log(res)\r\n      message.success(`${File.name}  上传成功`)\r\n      common.updateLocalMusicList()\r\n    })\r\n  }\r\n\r\n  // 歌词文件处理\r\n  const handleMusicLrc = async (File: File) => {\r\n    const nameList = File.name.split('.')\r\n    const fileType = nameList[nameList.length - 1]\r\n    const fileName = File.name.replace(`.${fileType}`, '')\r\n    let result = ''\r\n    try {\r\n      result = await loadFile(File, false)\r\n    } catch (error) {\r\n      message.warning(`目前还不支持处理${fileType}这种类型文件，${fileName}`)\r\n      return\r\n    }\r\n    addLrc({\r\n      content: result,\r\n      fileName,\r\n      fileType,\r\n      size: File.size,\r\n      fileSize: filesize(File.size)\r\n    }).then(res => {\r\n      console.log(res)\r\n      message.success(`${File.name}  上传成功`)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section className=\"page-upload\">\r\n      <section className=\"upload-line\">\r\n        <Upload beforeUpload={handleUpload} showUploadList={false} accept={acceptStr()} multiple>\r\n          <Button icon={<UploadOutlined />}>点击上传本地歌曲或者歌词</Button>\r\n        </Upload>\r\n        <p className=\"tips\">\r\n          <span>支持歌曲格式 { supportMusicFormat.join('，')}</span>\r\n          <span>支持歌词格式 { supportMusicLrcFormat.join('，')}</span>\r\n        </p>\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default UploadFile","// 歌词列表展示\r\nimport { Table } from \"antd\"\r\nimport { observer } from \"mobx-react\"\r\nimport React, { useEffect } from \"react\"\r\nimport { InterfaceLrcInfo } from \"../../Interface/music\"\r\nimport common from \"../../store/common\"\r\n\r\nconst LrcList = observer(() => {\r\n  const columns = [\r\n    {\r\n      title: '歌词名',\r\n      dataIndex: 'fileName',\r\n      key: 'fileName',\r\n    },\r\n    {\r\n      title: '大小',\r\n      dataIndex: 'fileSize',\r\n      key: 'fileSize',\r\n      sorter: (a: InterfaceLrcInfo, b: InterfaceLrcInfo) => a.size - b.size\r\n    }\r\n  ]\r\n  const list = common.localMusicLrcList\r\n  const loading = common.localMusicLrcLoading\r\n\r\n  useEffect(() => {\r\n    console.log('获取歌词列表')\r\n    common.updateLocalMusicLrcList()\r\n  }, [])\r\n\r\n  return (\r\n    <section className=\"lrc-list\">\r\n      <Table\r\n        dataSource={list}\r\n        columns={columns}\r\n        pagination={false}\r\n        rowKey=\"fileName\"\r\n        loading={loading} />\r\n    </section>\r\n  )\r\n})\r\n\r\nexport default LrcList","// 歌词列表展示\r\nimport { Space, Table } from \"antd\"\r\nimport React, { useEffect } from \"react\"\r\nimport { InterfaceMusicInfo } from \"../../Interface/music\"\r\nimport { formatTime } from \"../../utils\"\r\nimport { observer } from \"mobx-react\"\r\nimport { PauseCircleOutlined, PlayCircleOutlined } from \"@ant-design/icons\"\r\nimport './index.scss'\r\nimport common from \"../../store/common\"\r\nconst MusicList = observer(() => {\r\n  const musicData = common.musicData\r\n  const list = common.localMusicList\r\n  const loading = common.localMusicLoading\r\n  const columns = [\r\n    {\r\n      title: '歌曲',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      render: (name: string, row: InterfaceMusicInfo) => \r\n        (\r\n          <p className=\"list-play\">\r\n            {\r\n              (musicData?.id === row.id && musicData.playing) ?\r\n              (\r\n                <span>\r\n                  <PauseCircleOutlined className=\"icon\" onClick={() => handlePauseClick()} />\r\n                </span>\r\n              ) : (\r\n                <span>\r\n                  <PlayCircleOutlined className=\"icon\" onClick={() => handlePlayClick(row)}/>\r\n                </span>\r\n              )\r\n            }\r\n            <span>{ name}</span>\r\n          </p>\r\n        )\r\n    },\r\n    {\r\n      title: '歌手',\r\n      dataIndex: 'artist',\r\n      key: 'artist',\r\n    },\r\n    {\r\n      title: '专辑',\r\n      dataIndex: 'album',\r\n      key: 'album',\r\n    },\r\n    {\r\n      title: '时长',\r\n      dataIndex: 'duration',\r\n      key: 'duration',\r\n      render: (time: number) => formatTime(time) || '未知',\r\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.duration) - Number(b.duration)\r\n    },\r\n    {\r\n      title: '格式',\r\n      dataIndex: 'codec',\r\n      key: 'codec',\r\n      render: (codec: string, row: InterfaceMusicInfo)  => codec || row.fileType\r\n    },\r\n    {\r\n      title: '大小',\r\n      dataIndex: 'fileSize',\r\n      key: 'fileSize',\r\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.size) - Number(b.size)\r\n    },\r\n    {\r\n      title: '关联歌词名',\r\n      dataIndex: 'lrcKey',\r\n      key: 'lrcKey',\r\n      render: (lrcKey: string, row: InterfaceMusicInfo)  => {\r\n        if (lrcKey) {\r\n          return lrcKey\r\n        } else {\r\n          return (\r\n            <Space size=\"middle\">\r\n              <span className=\"action\">关联歌词</span>\r\n            </Space>\r\n          )\r\n        }\r\n      }\r\n    },\r\n  ]\r\n\r\n  const handlePlayClick = (item: InterfaceMusicInfo) => {\r\n    if (item.id !== musicData.id) {\r\n      common.musicPlayer?.stop()\r\n      setTimeout(() => {\r\n        common.updatedMusicData({\r\n          id: item.id\r\n        })\r\n      }, 100)\r\n    } else {\r\n      if (common.musicPlayer) {\r\n        common.musicPlayer.play()\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  const handlePauseClick = () => {\r\n    common.musicPlayer?.pause()\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('获取音乐列表')\r\n    common.updateLocalMusicList()\r\n  }, [])\r\n\r\n  return (\r\n    <section className=\"lrc-list\">\r\n      <Table dataSource={list} columns={columns} pagination={false} rowKey=\"fileName\" loading={loading} />\r\n    </section>\r\n  )\r\n})\r\n\r\nexport default MusicList","import React, { useState } from \"react\"\r\nimport Upload from \"../Components/Upload\"\r\nimport { Button, message, Tabs } from 'antd';\r\nimport LrcList from \"../Components/LrcList\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport MusicList from \"../Components/MusicList\";\r\nimport { MusicRelatedLrc } from \"../utils/local\";\r\nimport common from \"../store/common\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst Locale = () => {\r\n\r\n  const history = useHistory()\r\n\r\n  const useQuery = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n  }\r\n  const query = useQuery()\r\n\r\n  const params = useLocation()\r\n\r\n  const tabCallback = (key: string) => {\r\n    history.push(`${params.pathname}?type=${key}`)\r\n  }\r\n  const [key, setKey] = useState('')\r\n\r\n  const handleRelated = async () => {\r\n    await MusicRelatedLrc()\r\n    message.success('关联成功')\r\n    common.updateLocalMusicList()\r\n    common.updateLocalMusicLrcList()\r\n  }\r\n\r\n  useEffect(() => {\r\n    const list = ['music', 'lrc']\r\n    if (query) {\r\n      const key = query.get('type') || ''\r\n      if (list.includes(key)) {\r\n        setKey(key)\r\n      } else {\r\n        setKey('music')\r\n      }\r\n    }\r\n  }, [query])\r\n\r\n  return (\r\n    <section className=\"page-local\">\r\n      <section className=\"local-upload\">\r\n        <Upload></Upload>\r\n        <section>\r\n          <Button onClick={handleRelated}>自动关联歌词</Button>\r\n          <p className=\"tips\">关联规则: 当前歌曲没有歌词，同时可以找到歌词名，包含完整歌曲名</p>\r\n        </section>\r\n      </section>\r\n      <section className=\"local-content\">\r\n        <Tabs activeKey={key} onChange={tabCallback}>\r\n          <TabPane tab=\"音乐列表\" key=\"music\">\r\n            <MusicList />\r\n          </TabPane>\r\n          <TabPane tab=\"歌词列表\" key=\"lrc\">\r\n            <LrcList />\r\n          </TabPane>\r\n        </Tabs>\r\n      </section>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Locale","import React from \"react\"\r\n\r\nconst Love = () => {\r\n  return (\r\n    <p>Love</p>\r\n  )\r\n}\r\n\r\nexport default Love","import React from 'react';\r\nimport { NavLink, Route, Switch } from 'react-router-dom';\r\nimport Player from '../Components/Player';\r\nimport Locale from '../Local';\r\nimport Love from '../Love';\r\nimport './index.scss'\r\nconst Home = () => {\r\n\r\n  return (\r\n    <section className=\"page-home\">\r\n      <section className=\"wrapper-box\">\r\n        <section className=\"nav\">\r\n          <p className=\"nav-item\">\r\n            <NavLink to=\"/\" exact>推荐</NavLink>\r\n          </p>\r\n          <p className=\"nav-item\">\r\n            <NavLink to=\"/local\">本地音乐</NavLink>\r\n          </p>\r\n        </section>\r\n        <section className=\"music-box\">\r\n          <Switch>\r\n            <Route path=\"/local\" exact>\r\n              <Locale />\r\n            </Route>\r\n            <Route path=\"/\" exact>\r\n              <Love />\r\n            </Route>\r\n          </Switch>\r\n        </section>\r\n      </section>\r\n      <Player />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Home from './Home';\r\nimport './App.scss'\r\n\r\n// function PrivateRoute({ children, ...rest }: any) {\r\n//   return (\r\n//     <Route\r\n//       {...rest}\r\n//       render={({ location }) =>\r\n//       common.timeDate.isBegin ? (\r\n//           children\r\n//         ) : (\r\n//           <Redirect\r\n//             to={{\r\n//               pathname: \"/\",\r\n//               state: { from: location }\r\n//             }}\r\n//           />\r\n//         )\r\n//       }\r\n//     />\r\n//   );\r\n// }\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <section className=\"hzfe-music\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Home />\r\n          </Route>\r\n          <Route path=\"*\" exact>\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport localforage from 'localforage';\r\nimport { ConfigProvider } from 'antd';\r\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\r\n\r\nlocalforage.config({\r\n  name: 'HZFE-MUSIC',\r\n});\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <ConfigProvider locale={zh_CN}>\r\n    <App />\r\n  </ConfigProvider>,\r\n  // <React.StrictMode>\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}