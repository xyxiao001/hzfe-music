{"version":3,"sources":["utils/index.ts","Components/Lrc/index.tsx","Components/Progress/index.tsx","utils/local.ts","store/common.ts","Components/Control/index.tsx","Components/Lrc/Lrc-word.tsx","Components/Player/index.tsx","config.ts","Components/Upload/index.tsx","Components/LrcList/index.tsx","Components/Playing-icon/index.tsx","Components/MusicList/index.tsx","Local/index.tsx","Love/index.tsx","Home/index.tsx","App.tsx","index.tsx"],"names":["loadFile","file","a","isBuffer","Promise","resolve","reject","reader","FileReader","onload","event","target","result","Blob","onerror","readAsArrayBuffer","readAsText","uint8arrayToBase64","u8Arr","slice","index","length","subarray","Math","min","String","fromCharCode","apply","btoa","formatTime","secs","minutes","floor","seconds","transformArrayToTime","str","timeArr","exec","map","item","Number","dataURLtoBlob","base64","arr","split","mime","res","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","type","Lrc","props","useState","lrcList","setLrcList","lrcIndex","setLrcIndex","lrcScroll","useRef","canScroll","setCanScroll","lineHeight","setLineHeight","useEffect","lrc","lrc_s","lyric","replace","p1","lyricLen","i","lrcTimes","lrcText","timeLen","j","lrcTime","push","time","text","filter","sort","b","formatLrc","getChooseLrcIndex","currentTime","setCurrentLrc","isPlaying","current","top","scrollTo","behavior","getLrcChooseName","resize","document","body","offsetHeight","window","addEventListener","removeEventListener","className","ref","onMouseEnter","onMouseLeave","lrcItem","key","style","color","Progress","value","setValue","isChanging","setIsChanging","range","defaultValue","onChange","setChange","handleChanging","onAfterChange","tooltipVisible","addLrc","localforage","getItem","list","every","fileName","setItem","getLrcList","addMusic","musicInfo","blob","musicHash","random","Date","now","id","removeMusic","removeItem","getMusicList","getMusicInfoFromLocal","cur","music","lrcKey","forEach","content","picture","pictureUrl","URL","createObjectURL","removeLrc","common","handlePlay","console","log","updatedMusicData","musicPlayer","seek","duration","playing","change","navigator","MediaMetadata","mediaSession","metadata","title","name","artist","album","artwork","src","sizes","handlePause","handleEnd","requestAnimationFrame","handlePlaying","handleNextMusic","handleStop","musicData","setPositionState","playbackRate","position","stop","len","musicPlayList","next","play","handlePreMusic","pre","localMusicLrcList","url","this","preUrl","preImgUrl","revokeObjectURL","shift","code","updatePreUrl","updatePreImgUrl","Howl","autoplay","html5","format","codec","toLowerCase","fileType","volume","onplay","onpause","onend","onstop","setActionHandler","pause","evt","data","process","hasOwnProperty","classList","remove","add","setTimeout","observable","action","loop","localMusicLoading","localMusicList","updateMusicPlayList","cloneDeep","message","success","updateLocalMusicList","error","localMusicLrcLoading","updateLocalMusicLrcList","musicColor","documentElement","setProperty","Control","setRange","allTime","currentInfo","musicPlayingInfo","onClick","StepBackwardOutlined","PauseCircleOutlined","PlayCircleOutlined","StepForwardOutlined","toFixed","LrcWord","backgroundImage","bg","setBg","lineTime","start","end","formatLrcProgress","getChooseLrcWordIndex","join","progress","wordIndex","getWordLineProgress","word","fac","FastAverageColor","Player","observer","currentLrc","refChange","setChangeFromControl","getInfoFormLocal","useCallback","handelPlay","getMusicInfo","info","updatedMusicInfo","getColorAsync","then","updateMusicColor","setSaturation","setLightness","rgba","catch","e","keyDown","preventDefault","keyCode","handelChangeSize","createdPlayer","destroyPlayer","alt","DownOutlined","supportMusicFormat","supportMusicLrcFormat","UploadFile","handleMusicData","File","nameList","FileType","FileName","musicMetadata","warning","obj","get","albumartist","artists","comment","date","sampleRate","fileSize","filesize","size","handleMusicLrc","beforeUpload","includes","showUploadList","accept","concat","acceptStr","multiple","icon","UploadOutlined","LrcList","columns","dataIndex","sorter","render","_","row","placement","onConfirm","handleDelete","okText","cancelText","loading","deleteLrc","dataSource","pagination","rowKey","PlayingIcon","MusicList","width","handlePauseClick","handlePlayClick","deleteMusic","TabPane","Tabs","Locale","history","useHistory","query","URLSearchParams","useLocation","search","params","setKey","handleRelated","musicList","activeKey","pathname","tab","Love","Home","to","exact","path","Local","App","config","ReactDOM","locale","zh_CN","getElementById"],"mappings":"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","file":"static/js/main.ce0b073e.chunk.js","sourcesContent":["import { get } from \"lodash\"\nimport { InterfaceLrc, InterfaceLrcWord, InterfaceMusicInfo } from \"../Interface/music\"\n\n// 上次文件转化函数\nexport const loadFile = async (file: File, isBuffer = true): Promise<any> => {\n  if (!file) {\n    return ''\n  }\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event: Event) => {\n      const target = event.target as FileReader\n      if (isBuffer) {\n        resolve(target.result ? new Blob([target.result]) : null)\n      } else {\n        resolve(target.result)\n      }\n    }\n    reader.onerror = reject\n    // 转化为blob\n    if (isBuffer) {\n      reader.readAsArrayBuffer(file)\n    } else {\n      reader.readAsText(file)\n    }\n  })\n}\n\n// 格式化歌曲信息保存\nexport const transformMusicInfo = (obj: any): InterfaceMusicInfo => {\n  const result: InterfaceMusicInfo = {\n    // 歌曲名\n    name: get(obj, 'common.title', ''),\n    // 专辑名\n    album: get(obj, 'common.album', ''),\n    // 专辑主导艺人\n    albumartist: get(obj, 'common.albumartist', ''),\n    // 专辑艺人\n    artist: get(obj, 'common.artist', ''),\n    // 专辑艺人列表\n    artists: get(obj, 'common.artists', []),\n    // 专辑备注: \n    comment: get(obj, 'common.comment', []),\n    // 歌曲时间\n    date: get(obj, 'common.date', 0),\n    // 歌曲图片\n    picture: get(obj, 'common.picture', []).map((item: any) => {\n      return `data:${item.format};base64,${uint8arrayToBase64(item.data)}`\n    }),\n    // 编码方式\n    codec: get(obj, 'format.codec', ''),\n    // 歌曲时长\n    duration: get(obj, 'format.duration', 0),\n    // 歌曲采样率\n    sampleRate: get(obj, 'format.sampleRate', ''),\n    // 对应的歌词信息 key\n    lrc: ''\n  }\n  return result\n}\n\n\nexport const uint8arrayToBase64 = (u8Arr: { length: any; subarray: (arg0: number, arg1: number) => any }): string => {\n  let CHUNK_SIZE = 0x8000; //arbitrary number\n  let index = 0;\n  let length = u8Arr.length;\n  let result = '';\n  let slice;\n  while (index < length) {\n    slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\n    result += String.fromCharCode.apply(null, slice);\n    index += CHUNK_SIZE;\n  }\n  return btoa(result);\n}\n\n// 歌词解析算法 - 逐行解析的歌词\nexport const formatLrc = (lrc: string): InterfaceLrc[] => {\n  // ti: 歌曲标题  ar: 歌唱者  al:  唱片集\n  // 格式  [00:01.01]七里香 - 周杰伦   或者 [01:20.64][01:47.80][02:41.96][03:35.77]雨下整夜我的爱溢出就像雨水\n\n  // 如果两个数组中间有文字 类似[01:20.64]我[01:47.80] 表示这个是是单字解析的歌词，那么我们就进行二次加工处理\n  let lrc_s = lrc\n  if (lrc_s) {\n    lrc_s = lrc_s.replace(/([^\\]^\\n])\\[/g, (match, p1) => p1 + '\\n[');\n    const lyric = lrc_s.split('\\n');\n    let res = [];\n    const lyricLen = lyric.length;\n    for (let i = 0; i < lyricLen; i++) {\n      // match lrc time\n      const lrcTimes = lyric[i].match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g);\n      // match lrc text\n      const lrcText = lyric[i]\n        .replace(/.*\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g, '')\n        .replace(/<(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?>/g, '')\n        .replace(/^\\s+|\\s+$/g, '');\n\n      if (lrcTimes) {\n        // handle multiple time tag\n        const timeLen = lrcTimes.length;\n        for (let j = 0; j < timeLen; j++) {\n          const lrcTime = transformArrayToTime(lrcTimes[j])\n          res.push({\n            time: lrcTime,\n            text: lrcText\n          });\n        }\n      }\n    }\n    // sort by time\n    res = res.filter((item: InterfaceLrc) => item.text);\n    res.sort((a: InterfaceLrc, b: InterfaceLrc) => a.time - b.time);\n    return res;\n  } else {\n    return [];\n  }\n}\n\n// 格式化时间显示\nexport const formatTime = (secs: number): string => {\n  const minutes = Math.floor(secs / 60) || 0;\n  const seconds = ~~(secs - minutes * 60) || 0;\n  return (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\n}\n\n// 返回当前歌词选中的索引\nexport const getChooseLrcIndex = (lrcList: InterfaceLrc[], time: number): number => {\n  if (lrcList.length <= 0) return -1\n  let index = 0\n  // 如果比当前时间小，那么聚焦当前时间\n  while (index < lrcList.length) {\n    if (lrcList[index].time > time) {\n      break\n    }\n    index++\n  }\n  return index - 1\n}\n\n// 歌词解析算法 - 逐行-分字解析歌词\nexport const formatLrcProgress = (lrc: string): InterfaceLrcWord[][] => {\n  let res: any[] = []\n  console.log('进入逐字解析的歌词哦')\n  // 逐字的歌词 ->  每行开始时间， 每个字开始时间 -> 计算百分比进行每个字覆盖\n  // 先按照 \\n 进行换行处理，然后正则提出每个字的时间，然后计算出每行的开始时间\n  let lrcStr = lrc\n  const lyric = lrcStr.split('\\n')\n  let i = 0\n  while (i < lyric.length) {\n    let cur = lyric[i].replace(/\\s/g, '')\n    const lrcTimes = cur.match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g)\n    const lrcText = cur.match(/(?<=\\])\\S\\s?(?=\\[)/g)\n    if (lrcTimes && lrcText) {\n      // console.log(lrcTimes, lrcText)\n      // 时间是 [[00:32.27], [00:32.27]] 数组，  子也是数组\n      // 数据结构，每个字开始时间和结束时间 start = j + 1    end j - 1\n      const lineTime = []\n      for (let j = 0; j < lrcText.length; j++) {\n        lineTime.push({\n          text: lrcText[j],\n          start: transformArrayToTime(lrcTimes[j]),\n          end: transformArrayToTime(lrcTimes[j + 1])\n        })\n      }\n      res.push(lineTime)\n    }\n    i++\n  }\n  return res\n}\n\n// 转换时间 [00:42.27] -> 11ms\nexport const transformArrayToTime = (str: string): number => {\n  let time = 0\n  const timeArr: number[] = /\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/.exec(str)?.map(item => {\n    return item ? Number(item) : 0\n  }) || []\n  const min2sec = timeArr[1] * 60;\n  const sec2sec = timeArr[2];\n  const msec2sec = timeArr[4] ? timeArr[4] / ((timeArr[4] + '').length === 2 ? 100 : 1000) : 0;\n  time = min2sec + sec2sec + msec2sec;\n  return time\n}\n\n// 获取逐字歌词的当前行\nexport const getChooseLrcWordIndex = (lrcList: InterfaceLrcWord[][], time: number): number => {\n  if (lrcList.length <= 0) return -1\n  let index = 0\n  // 如果比当前时间小，那么聚焦当前时间\n  while (index < lrcList.length) {\n    if (lrcList[index][0].start > time) {\n      break\n    }\n    index++\n  }\n  return index - 1\n}\n\n\n// 获取逐字歌词的当前行的百分比\nexport const getWordLineProgress = (lrcItem: InterfaceLrcWord[], time: number): number => {\n  if (!lrcItem) return 0\n  let progress = 0\n  // 看看在当前时间的哪个字，同时看看占比当前时间间隙的百分比\n  let wordIndex = 0\n  // 如果比当前字小，那么聚焦上一个字\n  while (wordIndex < lrcItem.length) {\n    if (lrcItem[wordIndex].start > time) {\n      break\n    }\n    wordIndex++\n  }\n  if (wordIndex <= 0) return 0\n  if (wordIndex >= lrcItem.length) return 100\n  // 知道哪个字后, 看看一共多少字，然后分百分比，这里从 0 开始，实际少了一个字\n  progress = wordIndex * (100 / lrcItem.length)\n  // 如果当前时间比字结束时间大，那么是 100%\n  const cur = lrcItem[wordIndex - 1]\n  if (time >= cur.end) {\n    return 100\n  }\n  if (time <= cur.start) {\n    return (wordIndex - 1) * (100 / lrcItem.length)\n  }\n  const len = cur.end - cur.start\n  progress += (time - cur.start) / len * (100 / lrcItem.length)\n  return progress\n}\n\n// 滚动函数\nexport const goScroll = (top: number, target: HTMLElement) => {\n  let requestAnimationFrame: any = null\n  if (window.requestAnimationFrame) {\n    requestAnimationFrame = window.requestAnimationFrame\n  } else {\n    requestAnimationFrame = setTimeout((fn) => {\n      fn()\n    }, 17)\n  }\n  // 当前时间\n  let t = 0\n  // 初始值\n  const b = target.scrollTop\n  // 变化量\n  const c = top - b\n\n  // 如果变化量太大，直接终止\n  if (Math.abs(c) > 200) {\n    target.scrollTo({\n      top,\n      behavior: 'smooth'\n    })\n    return\n  }\n  // 持续时间\n  const d = 32\n  const step = () => {\n    let top = Tween.Linear(t, b, c, d)\n    target.scrollTo({\n      top\n    })\n    t += 1\n    if (t <= d) {\n      requestAnimationFrame(step)\n    }\n  }\n  step()\n}\n// 运动\nconst Tween = {\n  Linear: function (t: number, b: number, c: number, d: number): number {\n    return c * t / d + b;\n  },\n  QuadIn: function (t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t + b;\n  },\n  QuadOut: function (t: number, b: number, c: number, d: number): number {\n    return -c * (t /= d) * (t - 2) + b;\n  },\n  QuadInOut: function (t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n  },\n  CubicIn: function (t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t + b;\n  }\n}\n\n// 返回音乐播放格式\nexport const getFormatCode = (code: string) => {\n  if (code === 'mpeg 1 layer 3') return 'mp3'\n  return code\n}\n\n// base64 转 blob\nexport const dataURLtoBlob = (base64: string): Blob => {\n  const arr = base64.split(',')\n  let mime = ''\n  if (arr.length) {\n    const res = arr[0].match(/:(.*?);/)\n    if (res?.length) {\n      mime = res[1]\n    }\n  }\n  const bstr = atob(arr[1])\n  let n = bstr.length\n  const u8arr = new Uint8Array(n);\n  while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new Blob([u8arr], { type: mime });\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport { InterfaceLrc, InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatLrc, getChooseLrcIndex } from \"../../utils\"\nimport './index.scss'\nconst Lrc = (props: {\n  lrc: string,\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  setCurrentLrc: Function,\n  color?: string\n}) => {\n  // 保存当前渲染的歌词列表\n  const [lrcList, setLrcList] = useState<InterfaceLrc[]>([])\n\n  // 需要渲染的歌词\n  const [lrcIndex, setLrcIndex] = useState(-1)\n\n  // 歌词滚动容器\n  const lrcScroll = useRef(null);\n\n  // 当前是否可以进行歌词的自动滚动\n  const [canScroll, setCanScroll] = useState(true)\n\n  // 当前每行滚动的高度\n  const [lineHeight, setLineHeight] = useState(0)\n\n  const topLine = 1\n   \n  useEffect(() => {\n    setLrcList(formatLrc(props.lrc))\n  }, [props.lrc])\n\n  useEffect(() => {\n    setLrcIndex(\n      getChooseLrcIndex(lrcList, props.currentTime)\n    )\n    if (lrcList.length && lrcList[lrcIndex]) {\n      props.setCurrentLrc(lrcList[lrcIndex].text)\n    }\n  }, [lrcIndex, lrcList, props, props.currentTime])\n\n  useEffect(() => {\n    if (lrcScroll && canScroll && props.isPlaying) {\n      // 计算当前歌词应该需要滚动的场景\n      const target: any = lrcScroll.current\n      const top = lineHeight * (lrcIndex - topLine) || 0\n      if (target) {\n        target.scrollTo({\n          top,\n          behavior: 'smooth'\n        })\n        // goScroll(top, target)\n      }\n    }\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\n\n  const getLrcChooseName = (index: number) => {\n    // 这里处理下其他的, 最近 10 条显示\n    if(lrcIndex === index) {\n      return 'choose-lrc'\n    }\n    // // 下面 10 条\n    // if (lrcIndex < index && (index - lrcIndex) < 10) {\n    //   return `choose-next-${index - lrcIndex}`\n\n    // }\n    // // 上面 5 条\n    // if (lrcIndex > index && (lrcIndex - index) < 5) {\n    //   return `choose-pre-${lrcIndex - index}`\n    // }\n    return ''\n  }\n  \n  const resize = () => {\n    // 浏览器高除以 高度 + \n    setLineHeight(document.body.offsetHeight * (5 + 2.5) / 100)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n    return () => {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  return (\n    <section className=\"music-lrc\"\n      ref={lrcScroll}\n      onMouseEnter={() => {\n        setCanScroll(false)\n      }}\n      onMouseLeave={() => {\n        if (!props.isPlaying) {\n          setCanScroll(true)\n          return\n        }\n        const target: any = lrcScroll.current\n        const top = lineHeight * (lrcIndex - topLine) || 0\n        if (target) {\n          target.scrollTo({\n            top,\n            behavior: 'auto'\n          })\n        }\n        setCanScroll(true)\n      }}>\n      {/* 渲染歌词列表 */}\n      <section className=\"lrc-list\">\n        {\n          lrcList.map((lrcItem: InterfaceLrc, index) => (\n            <p \n              key={ `${lrcItem.time}${lrcIndex}${lrcItem.text}`}\n              style={{\n                color: lrcIndex === index ? props.color : ''\n              }}\n              className={getLrcChooseName(index)}\n            >\n              { lrcItem.text}\n            </p>\n          ))\n        }\n      </section>\n    </section>\n  )\n}\n\nexport default Lrc","import React, { useEffect, useState } from \"react\"\nimport './index.scss'\nimport { Slider } from 'antd';\n\nconst Progress = (props: {\n  range: number,\n  handleChanging: Function,\n  setChange: Function,\n}) => {\n\n  const [value, setValue] = useState(0)\n\n  const [isChanging, setIsChanging] = useState(false)\n\n\n  useEffect(() => {\n    if (!isChanging) {\n      setValue(props.range)\n    }\n  }, [isChanging, props.range])\n\n  const onChange = (value: number) => {\n    setIsChanging(true)\n    props.setChange(true)\n    setValue(value)\n    props.handleChanging(value)\n  }\n\n  const onAfterChange = (value: number) => {\n    // 已经取消拖动，可以同步跳转了\n    // console.log('afterChange', value)\n    props.setChange(false)\n    setIsChanging(false)\n  }\n\n  return (\n    <section className=\"progress\">\n       <Slider defaultValue={0} value={value} onChange={onChange} onAfterChange={onAfterChange} tooltipVisible={false} />\n    </section>\n  )\n}\n\nexport default Progress","/**\n * 所有对数据操作的集合，包括存储数据， 查询数据\n * \n * 1. 歌曲的储存方式\n *   MusicList  InterfaceMusicInfo  \n *   id -> 名称生成的hash 值\n *   lrc ->   歌词，在列表进行操作关联\n *   music -> 歌曲的 blob，播放时进行查询关联\n *    \n * \n *   music-名称生成的hash 值, 随机储存, 播放通过歌曲信息的 hash 值获取具体文件流\n * \n *   LrcList  InterfaceLrcInfo  id -> 名称生成的hash 值, 文件本身存在列表里面\n * \n */\n\nimport localforage from 'localforage'\nimport { dataURLtoBlob } from '.'\nimport { InterfaceLrcInfo, InterfaceMusicInfo } from '../Interface/music'\n\n /**\n  * 添加歌词的存储方法\n  * key: music-lrc-list\n  */\n export const addLrc = async (lrc: InterfaceLrcInfo):Promise<any> => {\n    const key = 'music-lrc-list'\n    // 歌词，直接拉出列表，然后塞进去，储存\n    const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\n    // 这里需要判断下是否已经存在\n    let noExist = list.every(item => item.fileName !== lrc.fileName)\n    if (noExist) {\n      list.push(lrc)\n    }\n    return localforage.setItem('music-lrc-list', list)\n}\n\n// 获取歌词列表\nexport const getLrcList = async ():Promise<InterfaceLrcInfo[]>  => {\n  const key = 'music-lrc-list'\n  const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\n  return list\n}\n\n/**\n * 添加歌曲列表方法\n * music-list\n * 具体流地址 music-名称生成的hash 值\n */\n\nexport const addMusic = async (musicInfo: InterfaceMusicInfo, blob: Blob):Promise<any> => {\n  const key = 'music-list'\n  // 歌词，直接拉出列表，然后塞进去，储存\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n  // 这里需要判断下是否已经存在\n  let noExist = list.every(item => item.fileName !== musicInfo.fileName)\n  if (noExist) {\n    // 这里需要去存储文件流\n    const musicHash = `${musicInfo.fileName}-${Math.random() * 100}-${Date.now()}`\n    musicInfo.id = musicHash\n    await localforage.setItem(musicHash, blob)\n    list.push(musicInfo)\n  }\n  return localforage.setItem('music-list', list)\n}\n\n// 通过 id 删除歌曲\nexport const removeMusic = async (id: string):Promise<Boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const key = 'music-list'\n      // 拉出歌曲列表\n      let list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n      list = list.filter(item => item.id !== id)\n      await localforage.setItem('music-list', list)\n      await localforage.removeItem(id)\n      resolve(true)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 获取歌曲列表\nexport const getMusicList = async ():Promise<InterfaceMusicInfo[]>  => {\n  const key = 'music-list'\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n  return list\n}\n\n// 获取单首歌词信息\nexport const getMusicInfoFromLocal = async (id: string): Promise<InterfaceMusicInfo> => {\n  return new Promise(async (resolve, reject) => {\n    const list = await localforage.getItem('music-list') as InterfaceMusicInfo[] || []\n    const cur = list.filter((item: InterfaceMusicInfo) => item.id === id)[0]\n    if (!cur) {\n      reject('获取歌曲信息失败')\n    } else {\n      cur.music = await localforage.getItem(id)  as Blob\n      if (cur.lrcKey) {\n         const lrcList = await getLrcList()\n         lrcList.forEach(item => {\n           if (item.fileName === cur.lrcKey) {\n            cur.lrc = item.content\n           }\n         })\n      }\n      // 这里处理下图片 url 的生成\n      if (cur.picture.length > 0) {\n        cur.pictureUrl = URL.createObjectURL(dataURLtoBlob(cur.picture[0]))\n      }\n      resolve(cur)\n    }\n  })\n} \n\n// 通过 id 删除歌词\nexport const removeLrc = async (id: string):Promise<Boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const key = 'music-lrc-list'\n      // 拉出歌词列表\n      let list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n      list = list.filter(item => item.fileName !== id)\n      await localforage.setItem('music-lrc-list', list)\n      resolve(true)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 自动关联歌曲歌词\nexport const MusicRelatedLrc = (): Promise<string> => {\n  return new Promise(async(resolve, reject) => {\n    try {\n      let musicList = await getMusicList()\n      const lrcList = await getLrcList()\n      musicList = musicList.map((item: InterfaceMusicInfo) => {\n        lrcList.forEach((lrc: InterfaceLrcInfo) => {\n          if (lrc.fileName.includes(item.name)) {\n            item.lrcKey = lrc.fileName\n          }\n        })\n        return item\n      })\n      // console.log(musicList)\n      await localforage.setItem('music-list', musicList)\n      resolve('success')\n    } catch (error) {\n      reject(error)\n    }\n  })\n}","import { observable, action } from 'mobx';\nimport { InterfaceLrcInfo, InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../Interface/music';\nimport { Howl } from 'howler'\nimport { getLrcList, getMusicList, removeLrc, removeMusic, } from '../utils/local';\nimport { getFormatCode } from '../utils';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nclass Common {\n  @observable\n  preUrl: string = ''\n\n  @action\n  updatePreUrl (url: string) {\n    this.preUrl = url\n  }\n\n  @observable\n  preImgUrl: string[] = []\n\n  @action\n  updatePreImgUrl (url: string) {\n    this.preImgUrl.push(url)\n    if (this.preImgUrl.length >= 5) {\n      URL.revokeObjectURL(this.preImgUrl.shift() as string)\n    }\n  }\n  \n  // 音乐播放实例\n  @observable\n  musicPlayer: Howl | null = null\n\n  @action\n  createdPlayer () {\n    if (this.musicInfo) {\n      this.updatedMusicData({\n        playing: false,\n      })\n      const url = URL.createObjectURL(this.musicInfo.music)\n      if (this.preUrl) {\n        URL.revokeObjectURL(this.preUrl)\n      }\n      this.updatePreUrl(url)\n      this.updatePreImgUrl(this.musicInfo.pictureUrl || '')\n      this.musicPlayer = new Howl({\n        autoplay: true,\n        src: url,\n        html5: true,\n        format: [getFormatCode(this.musicInfo.codec.toLowerCase() || String(this.musicInfo.fileType).toLowerCase())],\n        volume: 1,\n        onplay: this.handlePlay,\n        onpause: this.handlePause,\n        onend: this.handleEnd,\n        onstop: this.handleStop\n      })\n      const navigator: any = window.navigator\n      if (navigator.mediaSession) {\n        navigator.mediaSession.setActionHandler('play', () => {\n          this.musicPlayer?.play()\n        })\n        navigator.mediaSession.setActionHandler('pause', () => {\n          this.musicPlayer?.pause()\n        })\n        navigator.mediaSession.setActionHandler('stop', () => {\n          this.musicPlayer?.stop()\n        })\n        navigator.mediaSession.setActionHandler('seekto', (evt: any) => {\n          console.log(1, evt)\n        })\n        navigator.mediaSession.setActionHandler('seekbackward', (evt: any) => {\n          this.updatedMusicData({\n            change: true\n          })\n          const currentTime = Number(this.musicPlayer?.seek()) - 10\n          this.musicPlayer?.seek(currentTime)\n          this.updatedMusicData({\n            change: false\n          })\n          console.log('快退')\n        });\n        navigator.mediaSession.setActionHandler('seekforward', (evt: any) => {\n          this.updatedMusicData({\n            change: true\n          })\n          const currentTime = Number(this.musicPlayer?.seek()) + 10\n          this.musicPlayer?.seek(currentTime)\n          this.updatedMusicData({\n            change: false\n          })\n          console.log('快进')\n        });\n        navigator.mediaSession.setActionHandler('previoustrack', this.handlePreMusic);\n        navigator.mediaSession.setActionHandler('nexttrack', this.handleNextMusic);\n      }\n    }\n  }\n\n  handlePlay = () => {\n    console.log('歌曲播放了')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      duration: this.musicPlayer?.duration(),\n      playing: true,\n      change: false\n    })\n    if (this.musicInfo && !this.musicInfo.duration) {\n      this.musicInfo.duration = Number(this.musicPlayer?.duration())\n    }\n    const navigator: any = window.navigator\n    const MediaMetadata = window.MediaMetadata\n    if (navigator.mediaSession && this.musicInfo){\n      navigator.mediaSession.metadata = new MediaMetadata({\n        title: this.musicInfo.name,\n        artist: this.musicInfo.artist,\n        album: this.musicInfo.album,\n        artwork: [{\n          src: this.musicInfo.pictureUrl || '',\n          type: 'image/jpeg',\n          sizes: '512x512'\n        }]\n      });\n    }\n  }\n\n  handlePause = () => {\n    console.log('歌曲暂停了')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n  }\n\n  handleEnd = () => {\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n    requestAnimationFrame(this.handlePlaying)\n    console.log('歌曲播放完了')\n    this.handleNextMusic()\n  }\n\n  handleStop = () => {\n    console.log('歌曲停止')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n  }\n\n  handlePlaying = () => {\n    if (!this.musicData.change && this.musicPlayer && this.musicPlayer.playing()) {\n      this.updatedMusicData({\n        type: 'update',\n        currentTime: this.musicPlayer.seek()\n      })\n      const navigator: any = window.navigator\n      if (navigator.mediaSession && this.musicPlayer) {\n        navigator.mediaSession.setPositionState({\n          duration: Number(this.musicPlayer.duration()),\n          playbackRate: 1,\n          position: this.musicPlayer.seek()\n        })\n      }\n      requestAnimationFrame(this.handlePlaying)\n    }\n  }\n\n  @action\n  destroyPlayer () {\n    this.musicPlayer = null\n  }\n\n\n  @observable\n  musicInfo: InterfaceMusicInfo | null = null\n\n  @action\n  updatedMusicInfo (data: InterfaceMusicInfo) {\n    if (data.picture.length === 0) {\n      data.picture = [`${process.env.PUBLIC_URL}/images/music-no.jpeg`]\n    }\n    this.musicInfo = data\n  }\n  \n \n\n  // 当前音乐播放的数据\n  @observable\n  musicData: InterfaceMusicPlayingInfo  = {\n    id: '',\n    playing: false,\n    duration: 0,\n    currentTime: 0,\n    change: false,\n    min: true\n  }\n\n  @action\n  updatedMusicData (data: any) {\n    if (data.type === 'update') {\n      this.musicData.currentTime = data.currentTime\n      return\n    }\n    // 判断 body 样式\n    if (data.hasOwnProperty('min')) {\n      if (data.min) {\n        document.body.classList.remove('dialog-screen')\n      } else {\n        document.body.classList.add('dialog-screen')\n      }\n    }\n    if (!data.change) {\n      setTimeout(() => {\n        requestAnimationFrame(this.handlePlaying)\n      }, 100)\n    }\n    this.musicData = {\n      ...this.musicData,\n      ...data\n    }\n  }\n\n  // 播放器状态\n  @observable\n  musicPlayerStats = {\n    // 播放器循环状态  单曲播放 single, 随机 random 顺序播放 order\n    loop: 'random'\n  }\n  \n  // 播放下一首，上一首功能实现\n  @observable\n  musicPlayList: InterfaceMusicInfo[] = []\n\n  @action\n  updateMusicPlayList = (list: InterfaceMusicInfo[]) => {\n    this.musicPlayList = list\n  }\n\n  // 歌曲播放下一首\n  handleNextMusic = () => {\n    if (this.musicPlayer) {\n      this.musicPlayer.stop()\n    }\n    let cur = 0\n    const len = this.musicPlayList.length - 1\n    while (cur < this.musicPlayList.length) {\n      if (this.musicPlayList[cur].id === this.musicData.id) {\n        break\n      }\n      cur++\n    }\n    // 防止超出下一首\n    let next = cur + 1\n    next = next > len ? (next - len) - 1 : next\n    if (this.musicPlayList[next].id === this.musicData.id) {\n      this.musicPlayer?.play()\n    } else {\n      common.updatedMusicData({\n        id: this.musicPlayList[next].id\n      })\n    }\n  }\n\n  // 歌曲播放上一首\n  handlePreMusic = () => {\n    if (this.musicPlayer) {\n      this.musicPlayer.stop()\n    }\n    let cur = 0\n    const len = this.musicPlayList.length - 1\n    while (cur < this.musicPlayList.length) {\n      if (this.musicPlayList[cur].id === this.musicData.id) {\n        break\n      }\n      cur++\n    }\n    // 防止低于 0\n    let pre = cur - 1\n    pre = pre < 0 ? len : pre\n    if (this.musicPlayList[pre].id === this.musicData.id) {\n      this.musicPlayer?.play()\n    } else {\n      common.updatedMusicData({\n        id: this.musicPlayList[pre].id\n      })\n    }\n  }\n\n  // 本地音乐展示列表\n  @observable\n  localMusicList: InterfaceMusicInfo[] = []\n  @observable\n  localMusicLoading: boolean = false\n\n  @action\n  updateLocalMusicList = async () => {\n    this.localMusicLoading = true\n    this.localMusicList = await getMusicList()\n    // 用来做播放列表更新\n    this.updateMusicPlayList(cloneDeep(this.localMusicList))\n    this.localMusicLoading = false\n  }\n\n  // 删除歌曲, 操作列表删除当前歌曲，同时删除歌曲文件流\n  @action deleteMusic = async (id: string) => {\n    try {\n      await removeMusic(id)\n      message.success('删除成功')\n      this.updateLocalMusicList()\n    } catch (error) {\n      console.log(error)\n      message.error('删除失败')\n    }\n  }\n\n\n  // 本地歌词展示列表\n  localMusicLrcList: InterfaceLrcInfo[] = []\n  @observable\n  localMusicLrcLoading: boolean = false\n\n  @action\n  updateLocalMusicLrcList = async () => {\n    this.localMusicLrcLoading = true\n    this.localMusicLrcList = await getLrcList()\n    this.localMusicLrcLoading = false\n  }\n\n  // 删除歌曲, 操作列表删除当前歌曲，同时删除歌曲文件流\n  @action deleteLrc = async (id: string) => {\n    try {\n      await removeLrc(id)\n      message.success('删除成功')\n      this.updateLocalMusicLrcList()\n    } catch (error) {\n      console.log(error)\n      message.error('删除失败')\n    }\n  }\n\n  // 音乐播放时修改全局主题色\n  @observable\n  musicColor = '#1890ff'\n\n  @action\n  updateMusicColor = (color: string) => {\n    this.musicColor = color\n    document.documentElement.style.setProperty('--primary-color', color)\n  }\n}\n\nconst common = new Common()\n\n\n \nexport default common\n\n","import React, { useEffect, useState } from 'react';\nimport './index.scss'\nimport { InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../../Interface/music';\nimport { formatTime } from '../../utils';\nimport Progress from '../Progress';\nimport { PauseCircleOutlined, PlayCircleOutlined, StepBackwardOutlined, StepForwardOutlined } from '@ant-design/icons';\nimport common from '../../store/common';\nconst Control = (props: {\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  handlePlay: Function,\n  handlePause: Function,\n  handleChanging: Function,\n  setChange: Function,\n  musicPlayingInfo: InterfaceMusicPlayingInfo,\n  min?: Boolean\n}) => {\n\n  const [range, setRange] = useState(0)\n\n  useEffect(() => {\n    const allTime = props.currentInfo?.duration || props.musicPlayingInfo.duration || 0\n    setRange(\n      (props.currentTime / allTime) * 100\n    )\n  }, [props.currentInfo, props.currentTime, props.musicPlayingInfo.duration])\n\n  return (\n    <section className=\"player-control\">\n      {\n        props.min ? (\n          <section className=\"control-min\">\n            <section className=\"control-icon-list\">\n              <p onClick={common.handlePreMusic}>\n                <StepBackwardOutlined />\n              </p>\n              <p className=\"icon-play-bg\" onClick={\n                () => {\n                  if (props.isPlaying) {\n                    props.handlePause()\n                  } else {\n                    props.handlePlay()\n                  }\n                }\n              }>\n                {\n                  props.isPlaying ? (\n                    <PauseCircleOutlined />\n                  ) : (\n                    <PlayCircleOutlined />\n                    )\n                }\n              </p>\n              <p onClick={common.handleNextMusic}>\n                <StepForwardOutlined />\n              </p>\n            </section>\n            <section className=\"control-progress\">\n              <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\n              {/* <span>歌曲进度百分比: { range.toFixed(2) }%</span> */}\n            </section>\n            <section className=\"line-left\">\n              <span> {formatTime(props.currentTime || 0)} </span>\n              <span>/</span>\n              <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\n            </section>\n          </section>\n        ) : (\n            <section className=\"control\">\n              <section className=\"control-progress\">\n                <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\n                {/* <span>歌曲进度百分比: { range.toFixed(2) }%</span> */}\n              </section>\n              <section className=\"control-line\">\n                <section className=\"line-left\">\n                  <span> {formatTime(props.currentTime || 0)} </span>\n                  <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\n                </section>\n                <section className=\"line-center\">\n                <section className=\"control-icon-list\">\n                  <p onClick={common.handlePreMusic}>\n                    <StepBackwardOutlined />\n                  </p>\n                  <p className=\"icon-play-bg\" onClick={\n                    () => {\n                      if (props.isPlaying) {\n                        props.handlePause()\n                      } else {\n                        props.handlePlay()\n                      }\n                    }\n                  }>\n                    {\n                      props.isPlaying ? (\n                        <PauseCircleOutlined />\n                      ) : (\n                        <PlayCircleOutlined />\n                      )\n                    }\n                  </p>\n                  <p onClick={common.handleNextMusic}>\n                    <StepForwardOutlined />\n                  </p>\n            </section>\n                </section>\n              </section>\n            </section>\n          )\n      }\n\n    </section>\n  )\n}\n\nexport default Control","import React, { useEffect, useRef, useState } from \"react\"\nimport { InterfaceLrcWord, InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatLrcProgress, getChooseLrcWordIndex, getWordLineProgress} from \"../../utils\"\nimport './index-word.scss'\n// 逐字渲染的歌词\n\nconst LrcWord = (props: {\n  lrc: string,\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  setCurrentLrc: Function,\n  color?: string\n}) => {\n  // 保存当前渲染的歌词列表\n  const [lrcList, setLrcList] = useState<InterfaceLrcWord[][]>([])\n\n  // 需要渲染的歌词\n  const [lrcIndex, setLrcIndex] = useState(-1)\n\n  // 歌词滚动容器\n  const lrcScroll = useRef(null);\n\n  // 当前是否可以进行歌词的自动滚动\n  const [canScroll, setCanScroll] = useState(true)\n\n  // 当前进度\n  const [bg, setBg] = useState({\n    backgroundImage: ''\n  })\n\n  // 当前每行滚动的高度\n  const [lineHeight, setLineHeight] = useState(0)\n\n  const topLine = 1\n   \n  useEffect(() => {\n    setLrcList(formatLrcProgress(props.lrc))\n  }, [props.lrc])\n\n  useEffect(() => {\n    setLrcIndex(\n      getChooseLrcWordIndex(lrcList, props.currentTime)\n    )\n    if (lrcList[lrcIndex] && lrcList[lrcIndex].length) {\n      const text = lrcList[lrcIndex].map(item => {\n        return item.text\n      })\n      props.setCurrentLrc(text.join(''))\n    }\n    const key = getWordLineProgress(lrcList[lrcIndex], props.currentTime)\n    setBg(\n      {\n        backgroundImage: `-webkit-linear-gradient(left,${props.color} ${key}%,#ffffff ${key}%)`\n      }\n    )\n  }, [lrcIndex, lrcList, props, props.currentTime])\n\n  useEffect(() => {\n    if (lrcScroll && canScroll && props.isPlaying) {\n      // 计算当前歌词应该需要滚动的场景\n      const target: any = lrcScroll.current\n      const top = lineHeight * (lrcIndex - topLine) || 0\n      if (target) {\n        target.scrollTo({\n          top,\n          behavior: 'smooth'\n        })\n      }\n    }\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\n\n  const getLrcChooseName = (index: number) => {\n    return lrcIndex === index ? 'choose-lrc-line' : ''\n  }\n\n  const resize = () => {\n    // 浏览器高除以 高度 + \n    setLineHeight(document.body.offsetHeight * (5 + 2.5) / 100)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n    return () => {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n\n  return (\n    <section className=\"music-lrc-word\"\n      ref={lrcScroll}\n      onMouseEnter={() => {\n        setCanScroll(false)\n      }}\n      onMouseLeave={() => {\n        setCanScroll(true)\n        if (!props.isPlaying) {\n          return\n        }\n        const target: any = lrcScroll.current\n        const top = lineHeight * (lrcIndex - topLine) || 0\n        if (target) {\n          target.scrollTo({\n            top,\n            behavior: 'auto'\n          })\n        }\n      }}>\n      {/* 渲染歌词列表 */}\n      <section className=\"lrc-list\">\n        {\n          lrcList.map((lrcItem: InterfaceLrcWord[], index) => (\n            <section key={ index } className=\"lrc-line\">\n              <p className={getLrcChooseName(index)} style={lrcIndex === index ? bg : {}}>\n                {\n                  lrcItem.map((word: InterfaceLrcWord, i) => (\n                    <span key={ i }>{word.text}</span>\n                  ))\n                }\n              </p>\n            </section>\n          ))\n        }\n      </section>\n    </section>\n  )\n}\n\nexport default LrcWord","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport './index.scss'\n// import Upload from '../Upload'\nimport { InterfaceMusicInfo } from '../../Interface/music';\nimport Lrc from '../Lrc';\nimport Control from '../Control';\nimport LrcWord from '../Lrc/Lrc-word';\nimport FastAverageColor from 'fast-average-color';\nimport { setLightness, setSaturation } from 'polished';\nimport { getMusicInfoFromLocal } from '../../utils/local';\nimport { DownOutlined } from '@ant-design/icons';\nimport { observer } from \"mobx-react\"\nimport common from '../../store/common';\n\nconst fac = new FastAverageColor();\n\nconst Player = observer(() => {\n\n  // const [musicPlayer, setMusicPlayer] = useState<Howl | null>(null)\n  const musicPlayer = common.musicPlayer\n\n  const musicInfo = common.musicInfo\n\n  // 当前的状态, 用来做歌曲时间，还是当前拖动时间的判定\n  const musicData = common.musicData\n\n  const [currentLrc, setCurrentLrc] = useState('')\n\n  const refChange = useRef(false)\n\n  // 主题色\n  const musicColor = common.musicColor\n\n  const handleChanging = (value: number) => {\n    // 当前拖动时间的改变\n    // 反推出当前时间\n    const time = (musicInfo?.duration || 0) * value / 100\n    common.updatedMusicData(\n      {\n        currentTime: time\n      }\n    )\n  }\n\n  const setChangeFromControl = (key: boolean) => {\n    if (!key) {\n      // 表示操作结束，开始同步数据，播放\n      musicPlayer?.seek(musicData.currentTime)\n      if (!musicData.playing) {\n        musicPlayer?.play()\n      }\n    }\n    common.updatedMusicData({\n      change: key\n    })\n  }\n\n  const getInfoFormLocal = useCallback(async () => {\n    return new Promise(async (resolve, reject) => {\n      const res = await getMusicInfoFromLocal(musicData.id)\n      if (res) {\n        resolve(res)\n      } else {\n        reject('歌曲信息获取失败')\n      }\n    })\n  }, [musicData.id])\n\n  // 歌曲停止事件\n  // const handleStop = useCallback(() => {\n  //   if (musicPlayer) {\n  //     musicPlayer.stop()\n  //   }\n  // }, [musicPlayer])\n\n  // 歌曲播放事件\n  const handelPlay = useCallback(() => {\n    if (musicPlayer) {\n      if (!musicPlayer.playing()) {\n        musicPlayer.play()\n      } else {\n        musicPlayer.pause()\n      }\n    }\n  }, [musicPlayer])\n\n  const getMusicInfo = useCallback(async () => {\n    if (!musicData.id) return\n    const info: InterfaceMusicInfo = await getInfoFormLocal() as InterfaceMusicInfo\n    if (!info) return\n    common.updatedMusicInfo(info)\n    fac.getColorAsync(info.pictureUrl || '')\n      .then(color => {\n        common.updateMusicColor(\n          setSaturation(.8, setLightness(.5, color.rgba))\n        )\n      })\n      .catch(e => {\n        common.updateMusicColor(\n          '#1890ff'\n        )\n      });\n  }, [getInfoFormLocal, musicData.id])\n\n  // 绑定键盘事件\n  const keyDown = useCallback((event: any) => {\n    event.preventDefault()\n    const keyCode = event.keyCode as number\n    if (keyCode === 32) {\n      handelPlay()\n    }\n  }, [handelPlay])\n\n  // 修改播放器状态\n  const handelChangeSize = () => {\n    common.updatedMusicData({\n      min: !musicData.min,\n    })\n  }\n\n  useEffect(() => {\n    console.log('useEffect-getMusicInfo')\n    getMusicInfo()\n  }, [getMusicInfo])\n\n\n  useEffect(() => {\n    console.log('useEffect-create')\n    if (musicInfo && !musicPlayer) {\n      setCurrentLrc('')\n      console.log('创建音乐实例')\n      common.createdPlayer()\n    }\n    return () => {\n      if (musicPlayer) {\n        console.log('created destroy')\n        common.updatedMusicData({\n          playing: false\n        })\n        common.destroyPlayer()\n      }\n    }\n  }, [musicInfo, musicPlayer])\n\n  useEffect(() => {\n    console.log('music-change-key')\n    refChange.current = musicData.change\n  }, [musicData.change])\n\n  useEffect(() => {\n    // 绑定enter 事件\n    window.addEventListener('keydown', keyDown)\n    return () => {\n      window.removeEventListener('keydown', keyDown)\n    }\n  }, [keyDown])\n\n\n  return (\n    <section className=\"player\">\n      {\n        musicData.min ? (\n          <section className=\"player-min\">\n            {\n              musicInfo ? (\n                <section className=\"player-layout\">\n                  <section className=\"layout-left\">\n                    <section className=\"music-img\" onClick={handelChangeSize}>\n                      <img src={musicInfo.pictureUrl ?  musicInfo.pictureUrl : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\n                    </section>\n                    <section className=\"player-info\">\n                      <p className=\"music-name\">{musicInfo.name}</p>\n                      <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\n                    </section>\n                  </section>\n                  <section className=\"music-progress\">\n                    <Control\n                      handlePlay={handelPlay}\n                      handlePause={handelPlay}\n                      currentInfo={musicInfo || null}\n                      musicPlayingInfo={musicData}\n                      currentTime={musicData.currentTime}\n                      handleChanging={handleChanging}\n                      setChange={setChangeFromControl}\n                      min={musicData.min}\n                      isPlaying={musicData.playing}></Control>\n                  </section>\n                </section>\n              ) : (\n                  <section className=\"player-layout\">\n                    请选择歌曲进行播放\n                  </section>\n                )\n            }\n          </section>\n        ) : (\n            <section className=\"player-max\">\n              <section className=\"status-control\" onClick={handelChangeSize}>\n                <DownOutlined />\n              </section>\n              <section className=\"player-bg\" style={{ \"backgroundImage\": `url(${musicInfo?.pictureUrl || process.env.PUBLIC_URL + '/images/music-no.jpeg'})` }}></section>\n              <section className=\"player-fade\"></section>\n              {/* <Upload></Upload> */}\n              {/* 这里去渲染歌曲信息 */}\n              <section className=\"player-layout\">\n                {\n                  musicInfo ?\n                    <section className=\"player-box\">\n\n                      <section className=\"player-left\">\n                        <section className=\"player-line\">\n                          <img src={musicInfo.pictureUrl ? musicInfo.pictureUrl : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\n                        </section>\n                        <section className=\"player-line\">\n                          <section className=\"player-info\">\n                            <p className=\"music-name\">{musicInfo.name}</p>\n                            <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\n                            <p className=\"music-current-lrc\">{currentLrc}</p>\n                          </section>\n                        </section>\n                        <Control\n                          handlePlay={handelPlay}\n                          handlePause={handelPlay}\n                          currentInfo={musicInfo || null}\n                          musicPlayingInfo={musicData}\n                          currentTime={musicData.currentTime}\n                          handleChanging={handleChanging}\n                          setChange={setChangeFromControl}\n                          isPlaying={musicData.playing}></Control>\n                      </section>\n                      <section className=\"player-right\">\n                        {\n                          musicInfo.lrc?.match(/\\](\\S)\\[/g) ? (\n                            <LrcWord\n                              setCurrentLrc={setCurrentLrc}\n                              color={musicColor}\n                              lrc={musicInfo.lrc || ''}\n                              currentInfo={musicInfo || null}\n                              currentTime={musicData.currentTime}\n                              isPlaying={musicData.playing}></LrcWord>\n                          )\n                            : (\n                              <Lrc\n                                setCurrentLrc={setCurrentLrc}\n                                color={musicColor}\n                                lrc={musicInfo.lrc || ''}\n                                currentInfo={musicInfo || null}\n                                currentTime={musicData.currentTime}\n                                isPlaying={musicData.playing}></Lrc>\n                            )\n                        }\n                      </section>\n                    </section> : ''\n                }\n              </section>\n              {/* <section className=\"music-log\">\n                <p>歌曲播放状态 {musicData.playing ? '播放中' : '没有播放'}</p>\n                  <p>歌曲总时长 {formatTime(musicData.duration)}</p>\n                  <p>歌曲当前时间 {formatTime(musicData.currentTime)}</p>\n              </section> */}\n              {/* 这里是歌曲控制台的 */}\n            </section>\n          )\n      }\n    </section>\n  );\n})\n\nexport default Player\n","// 用来做文件解析， 文件生成， 歌词 歌曲匹配的配置文件\n\n// 支持的歌曲的格式\nexport const supportMusicFormat = [\n  'mp3', 'ogg', 'wav', 'aac', 'flac', 'dolby', 'opus', 'webm', 'alac'\n]\n\n// 支持的歌词的格式\nexport const supportMusicLrcFormat = [\n  'lrc', 'txt'\n]","import React from 'react';\nimport { loadFile, transformMusicInfo } from '../../utils';\nimport * as musicMetadata from 'music-metadata-browser'\nimport { Button, message, Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport './index.scss'\nimport { supportMusicFormat, supportMusicLrcFormat } from '../../config'\nimport filesize from 'filesize'\nimport { InterfaceMusicInfo } from '../../Interface/music';\nimport { addLrc, addMusic } from '../../utils/local';\nimport common from '../../store/common';\n\nconst UploadFile = () => {\n  \n  const acceptStr = (): string => {\n    let arr = supportMusicFormat.concat(supportMusicLrcFormat)\n    arr = arr.map((item: string) => {\n      item = `.${item}`\n      return item\n    })\n    return arr.join(',')\n  }\n\n  const handleUpload = (File: File): boolean => {\n    const nameList = File.name.split('.')\n    const FileType = nameList[nameList.length - 1]\n    const FileName = File.name.replace(`.${FileType}`, '')\n    // 这里处理我们文件的存储\n    if (supportMusicFormat.includes(FileType)) {\n      console.log('当前是音频文件处理', FileName, FileType)\n      handleMusicData(File)\n      return false\n    }\n\n    if (supportMusicLrcFormat.includes(FileType)) {\n      console.log('当前是歌词文件处理', FileName, FileType)\n      handleMusicLrc(File)\n      return false\n    }\n    message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\n    return false\n  }\n\n  // 音频文件处理\n  const handleMusicData = async (File: File) => {\n    // console.log(File, filesize(File.size))\n    const nameList = File.name.split('.')\n    const FileType = nameList[nameList.length - 1]\n    const FileName = File.name.replace(`.${FileType}`, '')\n    let blob:Blob\n    let result\n    try {\n      blob = await loadFile(File, true)\n      result = await musicMetadata.parseBlob(blob)\n    } catch (error) {\n      message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\n      return\n    }\n    const data: InterfaceMusicInfo = transformMusicInfo(result)\n    data.fileName = FileName\n    data.fileType = FileType\n    data.fileSize = filesize(File.size)\n    data.size = File.size\n    data.name = data.name || data.fileName || '未知歌曲'\n    addMusic(data, blob).then(res => {\n      console.log(res)\n      message.success(`${File.name}  上传成功`)\n      common.updateLocalMusicList()\n    })\n  }\n\n  // 歌词文件处理\n  const handleMusicLrc = async (File: File) => {\n    const nameList = File.name.split('.')\n    const fileType = nameList[nameList.length - 1]\n    const fileName = File.name.replace(`.${fileType}`, '')\n    let result = ''\n    try {\n      result = await loadFile(File, false)\n    } catch (error) {\n      message.warning(`目前还不支持处理${fileType}这种类型文件，${fileName}`)\n      return\n    }\n    addLrc({\n      content: result,\n      fileName,\n      fileType,\n      size: File.size,\n      fileSize: filesize(File.size)\n    }).then(res => {\n      common.updateLocalMusicLrcList()\n      message.success(`${File.name}  上传成功`)\n    })\n  }\n\n  return (\n    <section className=\"page-upload\">\n      <section className=\"upload-line\">\n        <Upload beforeUpload={handleUpload} showUploadList={false} accept={acceptStr()} multiple>\n          <Button icon={<UploadOutlined />}>点击上传本地歌曲或者歌词</Button>\n        </Upload>\n        <p className=\"tips\">\n          <span>支持歌曲格式 { supportMusicFormat.join('，')}</span>\n          <span>支持歌词格式 { supportMusicLrcFormat.join('，')}</span>\n        </p>\n      </section>\n    </section>\n  );\n}\n\nexport default UploadFile","// 歌词列表展示\nimport { Popconfirm, Table } from \"antd\"\nimport { observer } from \"mobx-react\"\nimport React, { useEffect } from \"react\"\nimport { InterfaceLrcInfo } from \"../../Interface/music\"\nimport common from \"../../store/common\"\n\nconst LrcList = observer(() => {\n  const columns = [\n    {\n      title: '歌词名',\n      dataIndex: 'fileName',\n      key: 'fileName',\n    },\n    {\n      title: '大小',\n      dataIndex: 'fileSize',\n      key: 'fileSize',\n      sorter: (a: InterfaceLrcInfo, b: InterfaceLrcInfo) => a.size - b.size\n    },\n    {\n      title: '操作',\n      dataIndex: 'name',\n      key: 'control',\n      render: (_: string, row: InterfaceLrcInfo) => {\n        return (\n          <p>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`确定删除-${row.fileName}-歌词嘛`}\n              onConfirm={() => handleDelete(row.fileName || '')}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <span className=\"link\">删除</span>\n            </Popconfirm>\n          </p>\n        )\n      }\n    },\n  ]\n  const list = common.localMusicLrcList\n  const loading = common.localMusicLrcLoading\n\n  const handleDelete = (id: string) => {\n    common.deleteLrc(id)\n  }\n\n  useEffect(() => {\n    console.log('获取歌词列表')\n    common.updateLocalMusicLrcList()\n  }, [])\n\n  return (\n    <section className=\"lrc-list\">\n      <Table\n        dataSource={list}\n        columns={columns}\n        pagination={false}\n        rowKey=\"fileName\"\n        loading={loading} />\n    </section>\n  )\n})\n\nexport default LrcList","import React from \"react\"\nimport './index.scss'\n\nconst PlayingIcon = () => {\n  return (\n    <p className=\"playing-icon\">\n      <span className=\"rect1\"></span>\n      <span className=\"rect2\"></span>\n      <span className=\"rect3\"></span>\n      <span className=\"rect4\"></span>\n      <span className=\"rect5\"></span>\n    </p>\n  )\n}\n\nexport default PlayingIcon","// 歌词列表展示\nimport { Popconfirm, Space, Table } from \"antd\"\nimport React, { useEffect } from \"react\"\nimport { InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatTime } from \"../../utils\"\nimport { observer } from \"mobx-react\"\nimport { PauseCircleOutlined, PlayCircleOutlined } from \"@ant-design/icons\"\nimport './index.scss'\nimport common from \"../../store/common\"\nimport PlayingIcon from \"../Playing-icon\"\nconst MusicList = observer(() => {\n  const musicData = common.musicData\n  const list = common.localMusicList\n  const loading = common.localMusicLoading\n  const columns = [\n    {\n      title: '歌曲',\n      dataIndex: 'name',\n      key: 'name',\n      width: 300,\n      render: (name: string, row: InterfaceMusicInfo) =>\n        (\n          <section className=\"list-play\">\n            {\n              (musicData?.id === row.id && musicData.playing) ?\n                (\n                  <span>\n                    <PauseCircleOutlined className=\"icon\" onClick={() => handlePauseClick()} />\n                  </span>\n                ) : (\n                  <span>\n                    <PlayCircleOutlined className=\"icon\" onClick={() => handlePlayClick(row)} />\n                  </span>\n                )\n            }\n            <span>{name}</span>\n            {\n              (musicData?.id === row.id && musicData.playing) ?\n                (\n                  <PlayingIcon></PlayingIcon>\n                ) : ''\n            }\n          </section>\n        )\n    },\n    {\n      title: '歌手',\n      dataIndex: 'artist',\n      key: 'artist',\n    },\n    {\n      title: '专辑',\n      dataIndex: 'album',\n      key: 'album',\n    },\n    {\n      title: '时长',\n      dataIndex: 'duration',\n      key: 'duration',\n      render: (time: number) => formatTime(time) || '未知',\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.duration) - Number(b.duration)\n    },\n    {\n      title: '格式',\n      dataIndex: 'codec',\n      key: 'codec',\n      render: (codec: string, row: InterfaceMusicInfo) => codec || row.fileType\n    },\n    {\n      title: '大小',\n      dataIndex: 'fileSize',\n      key: 'fileSize',\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.size) - Number(b.size)\n    },\n    {\n      title: '关联歌词名',\n      dataIndex: 'lrcKey',\n      key: 'lrcKey',\n      render: (lrcKey: string, row: InterfaceMusicInfo) => {\n        if (lrcKey) {\n          return lrcKey\n        } else {\n          return (\n            <Space size=\"middle\">\n              <span className=\"action\">关联歌词</span>\n            </Space>\n          )\n        }\n      }\n    },\n    {\n      title: '操作',\n      dataIndex: 'name',\n      key: 'control',\n      render: (_: string, row: InterfaceMusicInfo) => {\n        return (\n          <p>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`确定删除-${row.name}-这首歌嘛`}\n              onConfirm={() => handleDelete(row.id || '')}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <span className=\"link\">删除</span>\n            </Popconfirm>\n          </p>\n        )\n      }\n    },\n  ]\n\n  const handlePlayClick = (item: InterfaceMusicInfo) => {\n    if (item.id !== musicData.id) {\n      common.musicPlayer?.stop()\n      setTimeout(() => {\n        common.updatedMusicData({\n          id: item.id\n        })\n      }, 100)\n    } else {\n      if (common.musicPlayer) {\n        common.musicPlayer.play()\n      }\n    }\n\n  }\n\n  const handlePauseClick = () => {\n    common.musicPlayer?.pause()\n  }\n\n  const handleDelete = (id: string) => {\n    common.deleteMusic(id)\n  }\n\n  useEffect(() => {\n    console.log('获取音乐列表')\n    common.updateLocalMusicList()\n  }, [])\n\n  return (\n    <section className=\"lrc-list\">\n      <Table dataSource={list} columns={columns} pagination={false} rowKey=\"fileName\" loading={loading} />\n    </section>\n  )\n})\n\nexport default MusicList","import React, { useState } from \"react\"\nimport Upload from \"../Components/Upload\"\nimport { Button, message, Tabs } from 'antd';\nimport LrcList from \"../Components/LrcList\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport MusicList from \"../Components/MusicList\";\nimport { MusicRelatedLrc } from \"../utils/local\";\nimport common from \"../store/common\";\n\nconst { TabPane } = Tabs;\n\nconst Locale = () => {\n\n  const history = useHistory()\n\n  const useQuery = () => {\n    return new URLSearchParams(useLocation().search);\n  }\n  const query = useQuery()\n\n  const params = useLocation()\n\n  const tabCallback = (key: string) => {\n    history.push(`${params.pathname}?type=${key}`)\n  }\n  const [key, setKey] = useState('')\n\n  const handleRelated = async () => {\n    await MusicRelatedLrc()\n    message.success('关联成功')\n    common.updateLocalMusicList()\n    common.updateLocalMusicLrcList()\n  }\n\n  useEffect(() => {\n    const list = ['music', 'lrc']\n    if (query) {\n      const key = query.get('type') || ''\n      if (list.includes(key)) {\n        setKey(key)\n      } else {\n        setKey('music')\n      }\n    }\n  }, [query])\n\n  return (\n    <section className=\"page-local\">\n      <section className=\"local-upload\">\n        <Upload></Upload>\n        <section>\n          <Button onClick={handleRelated}>自动关联歌词</Button>\n          <p className=\"tips\">关联规则: 当前歌曲没有歌词，同时可以找到歌词名，包含完整歌曲名</p>\n        </section>\n      </section>\n      <section className=\"local-content\">\n        <Tabs activeKey={key} onChange={tabCallback}>\n          <TabPane tab=\"音乐列表\" key=\"music\">\n            <MusicList />\n          </TabPane>\n          <TabPane tab=\"歌词列表\" key=\"lrc\">\n            <LrcList />\n          </TabPane>\n        </Tabs>\n      </section>\n    </section>\n  )\n}\n\nexport default Locale","import React from \"react\"\n// import * as musicMetadata from 'music-metadata-browser'\n\n// 用来测试线上播放的数据\n\n// const online = {\n//   name: '寻找周杰伦',\n//   url: 'http://127.0.0.1:8887/%E5%85%AB%E5%BA%A6%E7%A9%BA%E9%97%B4/08.%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB.flac',\n//   lrc: 'http://127.0.0.1:8887/%E5%85%AB%E5%BA%A6%E7%A9%BA%E9%97%B4/%E5%91%A8%E6%9D%B0%E4%BC%A6%20-%20%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB.lrc'\n// };\n\n//  musicMetadata.fetchFromUrl(online.url).then(res => {\n//   console.log(res)\n// })\n\n// console.log(online)\n\nconst Love = () => {\n  return (\n    <p>测试在线音乐播放</p>\n  )\n}\n\nexport default Love","import React from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport Player from '../Components/Player';\nimport Locale from '../Local';\nimport Love from '../Love';\nimport './index.scss'\nconst Home = () => {\n\n  return (\n    <section className=\"page-home\">\n      <section className=\"wrapper-box\">\n        <section className=\"nav\">\n          <p className=\"nav-item\">\n            <NavLink to=\"/\" exact>推荐</NavLink>\n          </p>\n          <p className=\"nav-item\">\n            <NavLink to=\"/local\">本地音乐</NavLink>\n          </p>\n        </section>\n        <section className=\"music-box\">\n          <Switch>\n            <Route path=\"/local\" exact>\n              <Locale />\n            </Route>\n            <Route path=\"/\" exact>\n              <Love />\n            </Route>\n          </Switch>\n        </section>\n      </section>\n      <Player />\n    </section>\n  );\n}\n\nexport default Home\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './Home';\nimport './App.scss'\n\n// function PrivateRoute({ children, ...rest }: any) {\n//   return (\n//     <Route\n//       {...rest}\n//       render={({ location }) =>\n//       common.timeDate.isBegin ? (\n//           children\n//         ) : (\n//           <Redirect\n//             to={{\n//               pathname: \"/\",\n//               state: { from: location }\n//             }}\n//           />\n//         )\n//       }\n//     />\n//   );\n// }\n\n\nfunction App() {\n  return (\n    <section className=\"hzfe-music\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"*\" exact>\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport localforage from 'localforage';\nimport { ConfigProvider } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport './common.less'\nimport './index.scss';\n\nlocalforage.config({\n  name: 'HZFE-MUSIC',\n});\n\n\n\nReactDOM.render(\n  <ConfigProvider locale={zh_CN}>\n    <App />\n  </ConfigProvider>,\n  // <React.StrictMode>\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}