{"version":3,"sources":["utils/enmus.ts","utils/index.ts","Components/Lrc/index.tsx","Components/Progress/index.tsx","utils/local.ts","store/common.ts","Components/Control/playingType.tsx","Components/Control/index.tsx","Components/Lrc/Lrc-word.tsx","Components/Player/index.tsx","config.ts","store/upload.ts","utils/upload.ts","Components/Upload/index.tsx","Components/LrcList/index.tsx","Components/Playing-icon/index.tsx","Components/MusicList/index.tsx","Components/AlbumList/index.tsx","Local/index.tsx","Love/index.tsx","Home/index.tsx","App.tsx","index.tsx"],"names":["EnumPlayingType","loadFile","file","a","isBuffer","Promise","resolve","reject","reader","FileReader","onload","event","target","result","Blob","onerror","readAsArrayBuffer","readAsText","uint8arrayToBase64","u8Arr","slice","index","length","subarray","Math","min","String","fromCharCode","apply","btoa","formatTime","secs","minutes","floor","seconds","transformArrayToTime","str","len","timeArr","exec","map","item","Number","dataURLtoBlob","base64","arr","split","mime","res","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","type","Lrc","props","useState","lrcList","setLrcList","lrcIndex","setLrcIndex","lrcScroll","useRef","canScroll","setCanScroll","document","body","offsetHeight","lineHeight","setLineHeight","useEffect","lrc","lrc_s","lyric","replace","p1","lyricLen","i","lrcTimes","lrcText","timeLen","j","lrcTime","push","time","text","filter","sort","b","formatLrc","getChooseLrcIndex","currentTime","setCurrentLrc","isPlaying","current","top","querySelectorAll","forEach","scrollTo","behavior","getLrcChooseName","resize","window","addEventListener","removeEventListener","className","ref","onMouseEnter","onMouseLeave","lrcItem","key","style","color","dangerouslySetInnerHTML","__html","Progress","value","setValue","isChanging","setIsChanging","range","defaultValue","onChange","setChange","handleChanging","onAfterChange","tooltipVisible","typeList","name","loop","icon","single","random","addLrc","localforage","getItem","list","every","fileName","setItem","getLrcList","addMusic","musicInfo","blob","musicHash","Date","now","id","removeMusic","removeItem","getMusicList","getMusicInfoFromLocal","cur","music","lrcKey","content","picture","pictureUrl","URL","createObjectURL","removeLrc","getLastPlayType","setLastPlayType","common","handlePlay","console","log","updatedMusicData","musicPlayer","seek","duration","playing","change","navigator","MediaMetadata","mediaSession","metadata","title","artist","album","artwork","src","sizes","handlePause","handleEnd","requestAnimationFrame","handlePlaying","handleNextMusic","handleStop","musicData","setPositionState","playbackRate","position","isControl","stop","playingType","musicPlayList","randomIndex","next","play","handlePreMusic","pre","localMusicLrcList","nextType","this","url","preUrl","preImgUrl","revokeObjectURL","shift","code","updatePreUrl","updatePreImgUrl","Howl","autoplay","html5","format","codec","toLowerCase","fileType","volume","onplay","onpause","onend","onstop","setActionHandler","pause","evt","seekTime","data","process","hasOwnProperty","classList","remove","add","setTimeout","observable","action","Map","localMusicList","get","set","localAlbumMap","localMusicLoading","updateMusicPlayList","cloneDeep","updateLocalAlbumList","message","success","updateLocalMusicList","error","localMusicLrcLoading","updateLocalMusicLrcList","musicColor","documentElement","setProperty","PlayingType","observer","getPrePlayType","currentType","currentTypeOptions","find","placement","aria-hidden","onClick","updatePlayingType","xlinkHref","Control","setRange","allTime","currentInfo","musicPlayingInfo","StepBackwardOutlined","PauseCircleOutlined","PlayCircleOutlined","StepForwardOutlined","toFixed","LrcWord","backgroundImage","bg","setBg","lineTime","start","end","formatLrcProgress","getChooseLrcWordIndex","join","progress","wordIndex","getWordLineProgress","word","fac","FastAverageColor","Player","currentLrc","refChange","setChangeFromControl","getInfoFormLocal","useCallback","handelPlay","getMusicInfo","info","updatedMusicInfo","getColorAsync","then","updateMusicColor","setSaturation","setLightness","rgba","catch","e","keyDown","keyCode","preventDefault","handelChangeSize","createdPlayer","destroyPlayer","alt","DownOutlined","supportMusicFormat","supportMusicLrcFormat","upload","checkUpload","isUploading","uploadList","handleUpload","uploadRun","File","addUploadTask","nameList","FileType","FileName","includes","handleMusicData","handleMusicLrc","warning","musicMetadata","obj","albumartist","artists","comment","date","sampleRate","fileSize","filesize","size","UploadFile","beforeUpload","showUploadList","accept","concat","acceptStr","multiple","UploadOutlined","LrcList","columns","dataIndex","sorter","render","_","row","onConfirm","handleDelete","okText","cancelText","loading","deleteLrc","dataSource","pagination","rowKey","PlayingIcon","MusicList","width","handlePauseClick","handlePlayClick","deleteMusic","AlbmuList","keys","TabPane","Tabs","Locale","history","useHistory","query","URLSearchParams","useLocation","search","params","setKey","handleRelated","musicList","clear","marginLeft","activeKey","pathname","tab","Love","Home","to","exact","path","Local","App","config","ReactDOM","locale","zh_CN","getElementById"],"mappings":"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","file":"static/js/main.f501a119.chunk.js","sourcesContent":["// 播放枚举值\nexport enum EnumPlayingType {\n  // 顺序播放\n  loop = 'loop',\n  // 单曲循环\n  single = 'single',\n  // 随机播放\n  random = 'random',\n}\n\n// 播放列表\nexport const typeList = [\n  {\n    name: '顺序播放',\n    key: EnumPlayingType.loop,\n    icon: '#icon-shunxubofang'\n  },\n  {\n    name: '单曲循环',\n    key: EnumPlayingType.single,\n    icon: '#icon-danquxunhuan'\n  },\n  {\n    name: '随机播放',\n    key: EnumPlayingType.random,\n    icon: '#icon-suiji'\n  },\n]\n","import { get } from \"lodash\"\nimport { InterfaceLrc, InterfaceLrcWord, InterfaceMusicInfo } from \"../Interface/music\"\n\n// 上次文件转化函数\nexport const loadFile = async (file: File, isBuffer = true): Promise<any> => {\n  if (!file) {\n    return ''\n  }\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event: Event) => {\n      const target = event.target as FileReader\n      if (isBuffer) {\n        resolve(target.result ? new Blob([target.result]) : null)\n      } else {\n        resolve(target.result)\n      }\n    }\n    reader.onerror = reject\n    // 转化为blob\n    if (isBuffer) {\n      reader.readAsArrayBuffer(file)\n    } else {\n      reader.readAsText(file)\n    }\n  })\n}\n\n// 格式化歌曲信息保存\nexport const transformMusicInfo = (obj: any): InterfaceMusicInfo => {\n  const result: InterfaceMusicInfo = {\n    // 歌曲名\n    name: get(obj, 'common.title', ''),\n    // 专辑名\n    album: get(obj, 'common.album', ''),\n    // 专辑主导艺人\n    albumartist: get(obj, 'common.albumartist', ''),\n    // 专辑艺人\n    artist: get(obj, 'common.artist', ''),\n    // 专辑艺人列表\n    artists: get(obj, 'common.artists', []),\n    // 专辑备注: \n    comment: get(obj, 'common.comment', []),\n    // 歌曲时间\n    date: get(obj, 'common.date', 0),\n    // 歌曲图片\n    picture: get(obj, 'common.picture', []).map((item: any) => {\n      return `data:${item.format};base64,${uint8arrayToBase64(item.data)}`\n    }),\n    // 编码方式\n    codec: get(obj, 'format.codec', ''),\n    // 歌曲时长\n    duration: get(obj, 'format.duration', 0),\n    // 歌曲采样率\n    sampleRate: get(obj, 'format.sampleRate', ''),\n    // 对应的歌词信息 key\n    lrc: ''\n  }\n  return result\n}\n\n\nexport const uint8arrayToBase64 = (u8Arr: { length: any; subarray: (arg0: number, arg1: number) => any }): string => {\n  let CHUNK_SIZE = 0x8000; //arbitrary number\n  let index = 0;\n  let length = u8Arr.length;\n  let result = '';\n  let slice;\n  while (index < length) {\n    slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\n    result += String.fromCharCode.apply(null, slice);\n    index += CHUNK_SIZE;\n  }\n  return btoa(result);\n}\n\n// 歌词解析算法 - 逐行解析的歌词\nexport const formatLrc = (lrc: string): InterfaceLrc[] => {\n  // ti: 歌曲标题  ar: 歌唱者  al:  唱片集\n  // 格式  [00:01.01]七里香 - 周杰伦   或者 [01:20.64][01:47.80][02:41.96][03:35.77]雨下整夜我的爱溢出就像雨水\n\n  // 如果两个数组中间有文字 类似[01:20.64]我[01:47.80] 表示这个是是单字解析的歌词，那么我们就进行二次加工处理\n  let lrc_s = lrc\n  if (lrc_s) {\n    lrc_s = lrc_s.replace(/([^\\]^\\n])\\[/g, (match, p1) => p1 + '\\n[');\n    const lyric = lrc_s.split('\\n');\n    let res = [];\n    const lyricLen = lyric.length;\n    for (let i = 0; i < lyricLen; i++) {\n      // match lrc time\n      const lrcTimes = lyric[i].match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g);\n      // match lrc text\n      const lrcText = lyric[i]\n        .replace(/.*\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g, '')\n        .replace(/<(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?>/g, '')\n        .replace(/^\\s+|\\s+$/g, '');\n\n      if (lrcTimes) {\n        // handle multiple time tag\n        const timeLen = lrcTimes.length;\n        for (let j = 0; j < timeLen; j++) {\n          const lrcTime = transformArrayToTime(lrcTimes[j])\n          res.push({\n            time: lrcTime,\n            text: lrcText\n          });\n        }\n      }\n    }\n    // sort by time\n    res = res.filter((item: InterfaceLrc) => item.text);\n    res.sort((a: InterfaceLrc, b: InterfaceLrc) => a.time - b.time);\n    return res;\n  } else {\n    return [];\n  }\n}\n\n// 格式化时间显示\nexport const formatTime = (secs: number): string => {\n  const minutes = Math.floor(secs / 60) || 0;\n  const seconds = ~~(secs - minutes * 60) || 0;\n  return (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\n}\n\n// 返回当前歌词选中的索引\nexport const getChooseLrcIndex = (lrcList: InterfaceLrc[], time: number): number => {\n  if (lrcList.length <= 0) return -1\n  let index = 0\n  // 如果比当前时间小，那么聚焦当前时间\n  while (index < lrcList.length) {\n    if (lrcList[index].time > time) {\n      break\n    }\n    index++\n  }\n  return index - 1\n}\n\n// 歌词解析算法 - 逐行-分字解析歌词\nexport const formatLrcProgress = (lrc: string): InterfaceLrcWord[][] => {\n  let res: any[] = []\n  console.log('进入逐字解析的歌词哦')\n  // 逐字的歌词 ->  每行开始时间， 每个字开始时间 -> 计算百分比进行每个字覆盖\n  // 先按照 \\n 进行换行处理，然后正则提出每个字的时间，然后计算出每行的开始时间\n  let lrcStr = lrc\n  const lyric = lrcStr.split('\\n')\n  let i = 0\n  while (i < lyric.length) {\n    let cur = lyric[i].replace(/\\s/g, '')\n    const lrcTimes = cur.match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g)\n    const lrcText = cur.match(/(?<=\\])\\S\\s?(?=\\[)/g)\n    if (lrcTimes && lrcText) {\n      // console.log(lrcTimes, lrcText)\n      // 时间是 [[00:32.27], [00:32.27]] 数组，  子也是数组\n      // 数据结构，每个字开始时间和结束时间 start = j + 1    end j - 1\n      const lineTime = []\n      for (let j = 0; j < lrcText.length; j++) {\n        lineTime.push({\n          text: lrcText[j],\n          start: transformArrayToTime(lrcTimes[j]),\n          end: transformArrayToTime(lrcTimes[j + 1])\n        })\n      }\n      res.push(lineTime)\n    }\n    i++\n  }\n  return res\n}\n\n// 转换时间 [00:42.27] -> 11ms\nexport const transformArrayToTime = (str: string): number => {\n  // 这里其实要处理下，看看是后面的毫秒是 2 位，还是3 位\n  let len = 3;\n  let time = 0\n  const timeArr: number[] = /\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/.exec(str)?.map((item, index) => {\n    if (index === 4) {\n      len = item?.length ?? len;\n    }\n    return item ? Number(item) : 0\n  }) || []\n  const min2sec = timeArr[1] * 60;\n  const sec2sec = timeArr[2];\n  const msec2sec = timeArr[4] ? timeArr[4] / (len === 2 ? 100 : 1000) : 0;\n  time = min2sec + sec2sec + msec2sec;\n  return time\n}\n\n// 获取逐字歌词的当前行\nexport const getChooseLrcWordIndex = (lrcList: InterfaceLrcWord[][], time: number): number => {\n  if (lrcList.length <= 0) return -1\n  let index = 0\n  // 如果比当前时间小，那么聚焦当前时间\n  while (index < lrcList.length) {\n    if (lrcList[index][0].start > time) {\n      break\n    }\n    index++\n  }\n  return index - 1\n}\n\n\n// 获取逐字歌词的当前行的百分比\nexport const getWordLineProgress = (lrcItem: InterfaceLrcWord[], time: number): number => {\n  if (!lrcItem) return 0\n  let progress = 0\n  // 看看在当前时间的哪个字，同时看看占比当前时间间隙的百分比\n  let wordIndex = 0\n  // 如果比当前字小，那么聚焦上一个字\n  while (wordIndex < lrcItem.length) {\n    if (time < lrcItem[wordIndex].start) {\n      break\n    }\n    wordIndex++\n  }\n  // 知道哪个字后, 看看一共多少字，然后分百分比，这里从 0 开始，实际少了一个字\n  wordIndex = wordIndex - 1\n  // 如果当前时间比字结束时间大，那么是 100%\n  const cur = lrcItem[wordIndex]\n  if (!cur) return 0\n  if (time >= cur.end) {\n    return 100\n  }\n  progress = (wordIndex / lrcItem.length) * 100\n  progress += (((time) - lrcItem[wordIndex].start) / (lrcItem[wordIndex].end - lrcItem[wordIndex].start) * (1 / lrcItem.length)) * 100\n  // console.log('当前行进度条', progress, time, wordIndex, lrcItem);\n  return progress\n}\n\n// 滚动函数\nexport const goScroll = (top: number, target: HTMLElement) => {\n  let requestAnimationFrame: any = null\n  if (window.requestAnimationFrame) {\n    requestAnimationFrame = window.requestAnimationFrame\n  } else {\n    requestAnimationFrame = setTimeout((fn) => {\n      fn()\n    }, 17)\n  }\n  // 当前时间\n  let t = 0\n  // 初始值\n  const b = target.scrollTop\n  // 变化量\n  const c = top - b\n\n  // 如果变化量太大，直接终止\n  if (Math.abs(c) > 200) {\n    target.scrollTo({\n      top,\n      behavior: 'smooth'\n    })\n    return\n  }\n  // 持续时间\n  const d = 32\n  const step = () => {\n    let top = Tween.Linear(t, b, c, d)\n    target.scrollTo({\n      top\n    })\n    t += 1\n    if (t <= d) {\n      requestAnimationFrame(step)\n    }\n  }\n  step()\n}\n// 运动\nconst Tween = {\n  Linear: function (t: number, b: number, c: number, d: number): number {\n    return c * t / d + b;\n  },\n  QuadIn: function (t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t + b;\n  },\n  QuadOut: function (t: number, b: number, c: number, d: number): number {\n    return -c * (t /= d) * (t - 2) + b;\n  },\n  QuadInOut: function (t: number, b: number, c: number, d: number): number {\n    if ((t /= d / 2) < 1) return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n  },\n  CubicIn: function (t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t * t + b;\n  }\n}\n\n// 返回音乐播放格式\nexport const getFormatCode = (code: string) => {\n  if (code === 'mpeg 1 layer 3') return 'mp3'\n  return code\n}\n\n// base64 转 blob\nexport const dataURLtoBlob = (base64: string): Blob => {\n  const arr = base64.split(',')\n  let mime = ''\n  if (arr.length) {\n    const res = arr[0].match(/:(.*?);/)\n    if (res?.length) {\n      mime = res[1]\n    }\n  }\n  const bstr = atob(arr[1])\n  let n = bstr.length\n  const u8arr = new Uint8Array(n);\n  while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new Blob([u8arr], { type: mime });\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport { InterfaceLrc, InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatLrc, getChooseLrcIndex } from \"../../utils\"\nimport './index.scss'\nconst Lrc = (props: {\n  lrc: string,\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  setCurrentLrc: Function,\n  color?: string\n}) => {\n  // 保存当前渲染的歌词列表\n  const [lrcList, setLrcList] = useState<InterfaceLrc[]>([])\n\n  // 需要渲染的歌词\n  const [lrcIndex, setLrcIndex] = useState(-1)\n\n  // 歌词滚动容器\n  const lrcScroll = useRef(null);\n\n  // 当前是否可以进行歌词的自动滚动\n  const [canScroll, setCanScroll] = useState(true)\n\n  const [lineHeight, setLineHeight] = useState(document.body.offsetHeight * 2.5 / 100)\n\n\n  const topHeight = 80\n   \n  useEffect(() => {\n    setLrcList(formatLrc(props.lrc))\n  }, [props.lrc])\n\n  useEffect(() => {\n    setLrcIndex(\n      getChooseLrcIndex(lrcList, props.currentTime)\n    )\n    if (lrcList.length && lrcList[lrcIndex]) {\n      props.setCurrentLrc(lrcList[lrcIndex].text)\n    }\n  }, [lrcIndex, lrcList, props])\n\n  useEffect(() => {\n    if (lrcScroll && canScroll && props.isPlaying) {\n      // 计算当前歌词应该需要滚动的场景\n      const target: any = lrcScroll.current\n      // 这里因为可能涉及换行，所以需要计算出每行的高度, 拿到高度\n      // const top = lineHeight * (lrcIndex - topLine) || 0\n      let top = -topHeight\n      document.querySelectorAll('.lrc-list p').forEach((item: any, index) => {\n        if (index < lrcIndex) {\n          top += item.offsetHeight + lineHeight\n        }\n      })\n      if (target) {\n        target.scrollTo({\n          top,\n          behavior: 'smooth'\n        })\n        // goScroll(top, target)\n      }\n    }\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\n\n  const getLrcChooseName = (index: number) => {\n    // 这里处理下其他的, 最近 10 条显示\n    if(lrcIndex === index) {\n      return 'choose-lrc'\n    }\n    return ''\n  }\n  \n  const resize = () => {\n    // 浏览器高除以高度,计算出每行的高度\n    setLineHeight(document.body.offsetHeight * 2.5 / 100)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n    return () => {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  return (\n    <section className=\"music-lrc\"\n      ref={lrcScroll}\n      onMouseEnter={() => {\n        setCanScroll(false)\n      }}\n      onMouseLeave={() => {\n        if (!props.isPlaying) {\n          setCanScroll(true)\n          return\n        }\n        const target: any = lrcScroll.current\n        let top = -topHeight\n        document.querySelectorAll('.lrc-list p').forEach((item: any, index) => {\n          if (index < lrcIndex) {\n            top += item.offsetHeight + lineHeight\n          }\n        })\n        if (target) {\n          target.scrollTo({\n            top,\n            behavior: 'auto'\n          })\n        }\n        setCanScroll(true)\n      }}>\n      {/* 渲染歌词列表 */}\n      <section className=\"lrc-list\">\n        {\n          lrcList.map((lrcItem: InterfaceLrc, index) => (\n            <p \n              key={ `${lrcItem.time}${lrcItem.text}`}\n              style={{\n                color: lrcIndex === index ? props.color : ''\n              }}\n              className={getLrcChooseName(index)}\n              dangerouslySetInnerHTML={{\n                __html: lrcItem.text\n              }}\n            >\n            </p>\n          ))\n        }\n      </section>\n    </section>\n  )\n}\n\nexport default Lrc","import React, { useEffect, useState } from \"react\"\nimport './index.scss'\nimport { Slider } from 'antd';\n\nconst Progress = (props: {\n  range: number,\n  handleChanging: Function,\n  setChange: Function,\n}) => {\n\n  const [value, setValue] = useState(0)\n\n  const [isChanging, setIsChanging] = useState(false)\n\n\n  useEffect(() => {\n    if (!isChanging) {\n      setValue(props.range)\n    }\n  }, [isChanging, props.range])\n\n  const onChange = (value: number) => {\n    setIsChanging(true)\n    props.setChange(true)\n    setValue(value)\n    props.handleChanging(value)\n  }\n\n  const onAfterChange = (value: number) => {\n    // 已经取消拖动，可以同步跳转了\n    // console.log('afterChange', value)\n    props.setChange(false)\n    setIsChanging(false)\n  }\n\n  return (\n    <section className=\"progress\">\n       <Slider defaultValue={0} value={value} onChange={onChange} onAfterChange={onAfterChange} tooltipVisible={false} />\n    </section>\n  )\n}\n\nexport default Progress","/**\n * 所有对数据操作的集合，包括存储数据， 查询数据\n * \n * 1. 歌曲的储存方式\n *   MusicList  InterfaceMusicInfo  \n *   id -> 名称生成的hash 值\n *   lrc ->   歌词，在列表进行操作关联\n *   music -> 歌曲的 blob，播放时进行查询关联\n *    \n * \n *   music-名称生成的hash 值, 随机储存, 播放通过歌曲信息的 hash 值获取具体文件流\n * \n *   LrcList  InterfaceLrcInfo  id -> 名称生成的hash 值, 文件本身存在列表里面\n * \n */\n\nimport localforage from 'localforage'\nimport { dataURLtoBlob } from '.'\nimport { InterfaceLrcInfo, InterfaceMusicInfo } from '../Interface/music'\nimport { EnumPlayingType } from './enmus'\n\n /**\n  * 添加歌词的存储方法\n  * key: music-lrc-list\n  */\n export const addLrc = async (lrc: InterfaceLrcInfo):Promise<any> => {\n    const key = 'music-lrc-list'\n    // 歌词，直接拉出列表，然后塞进去，储存\n    const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\n    // 这里需要判断下是否已经存在\n    let noExist = list.every(item => item.fileName !== lrc.fileName)\n    if (noExist) {\n      list.push(lrc)\n    }\n    return localforage.setItem('music-lrc-list', list)\n}\n\n// 获取歌词列表\nexport const getLrcList = async ():Promise<InterfaceLrcInfo[]>  => {\n  const key = 'music-lrc-list'\n  const list: InterfaceLrcInfo[] = await localforage.getItem(key)  || []\n  return list\n}\n\n/**\n * 添加歌曲列表方法\n * music-list\n * 具体流地址 music-名称生成的hash 值\n */\n\nexport const addMusic = async (musicInfo: InterfaceMusicInfo, blob: Blob):Promise<any> => {\n  const key = 'music-list'\n  // 歌曲，直接拉出列表，然后塞进去，储存\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n  // 这里需要判断下是否已经存在\n  let noExist = list.every(item => item.fileName !== musicInfo.fileName)\n  if (noExist) {\n    // 这里需要去存储文件流\n    const musicHash = `${musicInfo.fileName}-${Math.random() * 100}-${Date.now()}`\n    musicInfo.id = musicHash\n    await localforage.setItem(musicHash, blob)\n    list.push(musicInfo)\n  }\n  return localforage.setItem('music-list', list)\n}\n\n// 通过 id 删除歌曲\nexport const removeMusic = async (id: string):Promise<Boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const key = 'music-list'\n      // 拉出歌曲列表\n      let list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n      list = list.filter(item => item.id !== id)\n      await localforage.setItem('music-list', list)\n      await localforage.removeItem(id)\n      resolve(true)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 获取歌曲列表\nexport const getMusicList = async ():Promise<InterfaceMusicInfo[]>  => {\n  const key = 'music-list'\n  const list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n  return list\n}\n\n// 获取单首歌词信息\nexport const getMusicInfoFromLocal = async (id: string): Promise<InterfaceMusicInfo> => {\n  return new Promise(async (resolve, reject) => {\n    const list = await localforage.getItem('music-list') as InterfaceMusicInfo[] || []\n    const cur = list.filter((item: InterfaceMusicInfo) => item.id === id)[0]\n    if (!cur) {\n      reject('获取歌曲信息失败')\n    } else {\n      cur.music = await localforage.getItem(id)  as Blob\n      if (cur.lrcKey) {\n         const lrcList = await getLrcList()\n         lrcList.forEach(item => {\n           if (item.fileName === cur.lrcKey) {\n            cur.lrc = item.content\n           }\n         })\n      }\n      // 这里处理下图片 url 的生成\n      if (cur.picture.length > 0) {\n        cur.pictureUrl = URL.createObjectURL(dataURLtoBlob(cur.picture[0]))\n      }\n      resolve(cur)\n    }\n  })\n} \n\n// 通过 id 删除歌词\nexport const removeLrc = async (id: string):Promise<Boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const key = 'music-lrc-list'\n      // 拉出歌词列表\n      let list: InterfaceMusicInfo[] = await localforage.getItem(key)  || []\n      list = list.filter(item => item.fileName !== id)\n      await localforage.setItem('music-lrc-list', list)\n      resolve(true)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 自动关联歌曲歌词\nexport const MusicRelatedLrc = (): Promise<string> => {\n  return new Promise(async(resolve, reject) => {\n    try {\n      let musicList = await getMusicList()\n      const lrcList = await getLrcList()\n      musicList = musicList.map((item: InterfaceMusicInfo) => {\n        lrcList.forEach((lrc: InterfaceLrcInfo) => {\n          if (lrc.fileName.includes(item.name)) {\n            item.lrcKey = lrc.fileName\n          }\n        })\n        return item\n      })\n      // console.log(musicList)\n      await localforage.setItem('music-list', musicList)\n      resolve('success')\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\n// 获取上次播放类型\nexport const getLastPlayType = async (): Promise<`${EnumPlayingType}`> => {\n  const key = 'last-play-type'\n  const type = await localforage.getItem(key) as `${EnumPlayingType}` ?? EnumPlayingType.random\n  return type\n}\n\n// 设置上次播放类型\nexport const setLastPlayType = async (type: `${EnumPlayingType}`): Promise<`${EnumPlayingType}`> => {\n  const key = 'last-play-type'\n  await localforage.setItem(key, type)\n  return type\n}","import { observable, action } from 'mobx';\nimport { InterfaceLrcInfo, InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../Interface/music';\nimport { Howl } from 'howler'\nimport { getLrcList, getMusicList, removeLrc, removeMusic, setLastPlayType, } from '../utils/local';\nimport { getFormatCode } from '../utils';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd'\nimport { EnumPlayingType } from '../utils/enmus';\nclass Common {\n  @observable\n  playingType: `${EnumPlayingType}` = EnumPlayingType.loop\n\n  @action\n  updatePlayingType (type: `${EnumPlayingType}`) {\n    // 切换当前播放状态 顺序播放 -> 单曲循环 -> 随机播放 -> 顺序播放\n    const nextType = type === EnumPlayingType.loop ? EnumPlayingType.single : type === EnumPlayingType.single ? EnumPlayingType.random : EnumPlayingType.loop\n    setLastPlayType(nextType)\n    this.playingType = nextType\n  }\n\n\n  @observable\n  preUrl: string = ''\n\n  @action\n  updatePreUrl (url: string) {\n    this.preUrl = url\n  }\n\n  @observable\n  preImgUrl: string[] = []\n\n  @action\n  updatePreImgUrl (url: string) {\n    this.preImgUrl.push(url)\n    if (this.preImgUrl.length >= 5) {\n      URL.revokeObjectURL(this.preImgUrl.shift() as string)\n    }\n  }\n  \n  // 音乐播放实例\n  @observable\n  musicPlayer: Howl | null = null\n\n  @action\n  createdPlayer () {\n    if (this.musicInfo && this.musicInfo.music) {\n      this.updatedMusicData({\n        playing: false,\n      })\n      const url = URL.createObjectURL(this.musicInfo.music)\n      if (this.preUrl) {\n        URL.revokeObjectURL(this.preUrl)\n      }\n      this.updatePreUrl(url)\n      this.updatePreImgUrl(this.musicInfo.pictureUrl || '')\n      this.musicPlayer = new Howl({\n        autoplay: true,\n        src: url,\n        html5: true,\n        format: [getFormatCode(this.musicInfo.codec.toLowerCase() || String(this.musicInfo.fileType).toLowerCase())],\n        volume: 1,\n        onplay: this.handlePlay,\n        onpause: this.handlePause,\n        onend: this.handleEnd,\n        onstop: this.handleStop\n      })\n      const navigator: any = window.navigator\n      if (navigator.mediaSession) {\n        navigator.mediaSession.setActionHandler('play', () => {\n          this.musicPlayer?.play()\n        })\n        navigator.mediaSession.setActionHandler('pause', () => {\n          this.musicPlayer?.pause()\n        })\n        navigator.mediaSession.setActionHandler('stop', () => {\n          this.musicPlayer?.stop()\n        })\n        navigator.mediaSession.setActionHandler('seekto', (evt: any) => {\n          const currentTime = Number(evt.seekTime)\n          this.musicPlayer?.seek(currentTime)\n        })\n        navigator.mediaSession.setActionHandler('seekbackward', (evt: any) => {\n          this.updatedMusicData({\n            change: true\n          })\n          const currentTime = Number(this.musicPlayer?.seek()) - 10\n          this.musicPlayer?.seek(currentTime)\n          this.updatedMusicData({\n            change: false\n          })\n        });\n        navigator.mediaSession.setActionHandler('seekforward', (evt: any) => {\n          this.updatedMusicData({\n            change: true\n          })\n          const currentTime = Number(this.musicPlayer?.seek()) + 10\n          this.musicPlayer?.seek(currentTime)\n          this.updatedMusicData({\n            change: false\n          })\n        });\n        navigator.mediaSession.setActionHandler('previoustrack', this.handlePreMusic);\n        navigator.mediaSession.setActionHandler('nexttrack', this.handleNextMusic);\n      }\n    }\n  }\n\n  handlePlay = () => {\n    console.log('歌曲播放了', this.musicInfo?.name);\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      duration: this.musicPlayer?.duration(),\n      playing: true,\n      change: false\n    })\n    if (this.musicInfo && !this.musicInfo.duration) {\n      this.musicInfo.duration = Number(this.musicPlayer?.duration())\n    }\n    const navigator: any = window.navigator\n    const MediaMetadata = window.MediaMetadata\n    if (navigator.mediaSession && this.musicInfo){\n      navigator.mediaSession.metadata = new MediaMetadata({\n        title: this.musicInfo.name,\n        artist: this.musicInfo.artist,\n        album: this.musicInfo.album,\n        artwork: [{\n          src: this.musicInfo.pictureUrl || '',\n          type: 'image/jpeg',\n          sizes: '512x512'\n        }]\n      });\n    }\n  }\n\n  handlePause = () => {\n    console.log('歌曲暂停了')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n  }\n\n  handleEnd = () => {\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n    requestAnimationFrame(this.handlePlaying)\n    console.log('歌曲播放完了')\n    this.handleNextMusic(false)\n  }\n\n  handleStop = () => {\n    console.log('歌曲停止')\n    this.updatedMusicData({\n      currentTime: this.musicPlayer?.seek(),\n      playing: false,\n    })\n  }\n\n  handlePlaying = () => {\n    if (!this.musicData.change && this.musicPlayer?.playing()) {\n      this.updatedMusicData({\n        type: 'update',\n        currentTime: this.musicPlayer.seek()\n      })\n      const navigator: any = window.navigator\n      if (navigator.mediaSession && this.musicPlayer) {\n        navigator.mediaSession.setPositionState({\n          duration: Number(this.musicPlayer.duration()),\n          playbackRate: 1,\n          position: this.musicPlayer.seek()\n        })\n      }\n      requestAnimationFrame(this.handlePlaying)\n    }\n  }\n\n  @action\n  destroyPlayer () {\n    this.musicPlayer = null\n  }\n\n\n  @observable\n  musicInfo: InterfaceMusicInfo | null = null\n\n  @action\n  updatedMusicInfo (data: InterfaceMusicInfo) {\n    if (data.picture.length === 0) {\n      data.picture = [`${process.env.PUBLIC_URL}/images/music-no.jpeg`]\n    }\n    this.musicInfo = data\n  }\n  \n \n\n  // 当前音乐播放的数据\n  @observable\n  musicData: InterfaceMusicPlayingInfo  = {\n    id: '',\n    playing: false,\n    duration: 0,\n    currentTime: 0,\n    change: false,\n    min: true\n  }\n\n  @action\n  updatedMusicData (data: any) {\n    if (data.type === 'update') {\n      this.musicData.currentTime = data.currentTime\n      return\n    }\n    // 判断 body 样式\n    if (data.hasOwnProperty('min')) {\n      if (data.min) {\n        document.body.classList.remove('dialog-screen')\n      } else {\n        document.body.classList.add('dialog-screen')\n      }\n    }\n    if (!data.change) {\n      setTimeout(() => {\n        // requestAnimationFrame(this.handlePlaying)\n        this.handlePlaying()\n      }, 100)\n    }\n    this.musicData = {\n      ...this.musicData,\n      ...data\n    }\n  }\n\n  // 播放器状态\n  @observable\n  musicPlayerStats = {\n    // 播放器循环状态  单曲播放 single, 随机 random 顺序播放 order\n    loop: 'random'\n  }\n  \n  // 播放下一首，上一首功能实现\n  @observable\n  musicPlayList: InterfaceMusicInfo[] = []\n\n  @action\n  updateMusicPlayList = (list: InterfaceMusicInfo[]) => {\n    this.musicPlayList = list\n  }\n\n  // 歌曲播放下一首, 如果是手动切换的，那么还是需要切换到下一首\n  handleNextMusic = (isControl = true) => {\n    if (this.musicPlayer) {\n      this.musicPlayer.stop()\n    }\n    // 如果是单曲循环\n    if (this.playingType === EnumPlayingType.single && !isControl) {\n      this.musicPlayer?.play()\n      return\n    }\n    // 随机播放\n    if (this.playingType === EnumPlayingType.random && this.musicPlayList.length > 2) {\n      const randomIndex = Math.floor(Math.random() * this.musicPlayList.length)\n      common.updatedMusicData({\n        id: this.musicPlayList[randomIndex].id,\n      })\n      return\n    }\n    let cur = 0\n    const len = this.musicPlayList.length - 1\n    while (cur < this.musicPlayList.length) {\n      if (this.musicPlayList[cur].id === this.musicData.id) {\n        break\n      }\n      cur++\n    }\n    // 防止超出下一首\n    let next = cur + 1\n    next = next > len ? (next - len) - 1 : next\n    if (this.musicPlayList[next].id === this.musicData.id) {\n      this.musicPlayer?.play()\n    } else {\n      common.updatedMusicData({\n        id: this.musicPlayList[next].id\n      })\n    }\n  }\n\n  // 歌曲播放上一首\n  handlePreMusic = (isControl = true) => {\n    if (this.musicPlayer) {\n      this.musicPlayer.stop()\n    }\n    // 如果是单曲循环\n    if (this.playingType === EnumPlayingType.single && !isControl) {\n      this.musicPlayer?.play()\n      return\n    }\n    // 随机播放\n    if (this.playingType === EnumPlayingType.random && this.musicPlayList.length > 2) {\n      const randomIndex = Math.floor(Math.random() * this.musicPlayList.length)\n      common.updatedMusicData({\n        id: this.musicPlayList[randomIndex].id,\n      })\n      return\n    }\n    let cur = 0\n    const len = this.musicPlayList.length - 1\n    while (cur < this.musicPlayList.length) {\n      if (this.musicPlayList[cur].id === this.musicData.id) {\n        break\n      }\n      cur++\n    }\n    // 防止低于 0\n    let pre = cur - 1\n    pre = pre < 0 ? len : pre\n    if (this.musicPlayList[pre].id === this.musicData.id) {\n      this.musicPlayer?.play()\n    } else {\n      common.updatedMusicData({\n        id: this.musicPlayList[pre].id\n      })\n    }\n  }\n\n  // 本地音乐展示列表\n  @observable\n  localMusicList: InterfaceMusicInfo[] = []\n  @observable\n  localMusicLoading: boolean = false\n  @observable\n  localAlbumMap: Map<string, InterfaceMusicInfo[]> = new Map()\n\n  // 专辑生成说明，歌曲列表根据专辑的名称集合数组\n  @action\n  updateLocalAlbumList = () => {\n    const map = new Map()\n    this.localMusicList.forEach(item => {\n      if (item.album === '') return\n      const target = map.get(item.album) ?? []\n      map.set(item.album, [...target, item])\n    })\n    this.localAlbumMap = map\n  }\n\n  @action\n  updateLocalMusicList = async () => {\n    this.localMusicLoading = true\n    this.localMusicList = await getMusicList()\n    // 用来做播放列表更新\n    this.updateMusicPlayList(cloneDeep(this.localMusicList))\n    this.updateLocalAlbumList()\n    this.localMusicLoading = false\n  }\n\n  // 删除歌曲, 操作列表删除当前歌曲，同时删除歌曲文件流\n  @action deleteMusic = async (id: string) => {\n    try {\n      await removeMusic(id)\n      message.success('删除成功')\n      this.updateLocalMusicList()\n    } catch (error) {\n      console.log(error)\n      message.error('删除失败')\n    }\n  }\n\n\n  // 本地歌词展示列表\n  localMusicLrcList: InterfaceLrcInfo[] = []\n  @observable\n  localMusicLrcLoading: boolean = false\n\n  @action\n  updateLocalMusicLrcList = async () => {\n    this.localMusicLrcLoading = true\n    this.localMusicLrcList = await getLrcList()\n    this.localMusicLrcLoading = false\n  }\n\n  // 删除歌曲, 操作列表删除当前歌曲，同时删除歌曲文件流\n  @action deleteLrc = async (id: string) => {\n    try {\n      await removeLrc(id)\n      message.success('删除成功')\n      this.updateLocalMusicLrcList()\n    } catch (error) {\n      console.log(error)\n      message.error('删除失败')\n    }\n  }\n\n  // 音乐播放时修改全局主题色\n  @observable\n  musicColor = '#1890ff'\n\n  @action\n  updateMusicColor = (color: string) => {\n    this.musicColor = color\n    document.documentElement.style.setProperty('--primary-color', color)\n  }\n}\n\n\nconst common = new Common()\n\n\n \nexport default common\n\n","import React, { useEffect } from \"react\";\nimport common from \"../../store/common\";\nimport { getLastPlayType } from \"../../utils/local\";\nimport { observer } from \"mobx-react\"\nimport { EnumPlayingType, typeList } from \"../../utils/enmus\";\nimport { Tooltip } from \"antd\";\n\nconst PlayingType = observer(() => {\n  const getPrePlayType = async () => {\n    const type = await getLastPlayType() as `${EnumPlayingType}`;\n    common.playingType = type;\n  }\n\n  const currentType = common.playingType;\n\n  const currentTypeOptions = typeList.find(item => item.key === currentType);\n\n  const handleClick = () => {\n    common.updatePlayingType(currentType)\n  }\n\n  useEffect(() => {\n    getPrePlayType();\n  }, []);\n  return (\n    <section className=\"playing-type\">\n      <Tooltip placement=\"topLeft\" title={currentTypeOptions?.name} color=\"#999\">\n        <svg className=\"icon\" aria-hidden=\"true\" onClick={handleClick}>\n            <use xlinkHref={currentTypeOptions?.icon}></use>\n        </svg>\n      </Tooltip>\n    </section>\n  )\n});\n\nexport default PlayingType;","import React, { useEffect, useState } from 'react';\nimport './index.scss'\nimport { InterfaceMusicInfo, InterfaceMusicPlayingInfo } from '../../Interface/music';\nimport { formatTime } from '../../utils';\nimport Progress from '../Progress';\nimport { PauseCircleOutlined, PlayCircleOutlined, StepBackwardOutlined, StepForwardOutlined } from '@ant-design/icons';\nimport common from '../../store/common';\nimport PlayingType from './playingType';\n\nconst Control = (props: {\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  handlePlay: Function,\n  handlePause: Function,\n  handleChanging: Function,\n  setChange: Function,\n  musicPlayingInfo: InterfaceMusicPlayingInfo,\n  min?: Boolean\n}) => {\n\n  const [range, setRange] = useState(0)\n\n  useEffect(() => {\n    const allTime = props.currentInfo?.duration || props.musicPlayingInfo.duration || 0\n    setRange(\n      (props.currentTime / allTime) * 100\n    )\n  }, [props.currentInfo, props.currentTime, props.musicPlayingInfo.duration])\n\n  return (\n    <section className=\"player-control\">\n      {\n        props.min ? (\n          <section className=\"control-min\">\n            <section className=\"control-icon-list\">\n              <p onClick={() => common.handlePreMusic()}>\n                <StepBackwardOutlined />\n              </p>\n              <p className=\"icon-play-bg\" onClick={\n                () => {\n                  if (props.isPlaying) {\n                    props.handlePause()\n                  } else {\n                    props.handlePlay()\n                  }\n                }\n              }>\n                {\n                  props.isPlaying ? (\n                    <PauseCircleOutlined />\n                  ) : (\n                    <PlayCircleOutlined />\n                    )\n                }\n              </p>\n              <p onClick={() => common.handleNextMusic()}>\n                <StepForwardOutlined />\n              </p>\n              <PlayingType></PlayingType>\n            </section>\n            <section className=\"control-progress\">\n              <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\n            </section>\n            <section className=\"line-left\">\n              <span> {formatTime(props.currentTime || 0)} </span>\n              <span>/</span>\n              <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\n            </section>\n          </section>\n        ) : (\n            <section className=\"control\">\n              <section className=\"control-progress\">\n                <Progress range={Number(range.toFixed(2))} handleChanging={props.handleChanging} setChange={props.setChange}></Progress>\n              </section>\n              <section className=\"control-line\">\n                <section className=\"line-left\">\n                  <span> {formatTime(props.currentTime || 0)} </span>\n                  <span> {formatTime(props.currentInfo?.duration || props.musicPlayingInfo.duration || 0)} </span>\n                </section>\n                <section className=\"line-center\">\n                <section className=\"control-icon-list\">\n                  <p onClick={() => common.handlePreMusic()}>\n                    <StepBackwardOutlined />\n                  </p>\n                  <p className=\"icon-play-bg\" onClick={\n                    () => {\n                      if (props.isPlaying) {\n                        props.handlePause()\n                      } else {\n                        props.handlePlay()\n                      }\n                    }\n                  }>\n                    {\n                      props.isPlaying ? (\n                        <PauseCircleOutlined />\n                      ) : (\n                        <PlayCircleOutlined />\n                      )\n                    }\n                  </p>\n                  <p onClick={() => common.handleNextMusic()}>\n                    <StepForwardOutlined />\n                  </p>\n                  <PlayingType></PlayingType>\n            </section>\n                </section>\n              </section>\n            </section>\n          )\n      }\n\n    </section>\n  )\n}\n\nexport default Control","import React, { useEffect, useRef, useState } from \"react\"\nimport { InterfaceLrcWord, InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatLrcProgress, getChooseLrcWordIndex, getWordLineProgress} from \"../../utils\"\nimport './index-word.scss'\n// 逐字渲染的歌词\n\nconst LrcWord = (props: {\n  lrc: string,\n  currentInfo: InterfaceMusicInfo | null,\n  currentTime: number,\n  isPlaying: boolean,\n  setCurrentLrc: Function,\n  color?: string\n}) => {\n  // 保存当前渲染的歌词列表\n  const [lrcList, setLrcList] = useState<InterfaceLrcWord[][]>([])\n\n  // 需要渲染的歌词\n  const [lrcIndex, setLrcIndex] = useState(-1)\n\n  // 歌词滚动容器\n  const lrcScroll = useRef(null);\n\n  // 当前是否可以进行歌词的自动滚动\n  const [canScroll, setCanScroll] = useState(true)\n\n  // 当前进度\n  const [bg, setBg] = useState({\n    backgroundImage: ''\n  })\n\n  // 当前每行滚动的高度\n  const [lineHeight, setLineHeight] = useState(0)\n\n  const topLine = 1\n   \n  useEffect(() => {\n    setLrcList(formatLrcProgress(props.lrc))\n  }, [props.lrc])\n\n  useEffect(() => {\n    setLrcIndex(\n      getChooseLrcWordIndex(lrcList, props.currentTime)\n    )\n    if (lrcList[lrcIndex] && lrcList[lrcIndex].length) {\n      const text = lrcList[lrcIndex].map(item => {\n        return item.text\n      })\n      props.setCurrentLrc(text.join(''))\n    }\n    const key = getWordLineProgress(lrcList[lrcIndex], props.currentTime)\n    setBg(\n      {\n        backgroundImage: `-webkit-linear-gradient(left,${props.color} ${key}%,#ffffff ${key}%)`\n      }\n    )\n  }, [lrcIndex, lrcList, props])\n\n  useEffect(() => {\n    if (lrcScroll && canScroll && props.isPlaying) {\n      // 计算当前歌词应该需要滚动的场景\n      const target: any = lrcScroll.current\n      const top = lineHeight * (lrcIndex - topLine) || 0\n      if (target) {\n        target.scrollTo({\n          top,\n          behavior: 'smooth'\n        })\n      }\n    }\n  }, [canScroll, lineHeight, lrcIndex, props.isPlaying])\n\n  const getLrcChooseName = (index: number) => {\n    return lrcIndex === index ? 'choose-lrc-line' : ''\n  }\n\n  const resize = () => {\n    // 浏览器高除以 高度 + \n    setLineHeight(document.body.offsetHeight * (5 + 2.5) / 100)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n    return () => {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n\n  return (\n    <section className=\"music-lrc-word\"\n      ref={lrcScroll}\n      onMouseEnter={() => {\n        setCanScroll(false)\n      }}\n      onMouseLeave={() => {\n        setCanScroll(true)\n        if (!props.isPlaying) {\n          return\n        }\n        const target: any = lrcScroll.current\n        const top = lineHeight * (lrcIndex - topLine) || 0\n        if (target) {\n          target.scrollTo({\n            top,\n            behavior: 'auto'\n          })\n        }\n      }}>\n      {/* 渲染歌词列表 */}\n      <section className=\"lrc-list\">\n        {\n          lrcList.map((lrcItem: InterfaceLrcWord[], index) => (\n            <section key={ index } className=\"lrc-line\">\n              <p className={getLrcChooseName(index)} style={lrcIndex === index ? bg : {}}>\n                {\n                  lrcItem.map((word: InterfaceLrcWord, i) => (\n                    <span key={ i }>{word.text}</span>\n                  ))\n                }\n              </p>\n            </section>\n          ))\n        }\n      </section>\n    </section>\n  )\n}\n\nexport default LrcWord","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport './index.scss'\n// import Upload from '../Upload'\nimport { InterfaceMusicInfo } from '../../Interface/music';\nimport Lrc from '../Lrc';\nimport Control from '../Control';\nimport LrcWord from '../Lrc/Lrc-word';\nimport FastAverageColor from 'fast-average-color';\nimport { setLightness, setSaturation } from 'polished';\nimport { getMusicInfoFromLocal } from '../../utils/local';\nimport { DownOutlined } from '@ant-design/icons';\nimport { observer } from \"mobx-react\"\nimport common from '../../store/common';\n\nconst fac = new FastAverageColor();\n\nconst Player = observer(() => {\n\n  // const [musicPlayer, setMusicPlayer] = useState<Howl | null>(null)\n  const musicPlayer = common.musicPlayer\n\n  const musicInfo = common.musicInfo\n\n  // 当前的状态, 用来做歌曲时间，还是当前拖动时间的判定\n  const musicData = common.musicData\n\n  const [currentLrc, setCurrentLrc] = useState('')\n\n  const refChange = useRef(false)\n\n  // 主题色\n  const musicColor = common.musicColor\n\n  const handleChanging = (value: number) => {\n    // 当前拖动时间的改变\n    // 反推出当前时间\n    const time = (musicInfo?.duration || 0) * value / 100\n    common.updatedMusicData(\n      {\n        currentTime: time\n      }\n    )\n  }\n\n  const setChangeFromControl = (key: boolean) => {\n    if (!key) {\n      // 表示操作结束，开始同步数据，播放\n      musicPlayer?.seek(musicData.currentTime)\n      if (!musicData.playing) {\n        musicPlayer?.play()\n      }\n    }\n    common.updatedMusicData({\n      change: key\n    })\n  }\n\n  const getInfoFormLocal = useCallback(async () => {\n    return new Promise(async (resolve, reject) => {\n      const res = await getMusicInfoFromLocal(musicData.id)\n      if (res) {\n        resolve(res)\n      } else {\n        reject('歌曲信息获取失败')\n      }\n    })\n  }, [musicData.id])\n\n  // 歌曲停止事件\n  // const handleStop = useCallback(() => {\n  //   if (musicPlayer) {\n  //     musicPlayer.stop()\n  //   }\n  // }, [musicPlayer])\n\n  // 歌曲播放事件\n  const handelPlay = useCallback(() => {\n    if (musicPlayer) {\n      if (!musicPlayer.playing()) {\n        musicPlayer.play()\n      } else {\n        musicPlayer.pause()\n      }\n    }\n  }, [musicPlayer])\n\n  const getMusicInfo = useCallback(async () => {\n    if (!musicData.id) return\n    const info: InterfaceMusicInfo = await getInfoFormLocal() as InterfaceMusicInfo\n    if (!info) return\n    common.updatedMusicInfo(info)\n    fac.getColorAsync(info.pictureUrl || '')\n      .then(color => {\n        common.updateMusicColor(\n          setSaturation(.8, setLightness(.5, color.rgba))\n        )\n      })\n      .catch(e => {\n        common.updateMusicColor(\n          '#1890ff'\n        )\n      });\n  }, [getInfoFormLocal, musicData.id])\n\n  // 绑定键盘事件\n  const keyDown = useCallback((event: any) => {\n    const keyCode = event.keyCode as number\n    if (keyCode === 32) {\n      event.preventDefault()\n      handelPlay()\n    }\n  }, [handelPlay])\n\n  // 修改播放器状态\n  const handelChangeSize = () => {\n    common.updatedMusicData({\n      min: !musicData.min,\n    })\n  }\n\n  useEffect(() => {\n    getMusicInfo()\n  }, [getMusicInfo])\n\n\n  useEffect(() => {\n    if (musicInfo && !musicPlayer) {\n      setCurrentLrc('')\n      common.createdPlayer()\n    }\n    return () => {\n      if (musicPlayer) {\n        common.updatedMusicData({\n          playing: false\n        })\n        common.destroyPlayer()\n      }\n    }\n  }, [musicInfo, musicPlayer])\n\n  useEffect(() => {\n    refChange.current = musicData.change\n  }, [musicData.change])\n\n  useEffect(() => {\n    // 绑定enter 事件\n    window.addEventListener('keydown', keyDown)\n    return () => {\n      window.removeEventListener('keydown', keyDown)\n    }\n  }, [keyDown])\n\n\n  return (\n    <section className=\"player\">\n      {\n        musicData.min ? (\n          <section className=\"player-min\">\n            {\n              musicInfo ? (\n                <section className=\"player-layout\">\n                  <section className=\"layout-left\">\n                    <section className=\"music-img\" onClick={handelChangeSize}>\n                      <img src={musicInfo.pictureUrl ? musicInfo.pictureUrl : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\n                    </section>\n                    <section className=\"player-info\">\n                      <p className=\"music-name\">{musicInfo.name}</p>\n                      <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\n                    </section>\n                  </section>\n                  <section className=\"music-progress\">\n                    <Control\n                      handlePlay={handelPlay}\n                      handlePause={handelPlay}\n                      currentInfo={musicInfo || null}\n                      musicPlayingInfo={musicData}\n                      currentTime={musicData.currentTime}\n                      handleChanging={handleChanging}\n                      setChange={setChangeFromControl}\n                      min={musicData.min}\n                      isPlaying={musicData.playing}></Control>\n                  </section>\n                </section>\n              ) : (\n                  <section className=\"player-layout\">\n                    请选择歌曲进行播放\n                  </section>\n                )\n            }\n          </section>\n        ) : ('')\n      }\n      {\n        <section className={`player-max ${musicData.min ? 'player-max-min' : ''}`}>\n          <section className=\"status-control\" onClick={handelChangeSize}>\n            <DownOutlined />\n          </section>\n          <section className=\"player-bg\" style={{ \"backgroundImage\": `url(${musicInfo?.pictureUrl || process.env.PUBLIC_URL + '/images/music-no.jpeg'})` }}></section>\n          <section className=\"player-fade\"></section>\n          {/* <Upload></Upload> */}\n          {/* 这里去渲染歌曲信息 */}\n          <section className=\"player-layout\">\n            {\n              musicInfo ?\n                <section className=\"player-box\">\n\n                  <section className=\"player-left\">\n                    <section className=\"player-line\">\n                      <img src={musicInfo.pictureUrl ? musicInfo.pictureUrl : process.env.PUBLIC_URL + '/images/music-no.jpeg'} alt=\"\" />\n                    </section>\n                    <section className=\"player-line\">\n                      <section className=\"player-info\">\n                        <p className=\"music-name\">{musicInfo.name}</p>\n                        <p className=\"music-artist\">{musicInfo.artist} - {musicInfo.album}</p>\n                        <p\n                          className=\"music-current-lrc\"\n                          dangerouslySetInnerHTML={{\n                            __html: currentLrc\n                          }}\n                        ></p>\n                      </section>\n                    </section>\n                    <Control\n                      handlePlay={handelPlay}\n                      handlePause={handelPlay}\n                      currentInfo={musicInfo || null}\n                      musicPlayingInfo={musicData}\n                      currentTime={musicData.currentTime}\n                      handleChanging={handleChanging}\n                      setChange={setChangeFromControl}\n                      isPlaying={musicData.playing}></Control>\n                  </section>\n                  <section className=\"player-right\">\n                    {\n                      musicInfo.lrc?.match(/\\](\\S)\\[/g) ? (\n                        <LrcWord\n                          setCurrentLrc={setCurrentLrc}\n                          color={musicColor}\n                          lrc={musicInfo.lrc || ''}\n                          currentInfo={musicInfo || null}\n                          currentTime={musicData.currentTime}\n                          isPlaying={musicData.playing}></LrcWord>\n                      )\n                        : (\n                          <Lrc\n                            setCurrentLrc={setCurrentLrc}\n                            color={musicColor}\n                            lrc={musicInfo.lrc || ''}\n                            currentInfo={musicInfo || null}\n                            currentTime={musicData.currentTime}\n                            isPlaying={musicData.playing}></Lrc>\n                        )\n                    }\n                  </section>\n                </section> : ''\n            }\n          </section>\n        </section>\n      }\n    </section>\n  );\n})\n\nexport default Player\n","// 用来做文件解析， 文件生成， 歌词 歌曲匹配的配置文件\n\n// 支持的歌曲的格式\nexport const supportMusicFormat = [\n  'mp3', 'ogg', 'wav', 'aac', 'flac', 'dolby', 'opus', 'webm', 'alac'\n]\n\n// 支持的歌词的格式\nexport const supportMusicLrcFormat = [\n  'lrc', 'txt'\n]","import { observable, action } from 'mobx';\nimport { uploadRun } from '../utils/upload'\n\nclass Upload {\n  // 当前是否处于数据库写入的状态中, 同一时刻，只能进行一个读写操作\n  // 文件上传的处理\n  @observable\n  isUploading: boolean = false\n\n  @observable\n  uploadList: File[] = []\n\n  @action\n  addUploadTask = (File: File) => {\n    this.uploadList.push(File)\n    this.checkUpload()\n  }\n\n  // 检查是否处于上传的状态\n  checkUpload = async () => {\n    if (!this.isUploading && this.uploadList.length) {\n      this.handleUpload()\n    }\n  }\n\n  // 处理上传的数据\n  handleUpload = async () => {\n    try {\n      this.isUploading = true\n      const target = this.uploadList.shift() as File;\n      await uploadRun(target)\n      this.isUploading = false\n      this.checkUpload()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nconst upload = new Upload()\n\n\n \nexport default upload\n\n","import { supportMusicFormat, supportMusicLrcFormat } from '../config'\nimport { loadFile, transformMusicInfo } from '../utils';\nimport filesize from 'filesize'\nimport { InterfaceMusicInfo } from '../Interface/music';\nimport { addLrc, addMusic } from '../utils/local';\nimport * as musicMetadata from 'music-metadata-browser'\nimport { message } from 'antd';\nimport common from '../store/common';\nimport upload from '../store/upload';\n// import { MusicRelatedLrc } from \"./local\";\n\n\nexport const handleUpload = (File: File):boolean => {\n  upload.addUploadTask(File)\n  return false;\n}\n\nexport const uploadRun = async (File: File) => {\n  const nameList = File.name.split('.')\n  const FileType = nameList[nameList.length - 1].toLowerCase();\n  const FileName = File.name.replace(`.${FileType}`, '')\n  // 这里处理我们文件的存储\n  if (supportMusicFormat.includes(FileType)) {\n    await handleMusicData(File)\n    return false\n  }\n\n  if (supportMusicLrcFormat.includes(FileType)) {\n    await handleMusicLrc(File)\n    return false\n  }\n  message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\n  return false\n}\n\n\n// 音频文件处理\nconst handleMusicData = async (File: File) => {\n  // console.log(File, filesize(File.size))\n  const nameList = File.name.split('.')\n  const FileType = nameList[nameList.length - 1]\n  const FileName = File.name.replace(`.${FileType}`, '')\n  let blob:Blob\n  let result\n  try {\n    blob = await loadFile(File, true)\n    result = await musicMetadata.parseBlob(blob)\n  } catch (error) {\n    message.warning(`目前还不支持处理${FileType}这种类型文件，${FileName}`)\n    return\n  }\n  try {\n    const data: InterfaceMusicInfo = transformMusicInfo(result)\n    data.fileName = FileName\n    data.fileType = FileType\n    data.fileSize = filesize(File.size)\n    data.size = File.size\n    data.name = data.name || data.fileName || '未知歌曲'\n    await addMusic(data, blob)\n    message.success(`${File.name}  上传成功`)\n    console.log(`${File.name}  上传成功`)\n    common.updateLocalMusicList()\n  } catch (error) {\n    message.warning(error)\n  }\n}\n\n// 歌词文件处理\nconst handleMusicLrc = async (File: File) => {\n  const nameList = File.name.split('.')\n  const fileType = nameList[nameList.length - 1]\n  const fileName = File.name.replace(`.${fileType}`, '')\n  let result = ''\n  try {\n    result = await loadFile(File, false)\n  } catch (error) {\n    message.warning(`目前还不支持处理${fileType}这种类型文件，${fileName}`)\n    return\n  }\n\n  try {\n    await addLrc({\n      content: result,\n      fileName,\n      fileType,\n      size: File.size,\n      fileSize: filesize(File.size)\n    })\n    common.updateLocalMusicLrcList()\n    message.success(`${File.name}  上传成功`)\n    console.log(`${File.name}  上传成功`)\n  } catch (error) {\n    message.warning(error)\n  }\n}","import React from 'react';\nimport { Button, Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport './index.scss'\nimport { supportMusicFormat, supportMusicLrcFormat } from '../../config'\nimport { handleUpload } from '../../utils/upload'\n\nconst UploadFile = () => {\n  \n  const acceptStr = (): string => {\n    let arr = supportMusicFormat.concat(supportMusicLrcFormat)\n    arr = arr.map((item: string) => {\n      item = `.${item}`\n      return item\n    })\n    return arr.join(',')\n  }\n\n  return (\n    <section className=\"page-upload\">\n      <section className=\"upload-line\">\n        <Upload beforeUpload={handleUpload} showUploadList={false} accept={acceptStr()} multiple>\n          <Button icon={<UploadOutlined />}>点击上传本地歌曲或者歌词</Button>\n        </Upload>\n        <p className=\"tips\">\n          <span>支持歌曲格式 { supportMusicFormat.join('，')}</span>\n          <span>支持歌词格式 { supportMusicLrcFormat.join('，')}</span>\n        </p>\n      </section>\n    </section>\n  );\n}\n\nexport default UploadFile","// 歌词列表展示\nimport { Popconfirm, Table } from \"antd\"\nimport { observer } from \"mobx-react\"\nimport React, { useEffect } from \"react\"\nimport { InterfaceLrcInfo } from \"../../Interface/music\"\nimport common from \"../../store/common\"\n\nconst LrcList = observer(() => {\n  const columns = [\n    {\n      title: '歌词名',\n      dataIndex: 'fileName',\n      key: 'fileName',\n    },\n    {\n      title: '大小',\n      dataIndex: 'fileSize',\n      key: 'fileSize',\n      sorter: (a: InterfaceLrcInfo, b: InterfaceLrcInfo) => a.size - b.size\n    },\n    {\n      title: '操作',\n      dataIndex: 'name',\n      key: 'control',\n      render: (_: string, row: InterfaceLrcInfo) => {\n        return (\n          <p>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`确定删除-${row.fileName}-歌词嘛`}\n              onConfirm={() => handleDelete(row.fileName || '')}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <span className=\"link\">删除</span>\n            </Popconfirm>\n          </p>\n        )\n      }\n    },\n  ]\n  const list = common.localMusicLrcList\n  const loading = common.localMusicLrcLoading\n\n  const handleDelete = (id: string) => {\n    common.deleteLrc(id)\n  }\n\n  useEffect(() => {\n    console.log('获取歌词列表')\n    common.updateLocalMusicLrcList()\n  }, [])\n\n  return (\n    <section className=\"lrc-list\">\n      <Table\n        dataSource={list}\n        columns={columns}\n        pagination={false}\n        rowKey=\"fileName\"\n        loading={loading} />\n    </section>\n  )\n})\n\nexport default LrcList","import React from \"react\"\nimport './index.scss'\n\nconst PlayingIcon = () => {\n  return (\n    <p className=\"playing-icon\">\n      <span className=\"rect1\"></span>\n      <span className=\"rect2\"></span>\n      <span className=\"rect3\"></span>\n      <span className=\"rect4\"></span>\n      <span className=\"rect5\"></span>\n    </p>\n  )\n}\n\nexport default PlayingIcon","// 歌词列表展示\nimport { Popconfirm, Space, Table } from \"antd\"\nimport React, { useEffect } from \"react\"\nimport { InterfaceMusicInfo } from \"../../Interface/music\"\nimport { formatTime } from \"../../utils\"\nimport { observer } from \"mobx-react\"\nimport { PauseCircleOutlined, PlayCircleOutlined } from \"@ant-design/icons\"\nimport './index.scss'\nimport common from \"../../store/common\"\nimport PlayingIcon from \"../Playing-icon\"\nconst MusicList = observer(() => {\n  const musicData = common.musicData\n  const list = common.localMusicList\n  const loading = common.localMusicLoading\n  const columns = [\n    {\n      title: '歌曲',\n      dataIndex: 'name',\n      key: 'name',\n      width: 300,\n      render: (name: string, row: InterfaceMusicInfo) =>\n        (\n          <section className=\"list-play\">\n            {\n              (musicData?.id === row.id && musicData.playing) ?\n                (\n                  <span>\n                    <PauseCircleOutlined className=\"icon\" onClick={() => handlePauseClick()} />\n                  </span>\n                ) : (\n                  <span>\n                    <PlayCircleOutlined className=\"icon\" onClick={() => handlePlayClick(row)} />\n                  </span>\n                )\n            }\n            <span className=\"song-name\">{name}</span>\n            {\n              (musicData?.id === row.id && musicData.playing) ?\n                (\n                  <PlayingIcon></PlayingIcon>\n                ) : ''\n            }\n          </section>\n        )\n    },\n    {\n      title: '歌手',\n      dataIndex: 'artist',\n      key: 'artist',\n    },\n    {\n      title: '专辑',\n      dataIndex: 'album',\n      key: 'album',\n    },\n    {\n      title: '时长',\n      dataIndex: 'duration',\n      key: 'duration',\n      render: (time: number) => formatTime(time) || '未知',\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.duration) - Number(b.duration)\n    },\n    {\n      title: '格式',\n      dataIndex: 'codec',\n      key: 'codec',\n      render: (codec: string, row: InterfaceMusicInfo) => codec || row.fileType\n    },\n    {\n      title: '大小',\n      dataIndex: 'fileSize',\n      key: 'fileSize',\n      sorter: (a: InterfaceMusicInfo, b: InterfaceMusicInfo) => Number(a.size) - Number(b.size)\n    },\n    {\n      title: '关联歌词名',\n      dataIndex: 'lrcKey',\n      key: 'lrcKey',\n      render: (lrcKey: string, row: InterfaceMusicInfo) => {\n        if (lrcKey) {\n          return lrcKey\n        } else {\n          return (\n            <Space size=\"middle\">\n              <span className=\"action\">关联歌词</span>\n            </Space>\n          )\n        }\n      }\n    },\n    {\n      title: '操作',\n      dataIndex: 'name',\n      key: 'control',\n      render: (_: string, row: InterfaceMusicInfo) => {\n        return (\n          <p>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`确定删除-${row.name}-这首歌嘛`}\n              onConfirm={() => handleDelete(row.id || '')}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <span className=\"link\">删除</span>\n            </Popconfirm>\n          </p>\n        )\n      }\n    },\n  ]\n\n  const handlePlayClick = (item: InterfaceMusicInfo) => {\n    if (item.id !== musicData.id) {\n      common.musicPlayer?.stop()\n      setTimeout(() => {\n        common.updatedMusicData({\n          id: item.id\n        })\n      }, 100)\n    } else {\n      if (common.musicPlayer) {\n        common.musicPlayer.play()\n      }\n    }\n  }\n\n  const handlePauseClick = () => {\n    common.musicPlayer?.pause()\n  }\n\n  const handleDelete = (id: string) => {\n    common.deleteMusic(id)\n  }\n\n  useEffect(() => {\n    console.log('获取音乐列表')\n    common.updateLocalMusicList()\n  }, [])\n\n  return (\n    <section className=\"lrc-list-table\">\n      <Table dataSource={list} columns={columns} pagination={false} rowKey=\"fileName\" loading={loading} />\n    </section>\n  )\n})\n\nexport default MusicList","// 歌词列表展示\nimport React, { useEffect } from \"react\"\nimport { observer } from \"mobx-react\"\nimport './index.scss'\nimport common from \"../../store/common\"\nimport { InterfaceMusicInfo } from \"../../Interface/music\"\nconst AlbmuList = observer(() => {\n  const map = common.localAlbumMap\n  const list = [...map.keys()]\n  const musicData = common.musicData\n\n  const handlePlayClick = (item: InterfaceMusicInfo) => {\n    if (item.id !== musicData.id) {\n      common.musicPlayer?.stop()\n      setTimeout(() => {\n        common.updatedMusicData({\n          id: item.id\n        })\n      }, 100)\n    } else {\n      if (common.musicPlayer) {\n        common.musicPlayer?.stop()\n        common.musicPlayer.play()\n      }\n    }\n  }\n\n  useEffect(() => {\n    console.log('获取音乐列表')\n    common.updateLocalMusicList()\n  }, [])\n\n  return (\n    <section className=\"album-list\">\n      {\n        list.map(item => {\n          const info = map.get(item) as InterfaceMusicInfo[]\n          const album = info[0]\n          return (\n            <section key={item} className=\"album-item\" style={{\n              backgroundImage: `url(${album.picture || process.env.PUBLIC_URL + '/images/music-no.jpeg'})`\n            }}>\n              <section className=\"mask\"></section>\n                <section className=\"album-show\">\n                <p className=\"album-title\">{ item }</p>\n                <section className=\"music-list\">\n                  {\n                    info.map(music => (\n                      <p\n                        key={music.name}\n                        className={`music-item ${music.id === musicData.id ? 'active' : ''}`}\n                        onClick={() => handlePlayClick(music)}\n                      >\n                        <span>\n                          { music.name }\n                        </span>\n                      </p>\n                    ))\n                  }\n                </section>\n              </section>\n            </section>\n          )\n        })\n      }\n    </section>\n  )\n})\n\nexport default AlbmuList","import React, { useState } from \"react\"\nimport Upload from \"../Components/Upload\"\nimport { Button, message, Popconfirm, Tabs } from 'antd';\nimport LrcList from \"../Components/LrcList\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport MusicList from \"../Components/MusicList\";\nimport { MusicRelatedLrc } from \"../utils/local\";\nimport common from \"../store/common\";\nimport localforage from 'localforage'\nimport AlbumList from \"../Components/AlbumList\";\n\nconst { TabPane } = Tabs;\n\nconst Locale = () => {\n\n  const history = useHistory()\n\n  const useQuery = () => {\n    return new URLSearchParams(useLocation().search);\n  }\n  const query = useQuery()\n\n  const params = useLocation()\n\n  const tabCallback = (key: string) => {\n    history.push(`${params.pathname}?type=${key}`)\n  }\n  const [key, setKey] = useState('')\n\n  const handleRelated = async () => {\n    await MusicRelatedLrc()\n    message.success('关联成功')\n    common.updateLocalMusicList()\n    common.updateLocalMusicLrcList()\n  }\n\n  useEffect(() => {\n    const list = ['music', 'lrc', 'album']\n    if (query) {\n      const key = query.get('type') || ''\n      if (list.includes(key)) {\n        setKey(key)\n      } else {\n        setKey('album')\n      }\n    }\n  }, [query])\n\n  const handleClear = () => {\n    localforage.clear()\n    common.updateLocalMusicList()\n    common.updateLocalMusicLrcList()\n  }\n\n  return (\n    <section className=\"page-local\">\n      <section className=\"local-upload\">\n        <Upload></Upload>\n        <section>\n          <Button onClick={handleRelated}>自动关联歌词</Button>\n          <Popconfirm\n              placement=\"topLeft\"\n              title=\"清空数据库就无法恢复哦，谨慎操作\"\n              onConfirm={handleClear}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <Button style={{marginLeft: '30px'}}>清空数据库</Button>\n            </Popconfirm>\n          <p className=\"tips\">关联规则: 当前歌曲没有歌词，同时可以找到歌词名，包含完整歌曲名</p>\n        </section>\n      </section>\n      <section className=\"local-content\">\n        <Tabs activeKey={key} onChange={tabCallback}>\n        <TabPane tab=\"专辑列表\" key=\"album\">\n            <AlbumList />\n          </TabPane>\n          <TabPane tab=\"音乐列表\" key=\"music\">\n            <MusicList />\n          </TabPane>\n          <TabPane tab=\"歌词列表\" key=\"lrc\">\n            <LrcList />\n          </TabPane>\n        </Tabs>\n      </section>\n    </section>\n  )\n}\n\nexport default Locale","import React from \"react\"\n// import * as musicMetadata from 'music-metadata-browser'\n\n// 用来测试线上播放的数据\n\n// const online = {\n//   name: '寻找周杰伦',\n//   url: 'http://127.0.0.1:8887/%E5%85%AB%E5%BA%A6%E7%A9%BA%E9%97%B4/08.%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB.flac',\n//   lrc: 'http://127.0.0.1:8887/%E5%85%AB%E5%BA%A6%E7%A9%BA%E9%97%B4/%E5%91%A8%E6%9D%B0%E4%BC%A6%20-%20%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB.lrc'\n// };\n\n//  musicMetadata.fetchFromUrl(online.url).then(res => {\n//   console.log(res)\n// })\n\n// console.log(online)\n\nconst Love = () => {\n  return (\n    <p>测试在线音乐播放</p>\n  )\n}\n\nexport default Love","import React from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport Player from '../Components/Player';\nimport Locale from '../Local';\nimport Love from '../Love';\nimport './index.scss'\nconst Home = () => {\n\n  return (\n    <section className=\"page-home\">\n      <section className=\"wrapper-box\">\n        <section className=\"nav\">\n          <p className=\"nav-item\">\n            <NavLink to=\"/\">本地音乐</NavLink>\n          </p>\n          <p className=\"nav-item\">\n            <NavLink to=\"/like\" exact>在线音乐</NavLink>\n          </p>\n        </section>\n        <section className=\"music-box\">\n          <Switch>\n            <Route path=\"/like\" exact>\n              <Love />\n            </Route>\n            <Route path=\"/\" exact>\n              <Locale />\n            </Route>\n          </Switch>\n        </section>\n      </section>\n      <Player />\n    </section>\n  );\n}\n\nexport default Home\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './Home';\nimport './App.scss'\n\n// function PrivateRoute({ children, ...rest }: any) {\n//   return (\n//     <Route\n//       {...rest}\n//       render={({ location }) =>\n//       common.timeDate.isBegin ? (\n//           children\n//         ) : (\n//           <Redirect\n//             to={{\n//               pathname: \"/\",\n//               state: { from: location }\n//             }}\n//           />\n//         )\n//       }\n//     />\n//   );\n// }\n\n\nfunction App() {\n  return (\n    <section className=\"hzfe-music\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"*\" exact>\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport localforage from 'localforage';\nimport { ConfigProvider } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport './common.less'\nimport './index.scss';\n\nlocalforage.config({\n  name: 'HZFE-MUSIC',\n});\n\n\n\nReactDOM.render(\n  <ConfigProvider locale={zh_CN}>\n    <App />\n  </ConfigProvider>,\n  // <React.StrictMode>\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}